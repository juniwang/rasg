(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.lang = {};
    w.Mojo.lang['ui'] = {
        'zh_tw': {
            'Agree': '同意',
            'Agreed': '',
            'Assist Lose': '救援失敗',
            'Assist Win': '救援成功',
            'Back': '返回',
            'Back to {{:scenario}}': '返回{{:scenario}}',
            'Base Informations': '基礎資料',
            'Close': '關閉',
            'Congratulations': '恭喜',
            'Congratulations! You got a card!': '恭喜你獲得了一張卡牌！',
            'Congratulations! You got rewards!': '恭喜你獲得獎勵！',
            'Denied': '',
            'Deny': '拒絕',
            'Do': '執行',
            'Duel': '切磋',
            'Fight Informations': '戰鬥資訊',
            'For Help': '求援',
            'For Help Again': '再次求援',
            'Force Diplomacy': '',
            'Force Exchange': '',
            'Force Invite': '勢力邀請',
            'Force War': '勢力戰',
            'Friend Assist Request': '好友求援',
            'Friend Confirmation': '好友確認',
            'Friend Delete': '割袍斷義',
            'Friend Message': '好友消息',
            'Friend PK Lose': '切磋戰敗',
            'Friend PK Win': '切磋勝利',
            'Friend Rejection': '好友拒絕',
            'Friend Request': '好友請求',
            'In War': '參戰',
            'In War2': '',
            'Introduction': '簡介',
            'Leave Message': '留言',
            'Level': '難度：',
            'More Messages': '更多消息',
            'Next': '後一頁',
            'PK Lose': '戰敗',
            'PK Win': '勝利',
            'Previous': '前一頁',
            'Progress': '完成度',
            'Ranking': '',
            'Refresh Succ': '刷新成功',
            'Reject': '拒絕',
            'Reply': '回覆',
            'Requirement': '任務需求',
            'Retaliate': '反擊',
            'Reward': '任務獎勵',
            'Select': '選',
            'Select a friend': '選擇好友',
            'Send': '發送',
            'Send Troops': '出兵',
            'System Message': '系統消息',
            'Thanko_kr': '致謝',
            'Thanks': '致谢',
            'Type message': '發送消息',
            'View Force': '查看勢力',
            'View More': '查看更多',
            'ago': '前',
            'day': '天',
            'days': '天',
            'forcebroadcastNotice': '',
            'hour': '小時',
            'hours': '小時',
            'lost_title': '',
            'minute': '分鐘',
            'minutes': '分鐘',
            'second': '秒',
            'seconds': '秒',
            'send_diplomacy_success': '',
            'send_diplomacy_to': '',
            'ui War': '勢力戰',
        },
        'zh_cn': {
            'Agree': '同意',
            'Agreed': '已同意',
            'Assist Lose': '救援失败',
            'Assist Win': '救援成功',
            'Back': '返回',
            'Back to {{:scenario}}': '返回{{:scenario}}',
            'Base Informations': '基础信息',
            'Close': '关闭',
            'Congratulations': '恭喜',
            'Congratulations! You got a card!': '恭喜你获得了一张卡牌！',
            'Congratulations! You got rewards!': '恭喜你获得奖励！',
            'Denied': '已拒绝',
            'Deny': '拒绝',
            'Do': '执行',
            'Duel': '切磋',
            'Fight Informations': '战斗信息',
            'For Help': '求援',
            'For Help Again': '再次求援',
            'Force Diplomacy': '势力外交消息',
            'Force Exchange': '去兑换',
            'Force Invite': '势力邀请',
            'Force War': '抢粮战',
            'Friend Assist Request': '好友求援',
            'Friend Confirmation': '好友确认',
            'Friend Delete': '割袍断义',
            'Friend Message': '好友消息',
            'Friend PK Lose': '切磋战败',
            'Friend PK Win': '切磋胜利',
            'Friend Rejection': '好友拒绝',
            'Friend Request': '好友请求',
            'In War': '参战',
            'In War2': '战斗',
            'Introduction': '简介',
            'Leave Message': '留言',
            'Level': '难度：',
            'More Messages': '更多消息',
            'Next': '后一页',
            'PK Lose': '战败',
            'PK Win': '胜利',
            'Previous': '前一页',
            'Progress': '完成度',
            'Ranking': '排行榜消息',
            'Refresh Succ': '刷新成功',
            'Reject': '拒绝',
            'Reply': '回复',
            'Requirement': '任务需求',
            'Retaliate': '反击',
            'Reward': '任务奖励',
            'Select': '选',
            'Select a friend': '选择好友',
            'Send': '发送',
            'Send Troops': '出兵',
            'System Message': '系统消息',
            'Thanko_kr': '致谢',
            'Thanks': '致谢',
            'Type message': '发送消息',
            'View Force': '查看势力',
            'View More': '查看更多',
            'ago': '前',
            'day': '天',
            'days': '天',
            'forcebroadcastNotice': '势力群发消息',
            'hour': '小时',
            'hours': '小时',
            'lost_title': '失去称号',
            'minute': '分钟',
            'minutes': '分钟',
            'second': '秒',
            'seconds': '秒',
            'send_diplomacy_success': '消息发送成功~',
            'send_diplomacy_to': '留言给{{:receiveForceName}}',
            'ui War': '抢粮战',
        },
    };
    w.Mojo.lang['common'] = {
        'zh_tw': {
            'Go Statistics': '查看統計',
            'acceleration for restore ep': '&#149精力恢復速度增加：',
            'acceleration for restore sp': '&#149體力恢復速度增加：',
            'action_error': '',
            'add_cp': '你使用了{{:name}}, 獲得了{{:value}}个挑戰書',
            'add_ep': '{{:name}}使用成功',
            'add_friend': '加好友',
            'add_sp': '{{:name}}使用成功',
            'ago': '',
            'and': '',
            'assign_title': '',
            'attack': '進攻',
            'attack_again': '再次進攻',
            'avoid war time': '免戰時間：{{:avoid_war_time}}',
            'avoid_war_content': '主公，我軍還在免戰中，撤銷免戰牌方可出兵！但是我軍也將城門大開！<br><b>免戰時間：{{:avoid_war_time}}</b>',
            'avoid_war_title': '我軍免戰中',
            'back': '返回',
            'bad network': '主公～你的網路有點弱哦～',
            'barrack_active_dlg_content': '',
            'barrack_active_dlg_title': '',
            'base_attack': '基礎攻擊力：{{:old}} → <span>{{:new}}</span>',
            'base_defence': '基礎防禦力：{{:old}} → <span>{{:new}}</span>',
            'battle': '去征討',
            'battle_search': '輸入玩家暱稱搜索',
            'battleground_down_msg': '',
            'battleground_up_gold': '',
            'battleground_up_msg': '',
            'battleground_up_tip1': '',
            'before_login_data': '',
            'bind': '預設',
            'bind email': '',
            'bind_tip1': '主公，請預設您的email。Email將作為密碼找回的工具，且不可更改<div class="tip">所以請務必確認email正確有效哦~</div>',
            'bind_tip2': '預設email 7天後，即可通過email找回密碼哦~',
            'bind_tip3': '',
            'bind_title': '預設帳號資訊',
            'bind_weibo': '預設Facebook',
            'buy': '購買',
            'buy ep succ': '精力大還丹購買成功',
            'buy sp succ': '體力大還丹購買成功',
            'buy_fail_title': '購買失敗！',
            'buy_fail_title2': '',
            'buy_something_success': '{{:name}}購買成功',
            'buy_warning_content': '',
            'buy_warning_title': '',
            'cancel': '',
            'capacify_lack': '卡牌容量不足',
            'capacify_lack_tip': '主公~您的卡牌容量不足啦，去强化掉多余的卡牌或者去出售部分卡牌再来吧~',
            'choose_a_player_enter': '',
            'clear_avoid_war': '免戰時間已清空，機會和挑戰並存',
            'close': '關閉',
            'common': '勢力：',
            'confirm quit': '',
            'count': '數量：',
            'create_new_player': '',
            'create_player': '',
            'create_player_tips': '',
            'day': '天',
            'days': '天',
            'dday': '日',
            'default_text': '請輸入給他（她）的話',
            'diaochan_battle_guide': '',
            'diaochan_first_card': '',
            'diaochan_intity_first_card': '',
            'diaochan_new_player': '',
            'diaochan_rob_guide': '',
            'discount': '折',
            'do_it': '',
            'do_task_update': '',
            'email': 'email',
            'email bind tips': '',
            'enter': '',
            'enter game': '',
            'ep': '精力值：',
            'expire': '維護',
            'explanation': '',
            'facebook': 'Facebook',
            'findpwd_email_address': 'email *',
            'findpwd_email_tip': '請輸入帳號和註冊的email：',
            'findpwd_method_tip': '請選擇密碼找回的方式！<br>&#149預設手機的用戶請選擇【簡訊找回】<br>&#149已註冊email的用戶請選擇【郵件找回】<br>&#149未預設手機和郵箱的用戶請聯繫客服<br>客服email：support@redatoms.com',
            'findpwd_mobile_tip': '請輸入帳號和註冊的手機號碼：',
            'findpwd_send_email': '發送郵件',
            'findpwd_server_tip': '您要找回密碼的伺服器：',
            'findpwd_with_email': '郵件找回',
            'findpwd_with_mobile': '簡訊找回',
            'force': '勢力：',
            'force-none': '',
            'force_message': '勢力消息',
            'force_war_tip2': '',
            'forcewar_lose_grain': '【{{:forcename}}】率眾偷襲我方勢力，奪走了{{:grain}}糧餉',
            'forcewar_notice_members1': '[<span>{{:title}}</span>]{{:ownername}}向【{{:forcename}}】發起挑戰，號召你加入戰鬥！',
            'forcewar_win_grain': '我方勢力輕鬆擊敗【{{:forcename}}】，奪得{{:grain}}糧餉',
            'forgetpwd': '忘記密碼',
            'friend_search': '',
            'friendly_tip': '',
            'full': '滿',
            'gain_levelup_award': '獲得升級獎勵：',
            'game account': '',
            'general_count': '上陣將領數：',
            'general_slot_unlock': '解鎖一個上陣將領卡槽!',
            'get_wuhu_tip': '',
            'go_accept': '查收',
            'go_bless': '',
            'go_download': '',
            'go_embed': '直接上陣',
            'go_fuben': '去闖關',
            'go_home': '',
            'go_intensify': '去強化',
            'go_look': '',
            'go_mission': '',
            'go_neizheng': '',
            'go_open_level_awards': '',
            'go_package_card': '',
            'go_payment': '去加值',
            'go_rebirth': '去轉生',
            'go_sale': '去出售',
            'go_to_choose_group': '',
            'go_vm': '去換錢',
            'gold': '',
            'grain': '糧餉：',
            'has reached the maximum': '已達最大值',
            'hot': '熱',
            'hour': '小時',
            'hours': '小時',
            'id': '',
            'in_cd': '冷卻中：',
            'input_account_tip': '',
            'input_email': '请输入郵箱地址',
            'input_mobile': '請輸入手機號',
            'input_username': '請輸入帳號',
            'intensify': '強化',
            'invite_friend': '好友邀請',
            'level': '級別：',
            'level_en': '',
            'level_up': '恭喜主公達到等級{{:level}}',
            'level_up_title': '恭喜升級',
            'login_forget_description': '若註冊時未填寫手機號碼或手機號碼有誤，請聯繫客服。',
            'login_forget_passwd': '密碼找回',
            'login_forget_phone': '手機號碼 *',
            'login_forget_sendsms': '發送簡訊',
            'login_forget_username': '帳號  *',
            'login_nickname_tip': '',
            'login_time': '',
            'lv': '級別',
            'main_j': '主將',
            'max_energy': '精力最大值：{{:old}} → <span>{{:new}}</span>',
            'max_entity': '卡牌容量上限：{{:old}} → <span>{{:new}}</span>',
            'max_friends_count': '最大好友數量：{{:old}} → <span>{{:new}}</span>',
            'max_stamina': '體力最大值：{{:old}} → <span>{{:new}}</span>',
            'minute': '分鐘',
            'minutes': '分鐘',
            'month': '月',
            'more': '更多',
            'name': '暱稱：',
            'need_logout': '',
            'need_logout_notice': '',
            'new': '新',
            'new_attack': '攻擊：',
            'new_defence': '防禦：',
            'new_player_gift_title': '',
            'new_player_role': '',
            'nickname_not_empty': '',
            'no content': '無字天書會看不懂哦！',
            'no enough energy': '精力值不足',
            'no enough stamina': '體力值不足',
            'no_weixin': '',
            'not enough ep': '提示: 主公如有體力,請前去征討',
            'not enough sp': '提示: 主公如有精力,請執行任務',
            'not_bind': '暫不預設',
            'not_open': '',
            'ok': '確定',
            'owner': '',
            'player num max prompt': '',
            'playerId': '',
            'player_role': '',
            'pls_input_acc': '',
            'price': '花費：',
            'price in mall': '商城售價：',
            'price_title': '售價：',
            'priceless': '無價之寶，不可購買',
            'recharge': '加值',
            'recharge_fail_dlg_btn1': '',
            'recharge_fail_dlg_btn2': '',
            'recharge_fail_dlg_tip': '',
            'recharge_fail_dlg_title': '',
            'regret': '',
            'regret_bless': '',
            'regret_fail': '',
            'regret_no_rm': '',
            'regret_rebirth': '',
            'regret_result': '',
            'regret_result_sucess': '',
            'regret_sucess': '',
            'relation': '（連結{{:platform}}）',
            'relation_guest': '未預設email的用戶請聯繫客服<br>客服email：support@redatoms.com',
            'repeat_login': '',
            'reset_avoid_war': '使用成功，免戰時間重置為{{:avoid_war_time}}',
            'revocation_of_war_free': '撤銷免戰',
            'rm': '元寶：',
            'rm_not_enouph': '',
            'rob': '去奪寶',
            'sanguo_coming': '',
            'search': '搜',
            'search_force_hint': '',
            'second': '秒',
            'seconds': '秒',
            'select_all': '全選',
            'send success': '',
            'send_pwd_to_email': '',
            'send_pwd_to_mobile': '',
            'send_pwd_to_phone': '',
            'share': '',
            'simple': '',
            'simple_attack': '攻擊力：',
            'simple_defence': '防禦力：',
            'simplified': '簡體',
            'sp': '體力值：',
            'suggestion_default_text': '請輸入您的建議',
            'suggestion_has_send': '已飛鴿傳書！',
            'suggestion_title': '意見建議',
            'sure_buy': '',
            'task': '做任務',
            'team_attack': '軍團攻擊力：',
            'team_defence': '軍團防禦力：',
            'think_again': '再想想',
            'time for all ep': '&#149全部精力恢復：',
            'time for all sp': '&#149全部體力恢復：',
            'time for next ep': '&#149下一點精力恢復：',
            'time for next sp': '&#149下一點體力恢復：',
            'tips': '提示',
            'traditional': '繁體',
            'unknown': '',
            'unlock_fuben_name': '解鎖闖關：{{:name}}',
            'unlock_slot_count': '上陣將領卡槽：{{:old}} → <span>{{:new}}</span>',
            'use': '使用',
            'userbuff': '',
            'username_tip': '',
            'username_too_long': '',
            'view': '查看',
            'vm': '銀幣：',
            'wait_to_do': '主公～稍等一下再執行該任務吧～',
            'weibo': 'Facebook',
            'weixin': '',
            'weixinfriends': '',
            'when lose': '失敗時',
            'when win': '勝利時',
            'win_rate': '征討勝率：{{:percent}}%',
            'xp': '經驗值：',
            'year': '年',
        },
        'zh_cn': {
            'Go Statistics': '查看统计',
            'acceleration for restore ep': '&#149精力恢复速度增加：',
            'acceleration for restore sp': '&#149体力恢复速度增加：',
            'action_error': '主公~您的操作失败，请重试~',
            'add_cp': '你使用了{{:name}}, 获得了{{:value}}个军令',
            'add_ep': '{{:name}}使用成功',
            'add_friend': '加好友',
            'add_sp': '{{:name}}使用成功',
            'ago': '前',
            'and': '及',
            'assign_title': '分配称号',
            'attack': '进攻',
            'attack_again': '再次进攻',
            'avoid war time': '免战时间：{{:avoid_war_time}}',
            'avoid_war_content': '主公，我军还在免战中，撤销免战牌方可出兵！但是我军也将城门大开！<br><b>免战时间：{{:avoid_war_time}}</b>',
            'avoid_war_title': '我军免战中',
            'back': '返回',
            'bad network': '主公～你的网络不给力啊～',
            'barrack_active_dlg_content': '主公~恭喜您开启了压阵军营卡槽位，升级压阵军营可上阵更多的卡牌哦~',
            'barrack_active_dlg_title': '开启压阵军营',
            'base_attack': '基础攻击力：{{:old}} → <span>{{:new}}</span>',
            'base_defence': '基础防御力：{{:old}} → <span>{{:new}}</span>',
            'battle': '去征讨',
            'battle_search': '输入玩家昵称或ID搜索',
            'battleground_down_msg': '主公~十分不幸，由于你最近在战场上落败太多，爵位被降为【{{:rank}}】，主公不要灰心，胜败乃兵家常事~',
            'battleground_up_gold': '爵位每日俸禄：<div class="icon"></div> {{:gold}}',
            'battleground_up_msg': '金币可用来兑换各种道具，记得每天领取哦~',
            'battleground_up_tip1': '恭喜主公，你获得了爵位：',
            'before_login_data': '上次登录：',
            'bind': '绑定',
            'bind email': '绑定邮箱',
            'bind_tip1': '主公，请绑定您的电子邮箱。电子邮箱将作为密码找回的工具，且不可更改<div class="tip">所以请务必保证邮箱真实有效哦~</div>',
            'bind_tip2': '绑定邮箱7天后，即可通过邮箱找回密码哦~',
            'bind_tip3': '主公~为了您的账户安全,请去绑定邮箱,绑定后可用邮箱登录游戏，并且会获得额外奖励哦~',
            'bind_title': '账户信息绑定',
            'bind_weibo': '绑定微博',
            'buy': '购买',
            'buy ep succ': '精力大还丹购买成功',
            'buy sp succ': '体力大还丹购买成功',
            'buy_fail_title': '购买失败！',
            'buy_fail_title2': '执行失败！',
            'buy_something_success': '{{:name}}购买成功',
            'buy_warning_content': '主公～我军要购入此东东吗？',
            'buy_warning_title': '购买确认',
            'cancel': '取消',
            'capacify_lack': '卡牌容量不足',
            'capacify_lack_tip': '主公~您的卡牌容量不足啦，去强化掉多余的卡牌或者去出售部分卡牌再来吧~',
            'choose_a_player_enter': '选择一个角色进入游戏',
            'clear_avoid_war': '免战时间已清空，机会和挑战并存',
            'close': '关闭',
            'common': '势力：',
            'confirm quit': '确认退出',
            'count': '数量：',
            'create_new_player': '创建新角色',
            'create_player': '创建角色',
            'create_player_tips': '创建角色数：{{:players}}/{{:maxPlayers}}',
            'day': '天',
            'days': '天',
            'dday': '日',
            'default_text': '请输入给Ta的话',
            'diaochan_battle_guide': '主公~您的精力不足啦~<br>你还可通过<span class="special-text">【征讨】</span>提升实力哦~<div class="goBtn">点击继续</div>',
            'diaochan_first_card': '啊~被打败了~<br/>星级越高的将领越厉害哦~<br/>点击<span class="special-text">【首页】</span>中的将领头像，更换成刚获得的三星将领吧~<div class="goBtn">点击继续</div>',
            'diaochan_intity_first_card': '低等级的卡牌不够给力啊~<br/>点击<span class="special-text">【首页】</span>中的将领头像，可以强化将领，提高战斗力哦~<div class="goBtn">点击继续</div>',
            'diaochan_new_player': 'Hi~主公~<br/>我是貂蝉~<br/>我将陪伴您通过<span class="special-text">【任务】</span>体验三国穿越之旅哦~<div class="goBtn">点击继续</div>',
            'diaochan_rob_guide': '主公~您的精力不足啦~<br>你还可通过<span class="special-text">【夺宝】</span>提升实力哦~<div class="goBtn">点击继续</div>',
            'discount': '折',
            'do_it': '执行',
            'do_task_update': '做【任务】升到{{:level}}级就能解锁哦~',
            'email': '电子邮箱',
            'email bind tips': '微博已被绑定',
            'enter': '进入',
            'enter game': '进入游戏',
            'ep': '精力值：',
            'expire': '维护',
            'explanation': '说明',
            'facebook': 'facebook',
            'findpwd_email_address': '邮箱地址 *',
            'findpwd_email_tip': '请输入账户和绑定的邮箱地址：',
            'findpwd_method_tip': '<b>请选择密码找回的方式！</b><br>&#149绑定手机的用户请选择【短信找回】<br>&#149绑定邮箱的用户请选择【邮件找回】<br>&#149手机和邮箱都未绑定的用户请联系客服<br>客服邮箱：support@redatoms.com',
            'findpwd_mobile_tip': '请输入账户和绑定的手机号码：',
            'findpwd_send_email': '发送邮件',
            'findpwd_server_tip': '您要找回密码的服务器：',
            'findpwd_with_email': '邮件找回',
            'findpwd_with_mobile': '短信找回',
            'force': '势力：',
            'force-none': '未加入势力',
            'force_message': '势力消息',
            'force_war_tip2': '贡献值{{:contribute}}及以上的势力成员可以参战哦~',
            'forcewar_lose_grain': '【{{:forcename}}】率众偷袭我方势力，夺走了{{:grain}}粮饷',
            'forcewar_notice_members1': '{{:ownername}}向【{{:forcename}}】发起挑战，号召你加入战斗！',
            'forcewar_win_grain': '我方势力轻松击败【{{:forcename}}】，夺得{{:grain}}粮饷',
            'forgetpwd': '忘记密码',
            'friend_search': '输入好友昵称搜索',
            'friendly_tip': '友情提示',
            'full': '满',
            'gain_levelup_award': '获得升级奖励：',
            'game account': '游戏账户：',
            'general_count': '上阵将领数：',
            'general_slot_unlock': '解锁一个上阵将领卡槽!',
            'get_wuhu_tip': '恭喜主公~成功招募了五虎上将【{{:wuhu}}】~',
            'go_accept': '查收',
            'go_bless': '去祝福',
            'go_download': '去下载',
            'go_embed': '直接上阵',
            'go_fuben': '去闯关',
            'go_home': '回首页',
            'go_intensify': '去强化',
            'go_look': '去看看',
            'go_mission': '去任务',
            'go_neizheng': '做内政',
            'go_open_level_awards': '开礼包',
            'go_package_card': '去上阵',
            'go_payment': '去充值',
            'go_rebirth': '去转生',
            'go_sale': '去出售',
            'go_to_choose_group': '去选择',
            'go_vm': '去换钱',
            'gold': '金币：',
            'grain': '粮饷：',
            'has reached the maximum': '已达最大值',
            'hot': '热',
            'hour': '小时',
            'hours': '小时',
            'id': 'ID：',
            'in_cd': '冷却中：',
            'input_account_tip': '请输入您要找回密码的游戏账户',
            'input_email': '游戏账户不能为空',
            'input_mobile': '请输入手机号',
            'input_username': '请输入账户名',
            'intensify': '强化',
            'invite_friend': '好友邀请',
            'level': '级别：',
            'level_en': 'LV:',
            'level_up': '恭喜主公达到等级{{:level}}',
            'level_up_title': '恭喜升级',
            'login_forget_description': '若注册时未填写手机号码或手机号码输入有误，请联系客服。',
            'login_forget_passwd': '密码找回',
            'login_forget_phone': '手机号 *',
            'login_forget_sendsms': '发送短信',
            'login_forget_username': '账户名 *',
            'login_nickname_tip': '昵称设定',
            'login_time': '登录：',
            'lv': '级别',
            'main_j': '主将',
            'max_energy': '精力最大值：{{:old}} → <span>{{:new}}</span>',
            'max_entity': '卡牌容量上限：{{:old}} → <span>{{:new}}</span>',
            'max_friends_count': '最大好友数量：{{:old}} → <span>{{:new}}</span>',
            'max_stamina': '体力最大值：{{:old}} → <span>{{:new}}</span>',
            'minute': '分钟',
            'minutes': '分钟',
            'month': '月',
            'more': '更多',
            'name': '昵称：',
            'need_logout': '重新登录',
            'need_logout_notice': '主公~您的账户在其它设备上登录了，本机登录的账户自动下线，请重新登录~',
            'new': '新',
            'new_attack': '攻击：',
            'new_defence': '防御：',
            'new_player_gift_title': '强者奖励',
            'new_player_role': '请输入您的新游戏昵称：',
            'nickname_not_empty': '昵称不可为空',
            'no content': '无字天书别人是看不懂的！',
            'no enough energy': '精力值不足',
            'no enough stamina': '体力值不足',
            'no_weixin': '主公~您还没安装微信客户端呢~',
            'not enough ep': '提示: 主公如有体力,请前去征讨',
            'not enough sp': '提示: 主公如有精力,请前去任务',
            'not_bind': '暂不绑定',
            'not_open': '功能未解锁',
            'ok': '确定',
            'owner': '势力主：',
            'player num max prompt': '主公~最多只能创建{{:maxplayer}}个角色哦~',
            'playerId': '玩家ID：',
            'player_role': '游戏昵称是您在游戏中的名字：',
            'pls_input_acc': '请输入您的游戏账户',
            'price': '花费：',
            'price in mall': '商城售价：',
            'price_title': '售价：',
            'priceless': '无价之宝，不可购得。',
            'recharge': '充值',
            'recharge_fail_dlg_btn1': '充值帮助',
            'recharge_fail_dlg_btn2': '联系客服',
            'recharge_fail_dlg_tip': '主公~如果您为游戏充值无法完成，可以参考\"充值帮助\"或联系我们，我们会尽全力帮您解决问题。',
            'recharge_fail_dlg_title': '温馨提示',
            'regret': '逆天改命',
            'regret_bless': '主公~<span class = "text-red">花费30元宝</span>，可使本次祝福的卡牌变回祝福前状态（<span class = "text-red">已消耗的祝福材料不会恢复</span>），您确定吗？',
            'regret_fail': '逆天改命失败',
            'regret_no_rm': '您的元宝不足，无法进行逆天改命。',
            'regret_rebirth': '主公~<span class = "text-red">花费30元宝</span>，可使本次转生卡牌的称谓和技能变回转生前状态（<span class = "text-red">已消耗的转生材料不会恢复</span>），您确定吗？',
            'regret_result': '改命结果',
            'regret_result_sucess': '改命成功',
            'regret_sucess': '逆天改命成功',
            'relation': '（关联{{:platform}}）',
            'relation_guest': '邮箱未绑定的用户请联系客服<br>客服邮箱：support@redatoms.com',
            'repeat_login': '重复登录',
            'reset_avoid_war': '使用成功，免战时间重置为{{:avoid_war_time}}',
            'revocation_of_war_free': '撤销免战',
            'rm': '元宝：',
            'rm_not_enouph': '元宝不足',
            'rob': '去夺宝',
            'sanguo_coming': '三国来了',
            'search': '搜',
            'search_force_hint': '输入势力名称或ID搜索',
            'second': '秒',
            'seconds': '秒',
            'select_all': '全选',
            'send success': '发送成功',
            'send_pwd_to_email': '已向<span style="color:#A80E0E">{{:email}}</span>的绑定邮箱发送密码',
            'send_pwd_to_mobile': '已向<span style="color:#A80E0E">{{:mobile}}</span>发送密码',
            'send_pwd_to_phone': '请输入您的手机号',
            'share': '分享',
            'simple': '',
            'simple_attack': '攻击力：',
            'simple_defence': '防御力：',
            'simplified': '简体',
            'sp': '体力值：',
            'suggestion_default_text': '请输入您的建议',
            'suggestion_has_send': '已飞鸽传书！',
            'suggestion_title': '意见建议',
            'sure_buy': '确定购买',
            'task': '做任务',
            'team_attack': '军团攻击力：',
            'team_defence': '军团防御力：',
            'think_again': '再想想',
            'time for all ep': '&#149全部精力恢复：',
            'time for all sp': '&#149全部体力恢复：',
            'time for next ep': '&#149下一点精力恢复：',
            'time for next sp': '&#149下一点体力恢复：',
            'tips': '提示',
            'traditional': '繁体',
            'unknown': '未知',
            'unlock_fuben_name': '解锁闯关：{{:name}}',
            'unlock_slot_count': '上阵将领卡槽：{{:old}} → <span>{{:new}}</span>',
            'use': '使用',
            'userbuff': '个人称号：',
            'username_tip': '最多六个汉字',
            'username_too_long': '角色名太长',
            'view': '查看',
            'vm': '银币：',
            'wait_to_do': '主公～等会儿再执行该任务吧～',
            'weibo': '分享到微博',
            'weixin': '微信好友',
            'weixinfriends': '微信朋友圈',
            'when lose': '失败时',
            'when win': '胜利时',
            'win_rate': '征讨胜率：{{:percent}}%',
            'xp': '经验值：',
            'year': '年',
        },
    };
    w.Mojo.lang['weibo'] = {
        'zh_tw': {
            'A new general socket will unlock after binding weibo account.': '綁定帳號後增加一個上陣將領卡槽。',
            'Bind Success Tip': '',
            'Bind sina weibo account': '預設微博',
            'Bind succeed and why not to follow us': '',
            'Bind weibo': '預設微博',
            'Binding sina weibo account, please wait...': '正在預設您的新浪微博帳號，請稍候...',
            'Change account': '變更預設',
            'Fail to bind your weibo account!': '預設新浪微博帳號失敗！',
            'Fail to fetch your weibo account infomation!': '獲取新浪微博帳號資訊失敗！',
            'Fail to logout current account!': '新浪微博帳號重設失敗，請重試！',
            'Fetching your nickname of sina weibo, please wait...': '正在獲取新浪微博帳戶昵稱，請稍候...',
            'Has bind to sina weibo account': '已預設新浪微博',
            'Has bind to sina weibo account:{{:account}}': '已預設新浪微博<br>{{:account}}',
            'Have not bind any weibo account!': '未預設新浪微博',
            'I am watting for you in #SanGuo lai le#!': '我在#三國來了#等著你呢！',
            'Login': '請重新登入',
            'Merge Succeed': '',
            'Please input weibo content': '請輸入信息內容',
            'Receive 50 coins for every weibo message(The daily limit is 500 coins).': '每分享一次喜悅獲得100銀幣（每日上限500銀幣）。',
            'Send Success': '發送消息成功！',
            'Send message': '發送消息',
            'Send weibo': '發送消息',
            'Share achievements with your friends and fans.': '和好友、粉絲們分享成就。',
            'Weibo Bind Success Tip': '',
            'Weibo has a lot of benefits': '分享喜悅好處多多',
            'Your weibo account "{{:account}}" has expired, please login again!': '新浪微博已過期<br>{{:account}}',
            'Your weibo account has been binded, do you want to use it binding current': '',
            'Your weibo account has expired!': '新浪微博已過期',
            'bind exist': '',
            'bind message': '主公～你還沒預設微博，現在就去預設吧～<br>也可以在【首頁-設置】中自行預設～<br>PS:分享喜悅將獲得銀幣獎勵哦～',
            'bind succeed': '',
            'bind succeed 7 day ago has card': '',
            'bind succeed 7 day ago no card': '',
            'bind title': '預設新浪微博',
            'bind_notice': '',
            'change weibo success tips': '',
            'change weibo success tips0': '',
            'email_merge_prompt_content': '',
            'enter_game': '進入遊戲',
            'expire message': '主公～你的微博已過期，需要重新登錄～<br>也可以在【首頁-設置】中自行登錄～<br>PS:分享喜悅將獲得銀幣獎勵哦～',
            'follow': '關注',
            'follow message': '是否關注官方微博，獲取更多遊戲資訊，並結交更多喜歡《三國來了》的戰友？<br>關注獎勵：1000銀幣',
            'follow official': '關注官方微博',
            'go bind': '去預設',
            'go login': '去登入',
            'merge_faild_content': '',
            'merge_faild_tips': '',
            'merge_prompt_content': '',
            'merge_prompt_tips': '',
            'no_bind_notice': '',
            'rebind weibo faild': '',
            'rebind weibo faild content': '',
            'relation_official_weibo': '關注《三國來了》官方微博<br><span>（第一次關注獎勵1000銀幣哦~）</span>',
            'relation_weibo': '連結新浪微博帳號',
            'relation_weibo_tip': '嗨，連結新浪微博隨時可以與身邊的朋友分享遊戲中的喜悅哦~',
            'weibo bind succeed 7 day ago has card': '',
            'weibo bind succeed 7 day ago no card': '',
            'weibo binding content': '',
            'weibo binding tips': '',
            'weibo bonus': '每分享一次喜悅可獲得100銀幣～',
            'weibo_bind_success_7_tips': '',
            'weibo_bind_success_7_tips2': '',
        },
        'zh_cn': {
            'A new general socket will unlock after binding weibo account.': '绑定账户后增加一个上阵将领卡槽。',
            'Bind Success Tip': '恭喜主公~绑定微博成功！关注《三国来了》官方微博，可获得1000银币奖励哦~是否关注？',
            'Bind sina weibo account': '绑定新浪微博',
            'Bind succeed and why not to follow us': '恭喜主公~绑定微博成功！您开启了一个新的武将卡槽，并额外获得转生丹×10的奖励哦~<br/>关注《三国来了》官方微博会有1000银币的额外奖励哦，是否关注？',
            'Bind weibo': '绑定微博',
            'Binding sina weibo account, please wait...': '正在绑定新浪微博账户，请稍候...',
            'Change account': '变更绑定',
            'Fail to bind your weibo account!': '绑定新浪微博账户失败！',
            'Fail to fetch your weibo account infomation!': '获取新浪微博账户信息失败！',
            'Fail to logout current account!': '新浪微博账户注销失败，请重试！',
            'Fetching your nickname of sina weibo, please wait...': '正在获取新浪微博账户昵称，请稍候...',
            'Has bind to sina weibo account': '已绑定新浪微博',
            'Has bind to sina weibo account:{{:account}}': '已绑定新浪微博<br>{{:account}}',
            'Have not bind any weibo account!': '未绑定新浪微博',
            'I am watting for you in #SanGuo lai le#!': '我在#三国来了#等着你呢！',
            'Login': '重新登录',
            'Merge Succeed': '合并成功',
            'Please input weibo content': '请输入微博内容',
            'Receive 50 coins for every weibo message(The daily limit is 500 coins).': '每发一条微博获得100银币（每日上限500银币）。',
            'Send Success': '发送微博成功！',
            'Send message': '发送消息',
            'Send weibo': '发送微博',
            'Share achievements with your friends and fans.': '和好友、粉丝们分享成就。',
            'Weibo Bind Success Tip': '恭喜主公~绑定微博成功！',
            'Weibo has a lot of benefits': '微博好处多多',
            'Your weibo account "{{:account}}" has expired, please login again!': '新浪微博已过期<br>{{:account}}',
            'Your weibo account has been binded, do you want to use it binding current': '主公~您的微博已绑定过游戏，是否将角色：<span style="color:#A80E0E">{{:nickname}}</span>合并到此微博下，<span style="color:#A80E0E">合并后将只能用此微博({{:weibo}})登录该角色</span>，确定合并该角色吗？',
            'Your weibo account has expired!': '新浪微博已过期',
            'bind exist': '主公~该微博已经被绑定在其他游戏账户上，无法再次绑定，请更换微博重试。',
            'bind message': '主公~你还没有绑定微博，现在就去绑定吧~<br>也可以在【首页-设置】中自行绑定~<br>PS:首次绑定微博可额外解锁一个将领卡槽，发送微博也可获得银币奖励哦~',
            'bind succeed': '绑定成功',
            'bind succeed 7 day ago has card': '恭喜主公~微博将在7天后绑定成功!绑定成功后只能使用微博(<span style="color:#A80E0E">{{:weibo}}</span>)登录游戏。绑定成功后您可开启1个卡槽位,并额外获得转生丹×10的奖励哦~',
            'bind succeed 7 day ago no card': '恭喜主公~微博将在7天后绑定成功!绑定成功后只能使用微博(<span style="color:#A80E0E">{{:weibo}}</span>)登录游戏。绑定成功后可额外获得转生丹×10的奖励哦~',
            'bind title': '绑定新浪微博',
            'bind_notice': '绑定的微博不用于游戏登录',
            'change weibo success tips': '恭喜主公~绑定微博成功！关注《三国来了》官方微博精彩不断，是否关注？',
            'change weibo success tips0': '恭喜主公~成功绑定微博!您开启了一个新的武将卡槽，并额外获得转生丹×10的奖励哦~<br/>关注《三国来了》官方微博精彩不断,是否关注?',
            'email_merge_prompt_content': '主公~您的账户将合并到邮箱(<span style="color:#A80E0E">{{:email}}</span>)中,合并后将不能使用原账户登录游戏,只能用邮箱(<span style="color:#A80E0E">{{:email}}</span>)登录游戏,请点击确定完成合并。',
            'enter_game': '进入游戏',
            'expire message': '主公～你的微博已过期，需要重新登录～<br>也可以在【首页-设置-账户】中自行登录～<br>PS:发送微博将获得银币奖励哦～',
            'follow': '关注',
            'follow message': '是否关注官方微博，获取更多游戏信息，并结交更多喜欢《三国来了》的战友？<br>关注奖励：1000银币',
            'follow official': '关注官方微博',
            'go bind': '去绑定',
            'go login': '去登录',
            'merge_faild_content': '主公~您要绑定的账户和当前账户的角色总数超过限制,不能进行合并。',
            'merge_faild_tips': '合并失败',
            'merge_prompt_content': '主公~您的账户将合并到微博(<span style="color:#A80E0E">{{:weibo}}</span>)中,合并后将不能使用原账户将登录游戏,只能用微博(<span style="color:#A80E0E">{{:weibo}}</span>)登录游戏,请点击确定完成合并。',
            'merge_prompt_tips': '合并确认',
            'no_bind_notice': '绑定后，每天在游戏时发微博可获得银币奖励',
            'rebind weibo faild': '登录微博错误',
            'rebind weibo faild content': '主公~激活失败，需要登录你绑定的微博才可以成功激活哦~',
            'relation_official_weibo': '关注《三国来了》官方微博<br><span>（第一次关注奖励1000银币哦~）</span>',
            'relation_weibo': '关联新浪微博账户',
            'relation_weibo_tip': '亲，关联新浪微博随时可以与身边的朋友分享游戏中的喜悦哦~',
            'weibo bind succeed 7 day ago has card': '恭喜主公~成功绑定微博(<span style="color:#A80E0E">{{:weibo}}</span>)!以后只能用该微博登录游戏,您开启了一个新的武将卡槽。为了您的账户安全,请使用微博(<span style="color:#A80E0E">{{:weibo}}</span>)重新登录游戏。',
            'weibo bind succeed 7 day ago no card': '恭喜主公~成功绑定微博(<span style="color:#A80E0E">{{:weibo}}</span>)!以后只能用该微博登录游戏。为了您的账户安全,请使用微博(<span style="color:#A80E0E">{{:weibo}}</span>)重新登录游戏。',
            'weibo binding content': '主公~该微博正在绑定中，暂时不能绑定其他游戏账户。',
            'weibo binding tips': '微博绑定中',
            'weibo bonus': '<span style="color:#A80E0E">每日前3次</span>分享可获2000银币～',
            'weibo_bind_success_7_tips': '恭喜主公~微博将在7天后绑定成功！绑定成功后您可开启1个卡槽位，并额外获得转生丹×10的奖励哦~',
            'weibo_bind_success_7_tips2': '恭喜主公~微博将在7天后绑定成功！绑定成功后可额外获得转生丹×10的奖励哦~',
        },
    };
    w.Mojo.lang['facebook'] = {
        'zh_tw': {
            'A new general socket will unlock after binding weibo account.': '預設帳號後增加一個上陣將領卡槽。',
            'Bind sina weibo account': '預設facebook',
            'Bind weibo': '預設facebook',
            'Binding sina weibo account, please wait...': '正在預設facebook帳號，請稍候...',
            'Change account': '變更預設',
            'Fail to bind your weibo account!': '預設facebook帳號失敗！',
            'Fail to fetch your weibo account infomation!': '獲取facebook帳號資訊失敗！',
            'Fail to logout current account!': 'facebook帳號登出失敗，請重試！',
            'Fetching your nickname of sina weibo, please wait...': '正在獲取facebook帳戶昵稱，請稍候...',
            'Has bind to sina weibo account': '已預設facebook',
            'Has bind to sina weibo account:{{:account}}': '已預設facebook<br>{{:account}}',
            'Have not bind any weibo account!': '未預設facebook',
            'I am watting for you in #SanGuo lai le#!': '我在#三國來了#等著你呢！',
            'Login': '重新登入',
            'Please input weibo content': '請輸入分享內容',
            'Receive 50 coins for every weibo message(The daily limit is 500 coins).': '每po一條分享獲得100銀幣（每日上限500銀幣）。',
            'Send Success': '發送分享成功！',
            'Send message': '發送消息',
            'Send weibo': '分享',
            'Share achievements with your friends and fans.': '和好友、粉絲們分享成就。',
            'Weibo has a lot of benefits': '預設facebook帳號好處多多',
            'Your weibo account "{{:account}}" has expired, please login again!': 'facebook已過期<br>{{:account}}',
            'Your weibo account has expired!': 'facebook已過期',
            'bind message': '主公～你還沒有預設facebook帳號，現在就去預設吧～<br>也可以在【首頁-設置】中自行預設～<br>PS:發送分享將獲得銀幣獎勵哦～',
            'bind title': '預設facebook',
            'enter_game': '進入遊戲',
            'expire message': '主公～你的facebook已過期，需要重新登入～<br>也可以在【首頁-設置】中自行登入～<br>PS:發送分享將獲得銀幣獎勵哦～',
            'follow': '關注',
            'follow message': '是否關注官方facebook，獲取更多遊戲資訊，並結交更多喜歡《三國來了》的戰友？<br>關注獎勵：1000銀幣',
            'follow official': '關注官方facebook',
            'go bind': '去預設',
            'go login': '去登入',
            'relation_official_weibo': '關注《三國來了》官方Facebook<br><span>（第一次關注獎勵1000銀幣哦~）</span>',
            'relation_weibo': '連結facebook帳號',
            'relation_weibo_tip': '嗨，連結facebook隨時與身邊的朋友分享遊戲中的歡樂哦~',
            'weibo bonus': '每po一條分享可獲得100銀幣～',
        },
        'zh_cn': {
            'A new general socket will unlock after binding weibo account.': '绑定账户后增加一个上阵将领卡槽。',
            'Bind sina weibo account': '绑定facebook',
            'Bind weibo': '绑定facebook',
            'Binding sina weibo account, please wait...': '正在绑定facebook账户，请稍候...',
            'Change account': '变更绑定',
            'Fail to bind your weibo account!': '绑定facebook账户失败！',
            'Fail to fetch your weibo account infomation!': '获取facebook账户信息失败！',
            'Fail to logout current account!': 'facebook账户注销失败，请重试！',
            'Fetching your nickname of sina weibo, please wait...': '正在获取facebook账户昵称，请稍候...',
            'Has bind to sina weibo account': '已绑定facebook',
            'Has bind to sina weibo account:{{:account}}': '已绑定facebook<br>{{:account}}',
            'Have not bind any weibo account!': '未绑定facebook',
            'I am watting for you in #SanGuo lai le#!': '我在#三国来了#等着你呢！',
            'Login': '重新登录',
            'Please input weibo content': '请输入分享内容',
            'Receive 50 coins for every weibo message(The daily limit is 500 coins).': '每发一条分享获得100银币（每日上限500银币）。',
            'Send Success': '发送分享成功！',
            'Send message': '发送消息',
            'Send weibo': '分享',
            'Share achievements with your friends and fans.': '和好友、粉丝们分享成就。',
            'Weibo has a lot of benefits': '绑定facebook好处多多',
            'Your weibo account "{{:account}}" has expired, please login again!': 'facebook已过期<br>{{:account}}',
            'Your weibo account has expired!': 'facebook已过期',
            'bind message': '主公～你还没有绑定facebook，现在就去绑定吧～<br>也可以在【首页-设置】中自行绑定～<br>PS:发送分享将获得银币奖励哦～',
            'bind title': '绑定facebook',
            'enter_game': '进入游戏',
            'expire message': '主公～你的facebook已过期，需要重新登录～<br>也可以在【首页-设置】中自行登录～<br>PS:发送分享将获得银币奖励哦～',
            'follow': '关注',
            'follow message': '是否关注官方facebook，获取更多游戏信息，并结交更多喜欢《三国来了》的战友？<br>关注奖励：1000银币',
            'follow official': '关注官方facebook',
            'go bind': '去绑定',
            'go login': '去登录',
            'relation_official_weibo': '关注《三国来了》官方微博<br><span>（第一次关注奖励1000银币哦~）</span>',
            'relation_weibo': '关联facebook账户',
            'relation_weibo_tip': '亲，关联facebook随时可以与身边的朋友分享游戏中的喜悦哦~',
            'weibo bonus': '每发一条分享可获得100银币～',
        },
    };
    w.Mojo.lang['largeentity'] = {
        'zh_tw': {
            'attack': '增加攻擊力 + ',
            'defence': '增加防禦力 + ',
            'effect_ep': '精力恢復速度 + ',
            'effect_max_attack': '武將最大攻擊 + ',
            'effect_max_attack_pro': '攻擊時，打出最大攻擊的機率 + ',
            'effect_max_defence': '武將最大防禦 + ',
            'effect_max_defence_pro': '防守時，打出最大防禦的機率 + ',
            'effect_min_attack': '武將最小攻擊 + ',
            'effect_min_defence': '武將最小防禦 + ',
            'effect_rm': '額外獲得元寶 + ',
            'effect_sp': '體力恢復速度 + ',
            'effect_vm': '額外獲得銀幣 + ',
            'effect_xp': '額外獲得經驗 + ',
        },
        'zh_cn': {
            'attack': '增加攻击力 + ',
            'defence': '增加防御力 + ',
            'effect_ep': '精力恢复速度 + ',
            'effect_max_attack': '武将最大攻击 + ',
            'effect_max_attack_pro': '攻击时，打出最大攻击的概率 + ',
            'effect_max_defence': '武将最大防御 + ',
            'effect_max_defence_pro': '防守时，打出最大防御的概率 + ',
            'effect_min_attack': '武将最小攻击 + ',
            'effect_min_defence': '武将最小防御 + ',
            'effect_rm': '额外获得元宝 + ',
            'effect_sp': '体力恢复速度 + ',
            'effect_vm': '额外获得银币 + ',
            'effect_xp': '额外获得经验 + ',
        },
    };
    w.Mojo.lang['mall'] = {
        'zh_tw': {
            'arm_count': '',
            'arm_lucky_tips': '',
            'batch_buy_dlg_tip': '',
            'batch_buy_num_tip': '',
            'buy': '購買',
            'buy-again': '',
            'buy_entity_content': '主公～您購買的東東已經放入包裹，可以從【首頁-卡牌】中查收～',
            'buy_fail_title': '購買失敗！',
            'buy_fail_title2': '',
            'buy_props_content': '主公～您購買的東東已經放入包裹，可以從【首頁-道具】中查收～',
            'buy_rm': '購買元寶',
            'buy_success_body': 'PS:您購買的東東已經放入包裹。',
            'buy_success_title': '購買成功',
            'buy_tips': '',
            'buy_tips_91': '',
            'buy_tips_pp': '',
            'buy_vm': '購買銀幣',
            'buy_warning_content': '主公～我軍要購入此東東嗎？',
            'buy_warning_content2': '',
            'buy_warning_title': '購買確認',
            'buy_warning_title2': '',
            'contact_service': '',
            'continue_mall': '繼續購物',
            'continue_mall2': '',
            'cost_vm': '',
            'current_rm': '',
            'current_vm': '',
            'defence_count': '',
            'discount_goods_flag': '%<br/>折扣',
            'discount_goods_flag_new': '{{:discount}}折',
            'do-again': '',
            'do_it': '',
            'find_general': '',
            'find_token_not_enough': '',
            'find_token_not_enough_content': '',
            'find_treasure': '',
            'general_count': '',
            'general_lucky_tips': '',
            'gift_packge': '',
            'go_accept': '查收',
            'go_payment': '去加值',
            'go_see': '',
            'go_vm': '去換錢',
            'goods_detail_title': '商品資訊',
            'has_buy': '已購買',
            'has_do': '',
            'heaven_bless': '',
            'horse_count': '',
            'hot_goods_flag': '熱賣',
            'jaibreak_tehui_giveto': '',
            'mall_endtime': '',
            'needCount': '',
            'need_rm': '主公～您的元寶不夠啦，荷包存點錢再來吧！',
            'need_vm': '主公～您的銀幣不夠啦，荷包存點錢再來吧！',
            'new_goods_flag': '新品',
            'niuyige': '',
            'not_tip': '',
            'open_ext_tip': '',
            'open_minis_result': '開啟扭蛋',
            'open_minis_tip': '主公～您扭出了【{{name}}】，可以從【首頁-卡牌】中查收～',
            'open_minis_tip1': '主公～您扭出了【{{name}}】，可以從【首頁-圖鑒-活動】中查收～',
            'pay_tips': '',
            'pay_tips_1': '',
            'pay_tips_2': '',
            'pay_tips_3': '',
            'pay_tips_4': '',
            'pay_tips_5': '',
            'pay_tips_content_1': '',
            'pay_tips_content_2': '',
            'pay_tips_content_3': '',
            'pay_tips_content_4': '',
            'play_minis': '打開扭蛋',
            'price_title': '{{name}}商城售價：',
            'rm_not_enough': '',
            'shilianchou': '',
            'shilianchou-title': '',
            'spend_rm': '',
            'spend_vm': '',
            'sure_buy': '確定購買',
            'sure_buy2': '',
            'tavern_update_time': '酒館更新倒數計時 %hhu %mmu %ssu',
            'tehui_bought': '',
            'tehui_endTime': '',
            'tehui_title': '',
            'think_again': '再想想',
            'wait_buy_result': '待收貨',
            'warm_tips': '',
        },
        'zh_cn': {
            'arm_count': '把武器～',
            'arm_lucky_tips': '前两次执行四星任务必送四星及以上装备哦~',
            'batch_buy_dlg_tip': '主公~请输入我军要购买此东东的数量~',
            'batch_buy_num_tip': '购买数量：',
            'buy': '购买',
            'buy-again': '再次购买',
            'buy_entity_content': '主公～您购买的东东已经放入包裹，可以从【首页-卡牌】中查收～',
            'buy_fail_title': '购买失败！',
            'buy_fail_title2': '执行失败！',
            'buy_props_content': '主公～您购买的东东已经放送达，可以从【商城-道具】中查收～',
            'buy_rm': '购买元宝',
            'buy_success_body': 'PS:您购买的东东已经放入包裹。',
            'buy_success_title': '购买成功',
            'buy_tips': '主公～您还可以购买{{:name}}，{{:money}}元即可获得200元宝和稀有卡牌，每位主公仅限购一次哦～',
            'buy_tips_91': '主公～您还可以购买{{:name}}，{{:money}}(91豆)即可获得200元宝和稀有卡牌，每位主公仅限购一次哦～',
            'buy_tips_pp': '主公～您还可以购买{{:name}}，{{:money}}(pp币)即可获得200元宝和稀有卡牌，每位主公仅限购一次哦～',
            'buy_vm': '购买银币',
            'buy_warning_content': '主公～我军要购入此东东吗？',
            'buy_warning_content2': '主公~我军要确定执行此任务吗？',
            'buy_warning_title': '购买确认',
            'buy_warning_title2': '执行确认',
            'contact_service': '联系客服',
            'continue_mall': '继续购物',
            'continue_mall2': '继续执行',
            'cost_vm': '预计花费：',
            'current_rm': '现有元宝：',
            'current_vm': '现有银币：',
            'defence_count': '个防具～',
            'discount_goods_flag': '%<br/>折扣',
            'discount_goods_flag_new': '{{:discount}}折',
            'do-again': '继续执行',
            'do_it': '执行',
            'find_general': '寻将',
            'find_token_not_enough': '寻访令不足',
            'find_token_not_enough_content': '主公～您的寻访令不足哦～<br />已有{{:has}}个寻访令，尚需{{:need}}个寻访令可完成此任务，确定要购买寻访令并使用它吗？',
            'find_treasure': '寻宝',
            'general_count': '名将领～',
            'general_lucky_tips': '前两次执行四星任务必送四星及以上将领哦~',
            'gift_packge': '礼包',
            'go_accept': '查收',
            'go_payment': '去充值',
            'go_see': '去查看',
            'go_vm': '去换钱',
            'goods_detail_title': '商品信息',
            'has_buy': '已购买',
            'has_do': '已执行',
            'heaven_bless': '天降鸿福',
            'horse_count': '匹坐骑～',
            'hot_goods_flag': '热卖',
            'jaibreak_tehui_giveto': '获得赠品：{{:entityName}} × {{:count}}',
            'mall_endtime': '结束时间：{{:endtime}}',
            'needCount': '本次更名消耗道具数：{{:needCount}}',
            'need_rm': '主公～您的元宝不够啦，快去充值吧！',
            'need_vm': '主公～您的银币不够啦，攒点钱再来吧！',
            'new_goods_flag': '新品',
            'niuyige': '执行一次',
            'not_tip': '不再提示',
            'open_ext_tip': '恭喜主公~您获得奖励：【{{:moneyname}}】×{{:count}}，并额外获得了10',
            'open_minis_result': '获得奖励',
            'open_minis_tip': '恭喜主公~您获得奖励：【{{:moneyname}}】×{{:count}}，并额外获得了【{{:name}}】～',
            'open_minis_tip1': '恭喜主公~您获得奖励：【{{:moneyname}}】×{{:count}}，并额外获得了【{{:name}}】～',
            'pay_tips': '充值失败小贴士',
            'pay_tips_1': '<span class = "pay_tips_home"><br>1、充值时，提示：“你的付款方式卡被拒绝”或提示“请联络iTunes支持人员以完成交易”。</span>',
            'pay_tips_2': '<span class = "pay_tips_home"><br>2、充值时，提示：“ipa buy failed”。</span>',
            'pay_tips_3': '<span class = "pay_tips_home"><br>3、充值时，提示：“你尚未购买此游戏”。</span>',
            'pay_tips_4': '<span class = "pay_tips_home"><br>4、iOS7升级后，无法正常充值或购买游戏内道具。</span>',
            'pay_tips_5': '<span ><br>5、如果您还有其他问题，请点击下方的“联系客服”，我们会全力帮您解决。</span>',
            'pay_tips_content_1': '<span class = "pay_tips_header">1、充值时，提示：“你的付款方式卡被拒绝”或提示“请联络iTunes支持人员以完成交易”解决方案：</span><br><span class = "pay_tips_content">一般是先报错提示1，然后多次后报错提示2。不好意思，你的苹果账号就封了，更可怕的是设备可能也被封，换id换信用卡可能也不行。如果在出现第一次报错1的时候就收手，不要继续点击购买，那么不会被封，你换信用卡或银行支付就行。<br>还可以给苹果的技术支持写信：<br> 步骤一：访问 https://expresslane.apple.com/GetproductgroupList.do?PRKEYS=PF4<br>步骤二：先选国籍中国，然后选择 iTunes -> iTunes Store -> 购买、账单与兑换 -> "您的信用卡已被拒绝"消息。<br>步骤三：写上标题：比如内购报错“您的信用卡已被拒绝”，多次后报错“请联络iTunes支持人员以完成交易”。<br>步骤四：继续，登录账号。<br>步骤五：写上内容比如：“我的信用卡号：XXXXXXXXXXX，请快点解决，很急”，提交就行了，大概2~5个工作日就能解锁。</span>',
            'pay_tips_content_2': '<span class = "pay_tips_header">2、充值时，提示：“ipa buy failed”解决方案:</span><br><span class = "pay_tips_content">因为你越狱并且装了ipa crark或ipa free插件。<br>只要你在cydia里卸载ipa crark，或关闭ipa free就行。<br>如果你没越狱，那可能是服务器验证报错，需要联系客服询问。</span>',
            'pay_tips_content_3': '<span class = "pay_tips_header">3、充值时，提示：“你尚未购买此游戏”解决方案：</span><br><span class = "pay_tips_content">因为你是越狱用户，游戏并不是从app下载并安装的，而是通过类似同步推软件安装。<br>最简单的办法是ipad和iphone设备不用任何操作，连接电脑并通过电脑上的itunes软件，点击下载此游戏，就认为购买了。</span>',
            'pay_tips_content_4': '<span class = "pay_tips_header">4、iOS7升级后，无法正常充值或购买游戏内道具解决方案：</span><br><span class = "pay_tips_content">方法一：首先，建议您从设备的【设置】-【itunes&App store】用苹果ID登陆。<br>然后，强制重新启动设备。同时按住home键和电源键，直到看到苹果的标志，等待机子自己重启。<br>方法二： 注销App Store，重启设备，然后重新登陆账号。<br>方法三：修改系统默认日期与时间，把系统默认的时间改成与库比蒂诺时间一致。<br>（库比蒂诺为苹果电脑的全球总公司所在地，位于美国旧金山）。</span>',
            'play_minis': '打开扭蛋',
            'price_title': '{{name}}商城售价：',
            'rm_not_enough': '主公~您的元宝不足~',
            'shilianchou': '执行十次',
            'shilianchou-title': '十连扭更划算，必得五星卡！',
            'spend_rm': '消耗元宝：',
            'spend_vm': '消耗银币：',
            'sure_buy': '确定购买',
            'sure_buy2': '确定',
            'tavern_update_time': '酒馆更新倒计时 %hhu %mmu %ssu',
            'tehui_bought': '已购买该礼包~',
            'tehui_endTime': '剩余时间：{{:time}}',
            'tehui_title': '限时充值特惠，每项限购一次！',
            'think_again': '再想想',
            'wait_buy_result': '待收货',
            'warm_tips': '温馨提示',
        },
    };
    w.Mojo.lang['mission'] = {
        'zh_tw': {
            'Attack Another Generals': '恭喜主公，我軍擊敗了【{{:boss_name}}】，並繳獲了【{{:name}}】～',
            'Attack One Generals': '恭喜主公，我軍擊敗了【{{:boss_name}}】，並招降了【{{:name}}】～',
            'Coins': '銀幣',
            'Energy point is not enough': '精力值不足',
            'Gained': '獲得',
            'Get Another Collection': '恭喜，百姓們仰慕主公，獻上了傳家之寶【{{:name}}】～',
            'Get Another Generals': '恭喜，【{{:name}}】仰慕主公，前來投奔～',
            'Get One Collection': '恭喜主公，我軍在廢棄的房舍裡面發現了【{{:name}}】～',
            'Get One Generals': '恭喜主公，我軍招募到了【{{:name}}】～',
            'Please complete the tasko_kr above!': '需要完成以上全部任務才能執行此任務～',
            'Please complete the tasks above!': '需要完成以上全部任務才能執行此任務～',
            'Task Awards': '任務獎勵',
            'The task is completed!': '主公～該任務已經完成～',
            'You have to complete the previous task group!': '需要完成上一任務鏈方能解鎖～',
            'action': '',
            'award_desc': '',
            'award_tips': '',
            'battle result preview': '',
            'battle_result_fail': '',
            'battle_result_formation_title_lose': '',
            'battle_result_formation_title_win': '',
            'can_get_repeatly': '',
            'cannot_get_award': '',
            'formation': '',
            'formation detail': '',
            'get_award': '',
            'in_cd': '',
            'mission_award': '',
            'mission_progress': '',
            'new_player_gift_title': '',
            'win_card': '',
        },
        'zh_cn': {
            'Attack Another Generals': '恭喜主公，我军击败了【{{:boss_name}}】，并缴获了【{{:name}}】～',
            'Attack One Generals': '恭喜主公，我军击败了【{{:boss_name}}】，并招降了【{{:name}}】～',
            'Coins': '银币',
            'Energy point is not enough': '精力值不足',
            'Gained': '获得',
            'Get Another Collection': '恭喜，百姓们仰慕主公，献上了传家之宝【{{:name}}】～',
            'Get Another Generals': '恭喜，【{{:name}}】仰慕主公，前来投奔～',
            'Get One Collection': '恭喜主公，我军在废弃的房舍里面发现了【{{:name}}】',
            'Get One Generals': '恭喜主公，我军招募到了【{{:name}}】～',
            'Please complete the tasko_kr above!': '需要完成以上全部任务才能执行此任务～',
            'Please complete the tasks above!': '需要完成以上全部任务才能执行此任务～',
            'Task Awards': '任务奖励',
            'The task is completed!': '主公～该任务已经完成～',
            'You have to complete the previous task group!': '需要完成上一任务链方能解锁～',
            'action': '出征',
            'award_desc': '【{{:name}}】任务奖励：',
            'award_tips': '完成更高难度任务可减少该章节领奖的冷却时间',
            'battle result preview': '征讨结果预览',
            'battle_result_fail': '我军战败了，可以强化将领或调整阵容后再来试试哦~',
            'battle_result_formation_title_lose': '战斗失败',
            'battle_result_formation_title_win': '战斗胜利',
            'can_get_repeatly': '可重复',
            'cannot_get_award': '需完成{{:name}}的任务才能领取哦~',
            'formation': '调整阵容',
            'formation detail': '阵容对比',
            'get_award': '领取奖励',
            'in_cd': '主公~还不能领取这个东东哦~',
            'mission_award': '任务奖励',
            'mission_progress': '任务进度',
            'new_player_gift_title': '强者奖励',
            'win_card': '主公~您有可能获得将领卡哦~',
        },
    };
    w.Mojo.lang['message'] = {
        'zh_tw': {
            'All': '所有',
            'Battle': '戰鬥',
            'Force': '',
            'Friend': '好友',
            'Handle': '處理',
            'Messages': '消息',
            'More Messages': '更多消息',
            'No Message!': '暫無消息！',
            'Send Message to Friend': '已給好友發送求援消息',
            'Send succeed!': '發送成功！',
            'System': '系統',
            'attack': '攻擊力：{{:min}}-{{:max}}',
            'fuben disabled': '',
            'fuben disabled describtion': '',
            'level': '級別：{{:level}}級',
            'nick': '昵稱：{{:nick}}',
            'readed': '',
        },
        'zh_cn': {
            'All': '所有',
            'Battle': '战斗',
            'Force': '势力',
            'Friend': '好友',
            'Handle': '处理',
            'Messages': '消息',
            'More Messages': '更多消息',
            'No Message!': '暂无消息！',
            'Send Message to Friend': '已给好友发送求援消息',
            'Send succeed!': '发送成功！',
            'System': '系统',
            'attack': '攻击力：{{:min}}-{{:max}}',
            'fuben disabled': '闯关活动已结束',
            'fuben disabled describtion': '主公~【{{:fubenName}}】已经关闭，请等待下次活动开启哦~',
            'level': '级别：{{:level}}级',
            'nick': '昵称：{{:nick}}',
            'readed': '（已处理）',
        },
    };
    w.Mojo.lang['battle'] = {
        'zh_tw': {
            'Can not attack weak': '主公～欺負弱小是不對的～',
            'Enemy': '宿敵',
            'Fight': '單挑',
            'More opponents': '更多對手',
            'No enemies': '您還沒有仇家！獨孤求敗中～',
            'No fight opponents': '您還沒有實力相近的對手！獨孤求敗中～',
            'action': '出征',
            'armor_protect': '',
            'base attack': '基礎攻擊力：',
            'base defence': '基礎防禦力：',
            'battle result preview': '戰鬥結果預覽',
            'battle_fail_content': '',
            'battle_fail_title': '',
            'battle_friend_or_colleague_tip': '',
            'battle_result_formation_title_lose': '',
            'battle_result_formation_title_win': '',
            'battle_result_title': '戰鬥結果',
            'battle_result_title_lose': '征討失敗',
            'battle_result_title_rob_lose': '奪寶失敗',
            'battle_result_title_rob_win': '奪寶獎勵',
            'battle_result_title_win': '征討獎勵',
            'battle_tip': '攻擊等級高、存款多的玩家能搶到更多銀幣哦~',
            'be_restraint': '被克',
            'force_none': '',
            'formation': '調整陣容',
            'formation detail': '陣容資訊',
            'in_avoid_war': '',
            'lose_message': '你被打敗，小有損失～',
            'refresh opps': '刷新對手',
            'refresh_opponents': '刷新對手',
            'resist': '',
            'restraint': '克制',
            'search_prefix': 'Lv.',
            'sum attack': '軍團攻擊力：',
            'sum defence': '軍團防禦力：',
            'weapon_hit': '',
            'win_message_01': '恭喜主公，我軍擊敗了{{:name}}，並繳獲了【{{:bonus}}】～',
            'win_message_02': '恭喜主公，我軍擊敗了{{:name}}，打掃戰場時發現了【{{:bonus}}】～',
            'win_message_03': '恭喜主公，我軍擊敗了{{:name}}～',
            'win_message_04': '主公～真遺憾！你在行軍過程中【{{:bonus}}】已經被其他人搶走了！',
            'win_message_05': '主公～我軍雖勝，但{{:name}}攜【{{:bonus}}】跑路了～',
            'win_message_06': '主公～你有可能獲得裝備卡哦～',
            'win_message_07': '主公~你真是佛心來的啊！我軍擊敗了{{:name}}，並將【{{:bonus}}】歸還給了{{:frdname}}～',
        },
        'zh_cn': {
            'Can not attack weak': '主公～欺负弱小是不对的～',
            'Enemy': '宿敌',
            'Fight': '单挑',
            'More opponents': '更多对手',
            'No enemies': '您还没有仇家！独孤求败中～',
            'No fight opponents': '这个世界查无此人～',
            'action': '出征',
            'armor_protect': '防护',
            'base attack': '基础攻击力：',
            'base defence': '基础防御力：',
            'battle result preview': '征讨结果预览',
            'battle_fail_content': '主公，对方在战斗中哦，请稍等一会再来吧！',
            'battle_fail_title': '不能征讨',
            'battle_friend_or_colleague_tip': '主公~该玩家和你是好友或者同势力成员哦~',
            'battle_result_formation_title_lose': '战斗失败',
            'battle_result_formation_title_win': '战斗胜利',
            'battle_result_title': '战斗结果',
            'battle_result_title_lose': '征讨失败',
            'battle_result_title_rob_lose': '夺宝失败',
            'battle_result_title_rob_win': '夺宝奖励',
            'battle_result_title_win': '征讨奖励',
            'battle_tip': '小贴士：攻击存钱多的玩家能抢到更多银币哦~',
            'be_restraint': '被克',
            'force_none': '未加入势力',
            'formation': '调整阵容',
            'formation detail': '阵容对比',
            'in_avoid_war': '免战中',
            'lose_message': '你被打败，小有损失～',
            'refresh opps': '刷新对手',
            'refresh_opponents': '刷新对手',
            'resist': '抵抗',
            'restraint': '克制',
            'search_prefix': 'Lv.',
            'sum attack': '军团攻击力：',
            'sum defence': '军团防御力：',
            'weapon_hit': '暴击',
            'win_message_01': '恭喜主公，我军击败了{{:name}}，并缴获了【{{:bonus}}】～',
            'win_message_02': '恭喜主公，我军击败了{{:name}}，打扫战场时发现了【{{:bonus}}】～',
            'win_message_03': '恭喜主公，我军击败了{{:name}}～',
            'win_message_04': '主公～真遗憾！你在行军过程中【{{:bonus}}】已经被其他人抢走了！',
            'win_message_05': '主公～我军虽胜，但{{:name}}携【{{:bonus}}】跑路了～',
            'win_message_06': '主公～你有可能获得装备卡哦～',
            'win_message_07': '主公~你就是当代的活雷锋啊！我军击败了{{:name}}，并将【{{:bonus}}】归还给了{{:frdname}}～',
        },
    };
    w.Mojo.lang['package'] = {
        'zh_tw': {
            'add_friend': '加好友',
            'and': '並且',
            'barrack_army': '',
            'barrack_armyguide_content': '',
            'barrack_armyguide_title': '',
            'barrack_armyup_content1': '',
            'barrack_armyup_content2': '',
            'barrack_attack': '',
            'barrack_card_detail_title': '',
            'barrack_center_army': '',
            'barrack_disabled_jisi_btn': '',
            'barrack_down': '',
            'barrack_fangyu': '',
            'barrack_getJingyan': '',
            'barrack_guid': '',
            'barrack_jihuojiangli': '',
            'barrack_jihuojineng': '',
            'barrack_jingyan': '',
            'barrack_jisi': '',
            'barrack_jisiBaowu_num': '',
            'barrack_jisiOk': '',
            'barrack_jisiok_content': '',
            'barrack_jisiok_title': '',
            'barrack_kezhi': '',
            'barrack_left_army': '',
            'barrack_level': '',
            'barrack_level_max_guid': '',
            'barrack_reset': '',
            'barrack_right_army': '',
            'barrack_select_jisiCard': '',
            'barrack_unlockLevel': '',
            'barrack_up': '',
            'barrack_up_ok': '',
            'barracks_centerArmy_title': '',
            'barracks_leftArmy_title': '',
            'barracks_rightArmy_title': '',
            'bind_weibo_and_unlock_generals': 'PS:預設Facebook可獲得額外上陣將領卡槽哦～',
            'cannot_swicth_package': '',
            'entity_umount': '卸下',
            'friend_head_title': '好友的出征陣容',
            'general_detail_title': '上陣將領資訊',
            'general_umount': '更換',
            'goto_mission': '做任務',
            'has_max_slot': '想要更多卡槽？期待玩家轉生系統吧！',
            'has_mount': '',
            'inlay_not_slot': '無法上陣更多將領了！',
            'install_general': '上陣將領',
            'install_mounts': '裝備坐騎',
            'install_shield': '裝備防具',
            'install_sword': '裝備武器',
            'install_treasure': '裝備寶物',
            'mounts_detail_title': '坐騎資訊',
            'my_head_title': '我的出征陣容',
            'need_friends': '當你的好友數量達{{friends}}個時，',
            'need_install_general': '調兵遣將，從\"上陣將領"開始吧～',
            'need_install_mounts': '主公，有馬跑得更快些哦～ ',
            'need_install_shield': '主公，你的將領還在裸奔哦～ ',
            'need_install_sword': '主公，給你的將領配上一把武器吧～ ',
            'need_install_treasure': '小白和高手的判定依據就是有無寶物～ ',
            'need_level': '當你的等級提升到{{level}}級時，',
            'null_skills': '該將領沒有技能',
            'package_num1': '',
            'package_num2': '',
            'package_num3': '',
            'package_num4': '',
            'package_num5': '',
            'package_num6': '',
            'package_num7': '',
            'package_num8': '',
            'package_switch': '',
            'package_switch1': '',
            'package_using': '',
            'page_loading': '請稍等...',
            'poptip_choose_general': '請選擇你要上陣的將領～',
            'poptip_choose_mounts': '請選擇你要裝備的坐騎～',
            'poptip_choose_shield': '請選擇你要裝備的防具～',
            'poptip_choose_sword': '請選擇你要裝備的武器～',
            'poptip_choose_treasure': '請選擇你要裝備的寶物～',
            'shield_detail_title': '防具資料',
            'skill': '技能',
            'slot_unlock_award': '恭喜主公開啟新的將領卡槽~<br>現在可以免費扭蛋一次哦~',
            'start_niudan': '開始扭蛋',
            'sword_detail_title': '武器資訊',
            'title_info': '',
            'treasure_detail_title': '寶物資訊',
            'unlock_egg': '開啟新將領卡槽，能免費扭一次【三星全國將領扭蛋】！',
            'unlock_next': '將解鎖下一個上陣將領卡槽！',
        },
        'zh_cn': {
            'add_friend': '加好友',
            'and': '并且',
            'barrack_army': '压阵军营',
            'barrack_armyguide_content': '<div>1.可通过祭祀4星及以上的将领、武器、防具、坐骑、宝物卡牌来获得升级压阵军营的经验，经验达到升级要求即可自动提升压阵军营等级。</div><div>2.宝物卡每天最多祭祀3张，每日0点刷新。</div><div>3.当祭祀多张卡牌时，如卡牌间能激活卡牌技能，则可获得额外的经验奖励，奖励经验按激活技能的加成计算。</div><div>4.压阵阵营中的武将不会受到对面克制技能的影响。</div>',
            'barrack_armyguide_title': '军营说明',
            'barrack_armyup_content1': '恭喜主公~压阵军营成功升级到：',
            'barrack_armyup_content2': '开启了新卡槽位～',
            'barrack_attack': '<span class="label">提供攻击力：</span><span class="attack">{{:min}} - {{:max}}</span>',
            'barrack_card_detail_title': '祭祀卡牌信息',
            'barrack_center_army': '中军',
            'barrack_disabled_jisi_btn': '请点击祭祀卡槽选择想要祭祀的卡牌~',
            'barrack_down': '移除',
            'barrack_fangyu': '<span class="label">提供防御力：</span><span class="attack">{{:min}} - {{:max}}</span>',
            'barrack_getJingyan': '可获总经验：EXP ',
            'barrack_guid': '说明',
            'barrack_jihuojiangli': '激活奖励经验',
            'barrack_jihuojineng': '激活技能数',
            'barrack_jingyan': '经验：',
            'barrack_jisi': '祭祀',
            'barrack_jisiBaowu_num': '今日可祭祀宝物数：',
            'barrack_jisiOk': '祭祀成功：EXP ',
            'barrack_jisiok_content': '<div>主公~您这次的祭祀清单如下：</div><div>祭祀卡牌：<span class="red">{{:jisiCard}}</span></div><div>可获得总经验：EXP {{:exp}}</div><div>确定祭祀吗？</div>',
            'barrack_jisiok_title': '祭祀确认',
            'barrack_kezhi': '<span class="label">提供克制技能数：</span><span class="attack">{{:value}}</span>',
            'barrack_left_army': '左军',
            'barrack_level': '压阵军营 LV{{:level}}',
            'barrack_level_max_guid': '主公~您的压阵军营等级已经是最高啦~',
            'barrack_reset': '重置',
            'barrack_right_army': '右军',
            'barrack_select_jisiCard': '请选择祭祀卡',
            'barrack_unlockLevel': '该卡槽位需压阵军营升至{{:level}}级才能解锁~',
            'barrack_up': '升级',
            'barrack_up_ok': '升级成功',
            'barracks_centerArmy_title': '<div class="t">中军：</div><div class="c">中军的压阵将领，其转生获得的克制技能会计入压阵军营中。</div>',
            'barracks_leftArmy_title': '<div class=\"t\">左军：</div><div class=\"c\">左军的压阵将领，其攻击力（不受技能影响）会计入压阵将军营中。</div>',
            'barracks_rightArmy_title': '<div class="t">右军：</div><div class="c">右军的压阵将领，其防御力（不受技能影响）会计入压阵军营中。</div>',
            'bind_weibo_and_unlock_generals': 'PS:绑定新浪微博得额外上阵将领卡槽哦～',
            'cannot_swicth_package': '主公~升到105级就能切换阵容哦~',
            'entity_umount': '卸下',
            'friend_head_title': '好友的出征阵容',
            'general_detail_title': '上阵将领信息',
            'general_umount': '更换',
            'goto_mission': '做任务',
            'has_max_slot': '想要更多卡槽？期待玩家转生系统吧！',
            'has_mount': '主公，这个阵容已经上阵了哦~',
            'inlay_not_slot': '无法上阵更多将领了！',
            'install_general': '上阵将领',
            'install_mounts': '装备坐骑',
            'install_shield': '装备防具',
            'install_sword': '装备武器',
            'install_treasure': '装备宝物',
            'mounts_detail_title': '坐骑信息',
            'my_head_title': '我的出征阵容',
            'need_friends': '当你的好友数量达{{friends}}个时，',
            'need_install_general': '调兵遣将，从\"上阵将领\"开始吧～',
            'need_install_mounts': '主公，有马跑得更快些哦～ ',
            'need_install_shield': '主公，你的将领还在裸奔哦～ ',
            'need_install_sword': '主公，给你的将领配上一把武器吧～ ',
            'need_install_treasure': '小白和高手的判定依据就是有无宝物～ ',
            'need_level': '当你的等级提升到{{level}}级时，',
            'null_skills': '该将领没有技能',
            'package_num1': '第一阵容',
            'package_num2': '第二阵容',
            'package_num3': '第三阵容',
            'package_num4': '第四阵容',
            'package_num5': '第五阵容',
            'package_num6': '第六阵容',
            'package_num7': '第七阵容',
            'package_num8': '第八阵容',
            'package_switch': '切换阵容',
            'package_switch1': '阵容切换',
            'package_using': '主公~您当前使用的是【{{:packageName}}】',
            'page_loading': '请稍等...',
            'poptip_choose_general': '请选择你要上阵的将领～',
            'poptip_choose_mounts': '请选择你要装备的坐骑～',
            'poptip_choose_shield': '请选择你要装备的防具～',
            'poptip_choose_sword': '请选择你要装备的武器～',
            'poptip_choose_treasure': '请选择你要装备的宝物～',
            'shield_detail_title': '防具信息',
            'skill': '技能',
            'slot_unlock_award': '恭喜主公开启新的将领卡槽~<br>现在可以免费执行一次寻将任务哦~',
            'start_niudan': '免费执行',
            'sword_detail_title': '武器信息',
            'title_info': '称号效果',
            'treasure_detail_title': '宝物信息',
            'unlock_egg': '开启新将领卡槽，能免费执行一次【三星寻将任务】！',
            'unlock_next': '将解锁下一个上阵将领卡槽！',
        },
    };
    w.Mojo.lang['friend'] = {
        'zh_tw': {
            'add_friend': '加好友',
            'add_friend_need_leveup': '主公，升级後才能添加更多好友！',
            'condition': '',
            'confirm_delete_friend': '',
            'contact': '交流',
            'default_text': '請輸入給他（她）的話',
            'delete_friend': '',
            'delete_friend_title': '',
            'deleted': '',
            'do_with_friend': '要和你的好友{{:name}}做些什麼呢？',
            'find_friend_in_chat_page': '',
            'formation': '好友陣容',
            'friend': '好友',
            'friend not found': '',
            'friend_detail': '好友交流',
            'friend_numbers': '好友數量：',
            'go_to_chat': '',
            'has invited': '已飛鴿傳書，請等待回復！',
            'has sended': '已飛鴿傳書！',
            'invite': '邀請',
            'invite_force': '',
            'invite_friend': '好友邀請',
            'leave_message_to': '留言給{{:name}}：',
            'message': '留言',
            'more_friend': '更多好友',
            'more_player': '更多玩家',
            'no content': '無字天書別人是看不懂的！',
            'no friends': '主公～我們現在還沒有盟友，速速加上幾位好友吧～人多好辦事啊！',
            'not found': '這個世界查無此人～',
            'not_tip': '',
            'order': '',
            'order_friend': '',
            'order_type': '',
            'pk': '切磋',
            'please choose your favorite': '請選擇你心儀的玩家～',
            'refresh': '刷新玩家',
            'say something': '來說點什麼吧',
            'search': '搜',
            'send': '發送',
            'view': '查看陣容',
            'view_force': '',
        },
        'zh_cn': {
            'add_friend': '加好友',
            'add_friend_need_leveup': '主公，升级后才能添加更多好友！',
            'condition': '排序条件',
            'confirm_delete_friend': '主公，确定要与<span>{{:name}}</span>割袍断义吗？',
            'contact': '交流',
            'default_text': '请输入给Ta的话',
            'delete_friend': '删除好友',
            'delete_friend_title': '割袍断义',
            'deleted': '已删除',
            'do_with_friend': '要和你的好友<span>{{:name}}</span>做些什么呢？',
            'find_friend_in_chat_page': '主公，在世界频道大吼，可以更容易地找到志同道合的好友哦~',
            'formation': '好友阵容',
            'friend': '好友',
            'friend not found': '好友{{:name}}不存在～',
            'friend_detail': '好友交流',
            'friend_numbers': '好友数量：',
            'go_to_chat': '去聊天',
            'has invited': '已飞鸽传书，请等待回复！',
            'has sended': '已飞鸽传书！',
            'invite': '邀请',
            'invite_force': '邀请势力',
            'invite_friend': '好友邀请',
            'leave_message_to': '留言给{{:name}}：',
            'message': '留言',
            'more_friend': '更多好友',
            'more_player': '更多玩家',
            'no content': '无字天书别人是看不懂的！',
            'no friends': '主公～我们现在还没有盟友，速速去加上几个好友吧～人多好办事儿！',
            'not found': '这个世界查无此人～',
            'not_tip': '不再提示',
            'order': '排序',
            'order_friend': '排序',
            'order_type': '排序条件',
            'pk': '切磋',
            'please choose your favorite': '请选择你心仪的玩家～',
            'refresh': '刷新玩家',
            'say something': '还是好歹说点啥吧',
            'search': '搜',
            'send': '发送',
            'view': '查看阵容',
            'view_force': '查看势力',
        },
    };
    w.Mojo.lang['force'] = {
        'zh_tw': {
            'Off': '',
            'On': '',
            'accept_refresh': '',
            'add_challenge_tip': '',
            'adjust': '',
            'adjust_official': '調整官職',
            'adjust_tax_rate': '',
            'adjust_time_input_err': '',
            'adjust_time_input_update': '',
            'adjust_times': '',
            'adjust_times_auth': '',
            'adjust_times_tips1': '',
            'adjust_times_tips2': '',
            'adjust_times_title': '',
            'after_leave': '',
            'alert_cooling_time_battle': '',
            'alert_cooling_time_defence': '',
            'alert_cooling_time_if_leave': '',
            'all_chanllenge_get': '&#149全部挑戰書獲得：',
            'alliance': '',
            'alliance_description': '',
            'allied': '',
            'ally': '',
            'ally_apply_expire': '',
            'ally_cancel': '',
            'ally_friend': '',
            'ally_info': '',
            'ally_succ': '',
            'ally_success': '',
            'already_ally': '',
            'already_join_tip': '“主公~您已經被批准加入勢力【{{:name}}】，點擊【確定】即可前往該勢力哦~',
            'appellate_resign_apply': '',
            'applicant_cd_time_not_enough': '未能加入勢力',
            'armygrain': '',
            'assign_title': '',
            'assignbuff': '',
            'assistAlliance_defenceer_win_momentum': '',
            'assistAlliance_lose_content': '',
            'assistAlliance_win_content': '',
            'assistSlave_defenceer_win_momentum': '',
            'assistSlave_lose_content': '',
            'assistSlave_win_content': '',
            'assist_lose': '',
            'assist_win': '',
            'auto_sell_log': '',
            'base_info': '基礎資料',
            'battle': '',
            'battle_fail': '',
            'battle_fail_forcerest': '',
            'battle_food': '',
            'be_boycott': '',
            'be_capitulate': '',
            'be_rebel': '',
            'be_revolted': '',
            'be_seized': '',
            'be_uniterebel': '',
            'be_usurp': '',
            'boycott': '',
            'boycott_cancel': '',
            'boycott_lose': '',
            'boycott_succ': '',
            'break_alliance': '',
            'broadcastNotice': '',
            'broadcastNoticeSucess': '',
            'broadcastNoticetip': '',
            'by_position': '',
            'call_toge_member': '',
            'can_as_title_count': '',
            'can_not_ally': '',
            'can_not_boycott': '',
            'can_not_submission': '',
            'cancel_ally': '',
            'cannot_abandon_your_brother': '主公～身為勢力主，您不能拋下兄弟們不管哦～',
            'cannot_adjust_more_official': '主公~不能任命更多{{:official}}啦~',
            'cannot_adjust_owner': '主公~對方等級不足50級，還無法擔任勢力主哦~',
            'cannot_allocatetitle': '',
            'cannot_change': '',
            'cannot_defence': '',
            'cannot_defence_coldtime': '',
            'cannot_do_it': '主公～您已不在勢力中，無法進行該操作哦～',
            'cannot_refrsh_internal': '',
            'capitulate': '',
            'capitulate_beforeend': '',
            'capitulate_declaration': '',
            'capitulate_description': '',
            'capitulate_subhead': '',
            'capitulate_succ': '',
            'capture': '',
            'capture_again': '再次進攻',
            'capture_default_message': '',
            'capture_lodgment': '佔領據點【{{:name}}】',
            'capture_lose': '佔領失敗',
            'capture_win': '佔領成功',
            'chairman': '勢力主：',
            'challenge_cost': '',
            'chat': '聊天',
            'city': '',
            'city_attack_btn_limit': '',
            'city_attack_btn_limit2': '',
            'city_buff': '',
            'city_exchange': '',
            'city_get_grain': '',
            'city_get_grain_result': '',
            'city_get_grain_zero': '',
            'city_grain': '',
            'city_grain2': '',
            'city_heart': '',
            'city_heart2': '',
            'city_heart3': '',
            'city_introduce': '',
            'city_my_protect_time': '',
            'city_my_siege_time': '',
            'city_name': '',
            'city_name_and_level': '',
            'city_name_and_level2': '',
            'city_placate': '',
            'city_placate_dlg_content': '',
            'city_placate_dlg_title': '',
            'city_placate_fail_title': '',
            'city_placate_no_right': '',
            'city_placate_result': '',
            'city_placate_special_tip': '',
            'city_protect_cd': '',
            'city_rank': '',
            'city_siege_record': '',
            'collect_tax': '',
            'con_capitulate': '',
            'con_capitulated': '',
            'contact': '交流',
            'continue_exchange': '繼續兌換',
            'cost_find_token': '',
            'cost_grain': '花費糧餉：',
            'cost_rm': '',
            'count_challenge': '挑戰書：',
            'count_member': '成員數：',
            'count_officer_1': '一品官數量：',
            'count_officer_2': '二品官數量：',
            'count_officer_3': '三品官數量：',
            'count_officer_4': '',
            'count_officer_5': '',
            'count_officer_6': '',
            'count_officer_7': '',
            'count_officer_name_1': '',
            'count_officer_name_2': '',
            'count_officer_name_3': '',
            'count_officer_name_4': '',
            'count_officer_name_5': '',
            'count_officer_name_6': '',
            'count_officer_name_7': '',
            'counterattack': '',
            'crazywar_attack_retreat_answer': '',
            'crazywar_defence_retreat_answer': '',
            'crazywar_retreat_question': '',
            'create_force': '創建勢力',
            'create_free': '免費創建',
            'create_pay': '付費創建',
            'create_succ': '創建成功',
            'create_succ_tip': '恭喜您成功創建勢力【{{:name}}】~',
            'create_succ_weibo': '我在#三國來了#創建了勢力【{{:name}}】！你還是一個人在戰鬥嗎？快來加入我們吧！',
            'create_tip': '為您的勢力取一個威震八方的名字吧',
            'create_use_rebirth': '捐獻68顆轉生丹即可免費創建勢力~',
            'current_chanllenge_get': '',
            'current_level': '{{:level}}級',
            'dang_memberCount': '',
            'default_chat_message': '點擊進入勢力聊天',
            'defence_lose': '',
            'defence_succ': '',
            'defense_lose': '',
            'defense_resign': '',
            'defense_succ': '',
            'deleted': '',
            'deny_apply': '',
            'deny_boycott': '',
            'deny_capitulate': '',
            'deny_capture': '',
            'deny_resign_apply': '',
            'depose': '',
            'diplomacy': '',
            'diplomacy_description': '',
            'diplomacy_tip': '',
            'do_with_member': '要和{{:honor}}{{:name}}做些什麼呢？',
            'edit_force_fobbiden': '主公~二品以上官員才能編輯公告哦~',
            'electioneer_officer': '',
            'electioneer_officer_lose': '',
            'electioneer_officer_succ': '',
            'empty': '沒有勢力',
            'empty_notice_default_text': '點選編輯勢力公告',
            'enemy force': '',
            'event': '事件',
            'exchange': '兌換',
            'exchange_again': '繼續兌換',
            'exchange_failed_content': '主公，您的糧餉不夠啦！勢力主可以把勢力糧餉分發給成員哦~',
            'exchange_failed_title': '兌換失敗',
            'exchange_special': '',
            'exchange_successful_content': '主公~您兌換的東東已經送達，可以<br/>從【首頁-圖鑒-活動】中收取哦~',
            'exchange_successful_content2': '',
            'exchange_successful_title': '兌換成功',
            'exchange_warning_content': '主公~您要兌換此東東嗎？',
            'exchange_warning_title': '兌換確認',
            'expiretime_coming': '',
            'expiretime_coming_message': '',
            'explanation_content': '',
            'fail_to_do': '操作失敗',
            'fight': '',
            'food_description': '',
            'force': '勢力',
            'force_alliance': '',
            'force_alliance_content': '',
            'force_appling': '主公～您已經申請該勢力～',
            'force_apply': '勢力申請',
            'force_apply_fail': '申請失敗',
            'force_assistant_alert1': '',
            'force_assistant_alert2': '',
            'force_assistant_alert3': '',
            'force_assistant_auto_end': '',
            'force_assistant_auto_end2': '',
            'force_assistant_auto_end3': '',
            'force_assistant_auto_end_alert': '',
            'force_assistant_auto_start': '',
            'force_assistant_buyCard': '',
            'force_assistant_content1': '',
            'force_assistant_content2': '',
            'force_assistant_content3': '',
            'force_assistant_content4': '',
            'force_assistant_end': '',
            'force_assistant_log1': '',
            'force_assistant_log2': '',
            'force_assistant_prompt_title': '',
            'force_assistant_start': '',
            'force_assistant_title': '',
            'force_assistant_title1': '',
            'force_assistant_title2': '',
            'force_assistant_title3': '',
            'force_autosellcard': '',
            'force_battle_detail': '',
            'force_battle_detail_attack_count': '',
            'force_battle_detail_attack_lose': '',
            'force_battle_detail_attacker': '',
            'force_battle_detail_lodgment': '',
            'force_become_slave': '',
            'force_become_slave_seize_lose': '',
            'force_boss_challenge': '',
            'force_boss_challenge_attack_default_msg': '',
            'force_boss_challenge_attack_preview_cost': '',
            'force_boss_challenge_attack_preview_header': '',
            'force_boss_challenge_attack_preview_lose': '',
            'force_boss_challenge_attack_preview_not': '',
            'force_boss_challenge_attack_preview_speedup': '',
            'force_boss_challenge_attack_preview_win': '',
            'force_boss_challenge_attack_reattack': '',
            'force_boss_challenge_attack_rm': '',
            'force_boss_challenge_cd': '',
            'force_boss_challenge_cd_content': '',
            'force_boss_challenge_detail': '',
            'force_boss_challenge_detail_content': '',
            'force_boss_challenge_detail_dlg': '',
            'force_boss_challenge_exchange_answer': '',
            'force_boss_challenge_exchange_fail': '',
            'force_boss_challenge_exchange_reason': '',
            'force_boss_challenge_final_des1': '',
            'force_boss_challenge_final_des1_superbonus': '',
            'force_boss_challenge_final_des2': '',
            'force_boss_challenge_final_des2_superbonus': '',
            'force_boss_challenge_final_des3': '',
            'force_boss_challenge_final_des4': '',
            'force_boss_challenge_final_des5': '',
            'force_boss_challenge_final_des6': '',
            'force_boss_challenge_final_des6_superbonus': '',
            'force_boss_challenge_final_des7': '',
            'force_boss_challenge_final_des7_superbonus': '',
            'force_boss_challenge_final_des8': '',
            'force_boss_challenge_final_goexchange': '',
            'force_boss_challenge_final_goexchange2': '',
            'force_boss_challenge_final_goviewcity': '',
            'force_boss_challenge_final_lose': '',
            'force_boss_challenge_final_win': '',
            'force_boss_challenge_final_win2': '',
            'force_boss_challenge_final_win_grain': '',
            'force_boss_challenge_freetimes': '',
            'force_boss_challenge_help_content': '',
            'force_boss_challenge_help_title': '',
            'force_boss_challenge_hint_text': '',
            'force_boss_challenge_lack_rm': '',
            'force_boss_challenge_lack_title': '',
            'force_boss_challenge_lack_vm': '',
            'force_boss_challenge_limit': '',
            'force_boss_challenge_limit2': '',
            'force_boss_challenge_msg_content': '',
            'force_boss_challenge_msg_content2': '',
            'force_boss_challenge_no_right': '',
            'force_boss_challenge_no_right2': '',
            'force_boss_challenge_notice': '',
            'force_boss_challenge_notice2': '',
            'force_boss_challenge_preview_choose_niudan': '',
            'force_boss_challenge_preview_cost': '',
            'force_boss_challenge_preview_header': '',
            'force_boss_challenge_preview_niudan1': '',
            'force_boss_challenge_preview_niudan2': '',
            'force_boss_challenge_preview_niudan3': '',
            'force_boss_challenge_preview_niudan4': '',
            'force_boss_challenge_preview_niudan5': '',
            'force_boss_challenge_preview_niudan6': '',
            'force_boss_challenge_preview_niudan7': '',
            'force_boss_challenge_profile': '',
            'force_boss_challenge_reward': '',
            'force_boss_challenge_reward_des': '',
            'force_boss_challenge_reward_des2': '',
            'force_boss_challenge_reward_get': '',
            'force_boss_challenge_reward_get2': '',
            'force_boss_challenge_reward_killboss': '',
            'force_boss_challenge_speed_fail_title': '',
            'force_boss_challenge_start': '',
            'force_boss_challenge_start2': '',
            'force_boss_challenge_start3': '',
            'force_boss_challenge_start4': '',
            'force_boss_challenge_start5': '',
            'force_boss_challenge_tip_content': '',
            'force_boss_flee_time': '',
            'force_boss_left': '',
            'force_boss_name_level': '',
            'force_boss_name_level2': '',
            'force_capitulate_fail': '',
            'force_capture_content': '',
            'force_challenge_model_alert': '',
            'force_challenge_model_attack': '',
            'force_challenge_model_bossinfo_defence': '',
            'force_challenge_model_bossinfo_life': '',
            'force_challenge_model_bossinfo_name': '',
            'force_challenge_model_bossinfo_skill': '',
            'force_challenge_model_bossinfo_title': '',
            'force_challenge_model_deadGod': '',
            'force_challenge_model_duration': '',
            'force_challenge_model_easy': '',
            'force_challenge_model_hard': '',
            'force_challenge_model_huangjin': '',
            'force_challenge_model_normal': '',
            'force_challenge_model_skill_easy': '',
            'force_challenge_model_skill_hard': '',
            'force_challenge_model_skill_normal': '',
            'force_challenge_model_title': '',
            'force_city_all_citys': '',
            'force_city_attack_cd_notice': '',
            'force_city_attack_header_notice1': '',
            'force_city_attack_header_notice2': '',
            'force_city_grain_fetch': '',
            'force_city_search_hint': '',
            'force_city_search_noresult': '',
            'force_city_war_exchange_answer': '',
            'force_city_war_result_content1': '',
            'force_city_war_result_content2': '',
            'force_city_war_result_content3': '',
            'force_city_war_result_title1': '',
            'force_city_war_result_title2': '',
            'force_contribute_not_enough': '',
            'force_create_failed': '勢力創建失敗',
            'force_create_ok': '主公~您還未加入勢力，趕快創建或加入一個吧！',
            'force_disband': '',
            'force_dismiss': '',
            'force_empty': '主公～沒有找到相關的勢力哦～',
            'force_entry_without_permission': '',
            'force_entry_without_permission2': '',
            'force_entry_without_permission_btn': '',
            'force_entry_without_permission_lebel': '',
            'force_entry_without_permission_owner_perform': '',
            'force_entry_without_permission_title1': '',
            'force_entry_without_permission_title2': '',
            'force_event_alliance_notice': '',
            'force_exchange_unavailable': '主公~現在還不能兌換該物品哦~',
            'force_exchange_unavailable_forceboss': '',
            'force_forcewar_content': '',
            'force_free': '',
            'force_grain': '勢力糧餉：',
            'force_id': '',
            'force_invite': '邀请加入势力',
            'force_join_no': '主公~您還未加入勢力，升到{{:level}}級就能加入勢力哦~',
            'force_join_ok': '主公～您還未加入勢力，趕快加入一個吧！升到{{:level}}級就能創建勢力哦～',
            'force_level': '勢力等級：',
            'force_level_is_not_enough': '主公~勢力的級別不足哦~',
            'force_level_not_enough': '',
            'force_level_not_enough_msg': '',
            'force_level_too_low': '主公~勢力的級別不足哦~',
            'force_list_limit': '主公~只能查看前100名的勢力哦~',
            'force_list_more': '',
            'force_master': '',
            'force_message': '勢力消息',
            'force_name': '',
            'force_name_empty': '請輸入勢力名字',
            'force_name_empty1': '請輸入勢力名字',
            'force_name_max': '最多5個字',
            'force_num': '/人（共{{:count}}人）',
            'force_owner': '勢力主：',
            'force_protected': '',
            'force_protected_tips': '',
            'force_ranking_empty': '',
            'force_search_noresult': '主公～沒有找到相關的勢力哦～',
            'force_siege_content': '',
            'force_slave': '',
            'force_usurp_content': '',
            'force_vice_owner': '副勢力主：',
            'force_view': '',
            'force_war': '勢力戰',
            'force_war_tip': '挑戰等級高、存糧多的勢力能搶到更多糧餉哦~',
            'force_war_tip2': '',
            'force_war_tip3': '',
            'forcebroadcastNotice': '',
            'forcebuff': '',
            'forcewar': '',
            'forcewar_action': '挑戰',
            'forcewar_alliancemember': '',
            'forcewar_battle': '戰鬥',
            'forcewar_battle_action': '攻佔',
            'forcewar_battle_notice': '正在攻擊【{{:opponent-force}}】({{:battle-schedule}}) - {{:battle-time}}',
            'forcewar_battle_preview': '戰鬥結果預覽',
            'forcewar_battle_start': '發起勢力戰',
            'forcewar_change': '更換',
            'forcewar_communion': '',
            'forcewar_defence_notice': '請勢力主派遣強力的成員防守勢力據點',
            'forcewar_defense': '防務',
            'forcewar_disband_content': '我方勢力聲勢浩大，讓某不知名勢力輸到脫褲，<br/>奪得勢力糧餉：',
            'forcewar_element_assistforce': '',
            'forcewar_element_captured': '攻佔：',
            'forcewar_element_defence': '防禦：',
            'forcewar_element_expiretime': '',
            'forcewar_element_force': '勢力：',
            'forcewar_element_general': '守將：',
            'forcewar_element_group': '勢力：',
            'forcewar_element_hascaptured': '已攻佔',
            'forcewar_element_position': '據點{{:index}}',
            'forcewar_enemy': '',
            'forcewar_enemy_grain': '',
            'forcewar_enemy_level': '',
            'forcewar_enemy_mem': '',
            'forcewar_enemy_notice': '',
            'forcewar_enemy_owner': '',
            'forcewar_grain_action': '',
            'forcewar_grain_preview': '',
            'forcewar_hasborrowmember': '',
            'forcewar_help': '',
            'forcewar_help_content': '號召勢力成員參加勢力戰吧！',
            'forcewar_help_title': '號召參加勢力戰',
            'forcewar_lose': '挑戰失敗',
            'forcewar_lose_content': '我方勢力挑戰【{{:forcename}}】時敗北而歸，未奪得任何戰利品～',
            'forcewar_lose_grain': '【{{:forcename}}】率眾偷襲我方勢力，奪走了{{:grain}}糧餉',
            'forcewar_march_header': '',
            'forcewar_no_battle': '勢力擁有挑戰書:{{:challenge}}/{{:challenge_limit}}',
            'forcewar_notice_members': '{{:ownername}}向【{{:forcename}}】發起挑戰，號召你加入戰鬥！{{:content}}',
            'forcewar_notice_members1': '[<span>{{:title}}</span>]{{:ownername}}向【{{:forcename}}】發起挑戰，號召你加入戰鬥！',
            'forcewar_only_owner_change_defender': '主公~只有勢力主才能更換據點守將哦~',
            'forcewar_only_owner_start': '只有勢力主和副勢力主能發起勢力戰',
            'forcewar_preview': '挑戰結果預覽',
            'forcewar_preview_city_in_battle_tip': '',
            'forcewar_retreat': '退兵',
            'forcewar_retreat_content': '我方勢力從【{{:forcename}}】退兵，未奪得任何戰利品~',
            'forcewar_retreat_question': '退兵將視為戰敗處理，您確定要退兵嗎？',
            'forcewar_retreat_tip': '',
            'forcewar_start_content': '發起：勢力主或副勢力主發起，消耗挑戰書<br/><br/>參戰：全體成員可參戰，攻佔據點可得貢獻<br/><br/>勝利：限時攻佔敵對勢力一半以上的據點<br/><br/>失敗：倒計時結束前未獲勝利或選擇退兵<br/><br/>獎懲：獲勝可奪得糧餉，戰敗無損失',
            'forcewar_start_title': '規則說明：',
            'forcewar_tip_content': '主公～已向【{{:opponent_force}}】發起勢力戰，一定要在10分鐘內取得勝利哦～是否號召勢力成員前來參戰？',
            'forcewar_tip_title': '提示',
            'forcewar_win': '挑戰勝利',
            'forcewar_win_commend': '特此表彰以下成員：<br/>',
            'forcewar_win_content': '我方勢力輕鬆擊敗【{{:forcename}}】，<br/>奪得勢力糧餉：',
            'forcewar_win_grain': '我方勢力輕鬆擊敗【{{:forcename}}】，奪得{{:grain}}糧餉',
            'foreign': '外務',
            'formation detail': '',
            'free_only_owner_can_ask_alliance': '',
            'free_only_owner_can_ask_diplomacy': '',
            'free_only_ownerorvice_can_ask_surrender': '',
            'free_only_ownerorvice_can_start_battle': '',
            'from': '',
            'g_back_changeBtn': '',
            'g_benqigongxian': '',
            'g_changedItem': '',
            'g_condition_txt': '',
            'g_faliang_detail_confirm': '',
            'g_faliang_detail_confirm2': '',
            'g_faliang_detail_count': '',
            'g_faliang_detail_t': '',
            'g_faliang_sender': '',
            'g_faliang_t': '',
            'g_filtertype1': '',
            'g_filtertype10': '',
            'g_filtertype11': '',
            'g_filtertype33': '',
            'g_filtertype4': '',
            'g_filtertype5': '',
            'g_filtertype55': '',
            'g_filtertype9': '',
            'g_gongxianyuanbao': '',
            'g_level_bodys': '',
            'g_level_bodys2': '',
            'g_level_bodys3': '',
            'g_level_grain': '',
            'g_moreLabel': '',
            'g_order1': '',
            'g_order2': '',
            'g_remainderGrain': '',
            'g_remainderGrain2': '',
            'g_selectMember': '',
            'g_selectedTxt': '',
            'g_sendgrain_ok': '',
            'g_setNumber': '',
            'g_xLevel': '',
            'g_xNum': '',
            'gained': '獲得貢獻：',
            'get_officer': '',
            'get_out_of_force': '退出勢力',
            'get_out_of_force_content': '退出勢力後，您對勢力的貢獻將被清空，但可保留私有糧餉。您確定要退出勢力嗎？',
            'get_title': '',
            'go': '前往',
            'go_forcewar': '',
            'go_internal': '',
            'goaway': '',
            'grain': '糧餉：',
            'grain_contribute': '',
            'grain_cost': '',
            'grain_donate': '',
            'grain_input_err': '主公~您未輸入分配數量哦~',
            'grain_not_enouph': '主公~勢力的糧餉不夠啦，通過【內政】和【外務】可以籌備更多糧餉哦~',
            'grain_not_input': '主公~您未輸入分配數量哦~',
            'grain_share_cd': '（發放糧餉后需要冷卻3天哦~）',
            'grain_share_cdtip': '發糧冷卻：',
            'grain_share_confirm': '主公~您確定按如下分配發放糧餉嗎？',
            'grain_share_fail': '主公~勢力糧餉不足啦~',
            'grain_succ': '成功發放糧餉',
            'graun_share_cd_no': '主公~現在還不能發放糧餉哦~',
            'has_captured': '主公～我方勢力已攻下該據點',
            'has_in_force': '主公~他已經找到了歸屬~',
            'have_armygrain': '',
            'have_grain': '現有糧餉：',
            'help revenge': '',
            'help_defense_member_change': '',
            'help_defense_time_finish': '',
            'hour': '',
            'how_to_adjust_official': '如何調整{{:honor}}{{:name}}的官職？',
            'id': '',
            'in_force_protected': '',
            'in_force_rest': '',
            'in_war': '參戰',
            'info': '勢力資料',
            'info_board': '公告',
            'info_level': '級別',
            'info_member': '普通成員',
            'info_member1': '成員數',
            'info_owner': '勢力主',
            'info_vice_owner': '副勢力主',
            'input_message_call_toge': '',
            'internal': '內政',
            'invite_member': '',
            'is_submission': '',
            'its_alliance': '',
            'its_master': '',
            'its_slave': '',
            'join_already': '主公～您已經申請該勢力～',
            'join_apply': '申請加入',
            'join_apply_force': '申請加入勢力',
            'join_event_privilege': '已有官員才能處理勢力申請哦',
            'join_force': '加入勢力',
            'join_slogen': '請發表入夥宣言！',
            'lake_grain': '糧餉不足',
            'last_grain': '剩餘糧餉',
            'leve_updated': '恭喜主公，勢力升到{{:level}}級',
            'level': '級別：',
            'level1': '',
            'level2': '',
            'level3': '',
            'level4': '',
            'level5': '',
            'level_full': '已滿級',
            'level_full_tip': '勢力已滿級',
            'levelinfo': '級別{{:level}}',
            'login': '登入：',
            'login2': '',
            'lose_lodgment_defender': '我軍不敵{{:defendername}}，沒能攻佔據點【{{:lodgment}}】～',
            'lose_officer': '',
            'lose_title': '',
            'march_content_rebel_attack': '',
            'march_content_rebel_defence': '',
            'march_content_uniterebel_attack': '',
            'march_content_uniterebel_defence': '',
            'march_content_usurp_attack': '',
            'march_content_usurp_defence': '',
            'march_expiretime_rebel_attack': '',
            'march_expiretime_rebel_defence': '',
            'march_expiretime_uniterebel_attack': '',
            'march_expiretime_uniterebel_defence': '',
            'march_expiretime_usurp_attack': '',
            'march_expiretime_usurp_defence': '',
            'master_slave_num': '',
            'member': '成員',
            'member_contact': '成員交流',
            'member_count': '成員數量：',
            'member_count1': '成員數：{{:now}}/{{:max}}',
            'member_count_txt': '成員：',
            'member_empty': '暫無成員！',
            'member_full': '主公~該勢力已經滿人~',
            'member_max': '成員數上限：',
            'member_more': '更多成員',
            'more': '更多',
            'more_force': '刷新勢力',
            'name': '勢力名：',
            'need_rm': '',
            'next_chanllenge_get': '&#149下一封挑戰書獲得：',
            'nextday': '',
            'no enemy force': '',
            'no_allocatebuff': '',
            'no_more_member': '',
            'no_suitable_player': '',
            'non_rmb_player_add_defense': '',
            'non_rmb_player_assist_attack': '',
            'non_rmb_player_assist_defense': '',
            'non_rmb_player_assist_result': '',
            'non_rmb_player_defense_data': '',
            'non_rmb_player_sub_defense': '',
            'none': '無',
            'not_resign_apply': '',
            'not_this_member': '',
            'notice': '勢力公告',
            'notice_default_text1': '',
            'notice_default_text2': '',
            'notice_default_title1': '',
            'notice_default_title2': '',
            'notice_edit_btn': '修改',
            'notice_title': '【公告】',
            'offer': '貢獻：',
            'offer1': '貢獻',
            'officer_first': '一品官',
            'officer_second': '二品官',
            'officer_third': '三品官',
            'official': '',
            'official1': '轉讓勢力主',
            'official100': '無官職',
            'official14': '',
            'official15': '',
            'official16': '',
            'official17': '',
            'official18': '',
            'official19': '',
            'official2': '副勢力主',
            'official3': '一品官',
            'ok_submission': '',
            'only_official_can_refresh': '一品以上官員才能刷新內政任務',
            'only_ownerandvice_broadcast': '',
            'order': '排名：{{:order}}',
            'order_condition': '',
            'order_conditions': '',
            'order_force': '',
            'other': '其它',
            'other_prefect_message': '',
            'out': '退隱',
            'out_force': '請出勢力',
            'out_force_default_message': '',
            'out_force_message': '將{{:honor}}{{:name}}請出勢力後，他對勢力的貢獻將被清空，您確定要這麼做嗎？',
            'out_force_tip': '主公~只能請出官職低於自身的成員哦~',
            'over': '',
            'owner': '勢力主：[<span class=\"official\">{{:title}}</span>]{{:name}}',
            'owner_bg': '',
            'owner_name': '',
            'owner_title': '勢力主稱號：',
            'pass_resign_apply': '',
            'personal_grain_amount': '您擁有糧餉：{{:amount}}',
            'position_count': '據點數量：',
            'position_empty': '空缺',
            'prefect_be_seized': '',
            'prefect_count': '',
            'prefect_message': '',
            'prefect_revolt': '',
            'price': '花費：',
            'prince_message': '',
            'profile_level': '級別：',
            'quanxian_yilan': '',
            'qx_1': '',
            'qx_2': '',
            'qx_3': '',
            'qx_4': '',
            'qx_5': '',
            'qx_6': '',
            'qx_7': '',
            'ranking': '排行',
            'rebel': '',
            'rebel_attack_disband': '',
            'rebel_attack_explanation': '',
            'rebel_attack_lose': '',
            'rebel_attack_lose_content': '',
            'rebel_attack_win': '',
            'rebel_attack_win_content': '',
            'rebel_attacker_win_momentum': '',
            'rebel_defence_disband': '',
            'rebel_defence_explanation': '',
            'rebel_defence_lose': '',
            'rebel_defence_lose_content': '',
            'rebel_defence_win': '',
            'rebel_defence_win_content': '',
            'rebel_defenceer_win_momentum': '',
            'rebel_fail': '',
            'rebel_fail_forcerest': '',
            'rebel_over': '',
            'rebirth_not_enouph': '主公~您的轉生丹不夠啦！您可以通過闖關獲得足夠的轉生丹哦~',
            'rebirth_not_enouph_title': '轉生丹不足',
            'rebirth_now_have': '（現有{{:num}}個轉生丹）',
            'rece_invite': '',
            'receive_capitulate': '',
            'refresh': '刷新',
            'refreshTime1': '',
            'refreshTime2': '',
            'refresh_award': '恭喜您成功幫勢力成員刷新內政任務！',
            'refresh_award1': '獲得回報：',
            'refresh_cost': '刷新花費：',
            'refresh_fail': '內政刷新失敗',
            'refresh_fail_tip': '啟秉主公，您所在的勢力成員更動異常頻繁，可能有惡意刷糧的嫌疑，導致每日自動刷新內策的機會被用光啦~您可以找勢力主一探究竟，或另尋勢力加入哦~',
            'refresh_info1': '主公～您願意給所有勢力成員施加恩惠，幫他們刷新內政任務嗎？',
            'refresh_info3': '(下次花費{{:cost}}{{:yb}}，每日{{:point}}點重置)',
            'refresh_info4': '報～主公～{{:official}}{{:name}}花重金為勢力刷新內政任務，您願意接受刷新嗎？<br>(刷新後可重新做任務，獲得更多獎勵～)',
            'refresh_info5': '',
            'refresh_info6': '',
            'refresh_info7': '',
            'refresh_info8': '',
            'refresh_internal_mission': '刷新內政任務',
            'refresh_text': '每日24點刷新內政任務',
            'relation': '',
            'relation_disband': '',
            'relation_join_no': '',
            'relation_join_no_dlg_title': '',
            'relationship': '',
            'require_force_level': '需勢力級別：',
            'resign': '',
            'response': '',
            'responsedandsummon': '',
            'revenge': '',
            'revenge result preview': '',
            'revenge_result_title_fail': '',
            'revenge_result_title_win': '',
            'revolt': '',
            'revolt_cancel': '',
            'revolt_lose': '',
            'revolt_succ': '',
            'reward': '勢力收穫',
            'rm': '元寶',
            'salary_only_owner': '主公~只有勢力主才能發放糧餉哦~',
            'search': '搜',
            'seize': '',
            'seize_evacuate': '',
            'seize_lose': '',
            'seize_succ': '',
            'seizing_phase_cancel': '',
            'select_assign_title': '',
            'send_already': '已飛鴿傳書，請等待回覆！',
            'send_apply': '發送',
            'send_definedgrain': '',
            'send_diplomacy_success': '',
            'send_diplomacy_to': '',
            'send_weibo': '分享',
            'set_resttime_sucess': '',
            'share_grain': '發放糧餉',
            'share_grain2': '',
            'show_detail': '',
            'siege': '',
            'siege_battle_notice': '',
            'siege_button_disable_msg': '',
            'siege_button_disable_msg2': '',
            'siege_button_disable_msg3': '',
            'siege_button_resiege_txt': '',
            'siege_button_txt': '',
            'siege_city_war_lose': '',
            'siege_city_war_lose_content': '',
            'siege_city_war_win': '',
            'siege_city_war_win_content': '',
            'siege_description': '',
            'siege_help_content': '',
            'siege_help_title': '',
            'siege_only_owner_start': '',
            'siege_preivew_dlg_title': '',
            'siege_preview_dlg_lose': '',
            'siege_preview_dlg_win': '',
            'siege_tip_content': '',
            'submission': '',
            'submission_succ': '',
            'submissioned': '',
            'sum_tax': '',
            'summon': '',
            'sure_exchange': '確定兌換',
            'tax_rate': '',
            'tax_rate_adjust': '',
            'time_tip_for_own_battle': '',
            'tip1': '主公~二品以上官員才能編輯公告哦~',
            'title': '',
            'to_msg': '',
            'today_offer': '',
            'turning_point_condition': '',
            'uniterebel': '',
            'uniterebel_attack_disband': '',
            'uniterebel_attack_explanation': '',
            'uniterebel_attack_lose': '',
            'uniterebel_attack_lose_content': '',
            'uniterebel_attack_win': '',
            'uniterebel_attack_win_content': '',
            'uniterebel_attacker_win_momentum': '',
            'uniterebel_defence_disband': '',
            'uniterebel_defence_explanation': '',
            'uniterebel_defence_lose': '',
            'uniterebel_defence_lose_content': '',
            'uniterebel_defence_retreat_answer': '',
            'uniterebel_defence_win': '',
            'uniterebel_defence_win_content': '',
            'uniterebel_defenceer_win_momentum': '',
            'uniterebel_fail': '',
            'uniterebel_fail_forcerest': '',
            'uniterebel_num': '',
            'uniterebel_retreat_tip': '',
            'unlock_level': '需勢力級別：{{:level}}',
            'until': '',
            'update': '升級勢力',
            'update_force': '升級勢力',
            'update_grain': '升級消耗：',
            'update_only_owner': '主公~只有勢力主才能升級勢力哦~',
            'update_succ_weibo': '我在#三國來了#把勢力【{{:name}}】升到了{{:level}}級！又向稱霸三國邁近一步，兄弟們快來投奔我吧！',
            'update_tip': '主公，您確定要提升勢力等級嗎？',
            'userDefinedBtn': '',
            'usurp': '',
            'usurp_assist_notice': '',
            'usurp_attack_disband': '',
            'usurp_attack_explanation': '',
            'usurp_attack_lose': '',
            'usurp_attack_lose_content': '',
            'usurp_attack_terminated': '',
            'usurp_attack_win': '',
            'usurp_attack_win_content': '',
            'usurp_attacker_win_momentum': '',
            'usurp_battle_tip': '',
            'usurp_def_notice': '',
            'usurp_defence_disband': '',
            'usurp_defence_explanation': '',
            'usurp_defence_lose': '',
            'usurp_defence_lose_content': '',
            'usurp_defence_terminated': '',
            'usurp_defence_win': '',
            'usurp_defence_win_content': '',
            'usurp_defenceer_win_momentum': '',
            'usurp_description': '',
            'usurp_fail': '',
            'usurp_fail_forcerest': '',
            'usurp_preview_tip': '',
            'usurp_tip': '',
            'usurp_war_help': '',
            'usurp_war_help_subhead': '',
            'usurp_war_help_title': '',
            'usurp_war_notice': '',
            'usurp_war_tip': '',
            'vice_chairman': '副勢力主：',
            'view member': '',
            'view_battle_array': '查看陣容',
            'vm': '銀幣',
            'win_lodgment_with_defender': '恭喜主公～我軍擊敗了{{:defendername}}，成功攻佔據點【{{:lodgment}}】～',
            'win_lodgment_without_defender': '恭喜主公～我軍成功攻佔據點【{{:lodgment}}】～',
        },
        'zh_cn': {
            'Off': '已关',
            'On': '已开',
            'accept_refresh': '接受刷新',
            'add_challenge_tip': '主公~使用军令可增加进攻次数哦~',
            'adjust': '调整',
            'adjust_official': '调整官职',
            'adjust_tax_rate': '调整税率',
            'adjust_time_input_err': '主公~您输入有误哦~',
            'adjust_time_input_update': '主公~请输入新的休整起始时间~',
            'adjust_times': '势力休整时间 <span>{{:time1}}</span> 至 <span>{{:time2}}</span>',
            'adjust_times_auth': '只有势力主能调整势力休整时间哦~',
            'adjust_times_tips1': '主公~请调整我方势力的每日休整时间，在休整时间内，其它势力无法对我方势力发起霸占、反叛和联合反叛哦~<br/><br/>',
            'adjust_times_tips2': '<br/>休整时间为10小时，当天调整，次日生效。以北京时间为准。',
            'adjust_times_title': '休整时间调整',
            'after_leave': '退出后：',
            'alert_cooling_time_battle': '<br>·需等待24小时才能参与势力战斗。',
            'alert_cooling_time_defence': '<br>·需等待24小时才能成为据点守将。',
            'alert_cooling_time_if_leave': '<br>·需等待{{:cooling}}才能加入新的势力。',
            'all_chanllenge_get': '&#149全部军令获得：',
            'alliance': '结盟',
            'alliance_description': '请求与其它势力结盟并一同抗敌，无需消耗粮饷或军令',
            'allied': '已结盟',
            'ally': '结盟',
            'ally_apply_expire': '结盟请求失效',
            'ally_cancel': '盟约解除',
            'ally_friend': '盟友：',
            'ally_info': '结盟信息',
            'ally_succ': '结盟成功',
            'ally_success': '主公~我方势力和【{{:name}}】成功结成同盟关系~',
            'already_ally': '已经结盟',
            'already_join_tip': '“主公~您已经被批准加入势力【{{:name}}】，点击【确定】即可前往该势力哦~',
            'appellate_resign_apply': '受理请辞申请',
            'applicant_cd_time_not_enough': '未能加入势力',
            'armygrain': '粮饷：',
            'assign_title': '分配称号',
            'assignbuff': '分配',
            'assistAlliance_defenceer_win_momentum': '<br/>此役太守我方盟友一举扭转了颓势，还是团结力量大啊～',
            'assistAlliance_lose_content': '协助盟友失利，【{{:sibling}}】沦为了【{{:opponent_force}}】的太守！',
            'assistAlliance_win_content': '通过我方势力成员的协助，【{{:sibling}}】成功击退了【{{:opponent_force}}】对TA的霸占！',
            'assistSlave_defenceer_win_momentum': '<br/>此役太守我方太守一举扭转了颓势，还是诸侯给力啊～',
            'assistSlave_lose_content': '协助太守失利，【{{:sibling}}】沦为了【{{:opponent_force}}】的太守！',
            'assistSlave_win_content': '通过我方势力成员的协助，【{{:sibling}}】成功击退了【{{:opponent_force}}】对TA的霸占！',
            'assist_lose': '协助失败',
            'assist_win': '协助成功',
            'auto_sell_log': '<div class="p"><div class="time"><span>{{:time}}</span></div><div class="fontWaitColor">出售：{{:sellCards}}</div><div class="gets fontWaitColor">获得：银币×{{:vm}}</div></div>',
            'base_info': '基础信息',
            'battle': '征讨',
            'battle_fail': '不能抢粮',
            'battle_fail_forcerest': '主公~对方势力正在休整中，还不能霸占TA哦~',
            'battle_food': '抢粮',
            'be_boycott': '被联合反叛',
            'be_capitulate': '被劝降',
            'be_rebel': '被反叛中',
            'be_revolted': '被反叛',
            'be_seized': '被霸占',
            'be_uniterebel': '被联合反叛中',
            'be_usurp': '被霸占中',
            'boycott': '联合反叛',
            'boycott_cancel': '联合反叛撤退',
            'boycott_lose': '联合反叛失败',
            'boycott_succ': '联合反叛成功',
            'break_alliance': '解除盟约',
            'broadcastNotice': '群发消息',
            'broadcastNoticeSucess': '群发消息成功！',
            'broadcastNoticetip': '请输入要群发给势力成员的内容。',
            'by_position': '按官职',
            'call_toge_member': '召集帮众',
            'can_as_title_count': '剩余数量：',
            'can_not_ally': '不能结盟',
            'can_not_boycott': '不能联合反叛',
            'can_not_submission': '不能归顺',
            'cancel_ally': '解除盟约',
            'cannot_abandon_your_brother': '主公～身为势力主，您不能抛下兄弟们不管哦～',
            'cannot_adjust_more_official': '主公～不能任命更多{{:official}}啦～',
            'cannot_adjust_owner': '主公~对方等级不足50级，还无法担任势力主哦~',
            'cannot_allocatetitle': '不能分配',
            'cannot_change': '不能更换',
            'cannot_defence': 'TA上次退出势力不满24小时，不能成为守将',
            'cannot_defence_coldtime': 'TA还需等待{{:hour}}小时{{:minutes}}分钟才能成为守将',
            'cannot_do_it': '主公～您不在势力中，无法进行该操作哦～',
            'cannot_refrsh_internal': '主公~没有可接受的刷新哦~',
            'capitulate': '劝降',
            'capitulate_beforeend': '劝降成功后我方势力将不能结盟、接受劝降。',
            'capitulate_declaration': '主公~您的劝降宣言已经成功发送到【{{:name}}】！请静候佳音哦~',
            'capitulate_description': '规劝其它势力投降并纳税，无需消耗粮饷或军令',
            'capitulate_subhead': '主公~请发表您的劝降宣言：',
            'capitulate_succ': '劝降成功',
            'capture': '劝降',
            'capture_again': '再次进攻',
            'capture_default_message': '识时务者为俊杰。',
            'capture_lodgment': '占领据点【{{:name}}】',
            'capture_lose': '占领失败',
            'capture_win': '占领成功',
            'chairman': '势力主：[<span class="highlight">{{:title}}</span>]<b>{{:name}}</b>',
            'challenge_cost': '扣除军令：',
            'chat': '聊天',
            'city': '城池',
            'city_attack_btn_limit': '可尝试次数：{{:rest}}/{{:total}}',
            'city_attack_btn_limit2': '<span class="attack-num-highlight">战斗次数：{{:rest}}/{{:total}}</span>（主公等级决定上限，最多15次）',
            'city_buff': '内政奖励(个人/势力)：{{:self_buff}}%/{{:force_buff}}%',
            'city_exchange': '开启兑换：【{{:city_exchange}}】',
            'city_get_grain': '领粮',
            'city_get_grain_result': '领取成功，获得{{:grain}}粮饷~',
            'city_get_grain_zero': '做内政会累积个人存粮哦~',
            'city_grain': '个人存粮：',
            'city_grain2': '{{:self_grain}}/{{:max_grain}}',
            'city_heart': '民心：{{:city_heart}}(防{{:city_heart_defence}}%)',
            'city_heart2': '民心：<span class="city-heart-highlight">{{:city_heart}}/{{:city_heart_max}}(防{{:city_heart_defence}}%)</span>',
            'city_heart3': '(防{{:city_heart_defence}}%)',
            'city_introduce': '•通过【外务】可抢夺三国名城，开启新的兑换！<br>•城池可提高内政产出，同时额外累积个人存粮。<br>•个人存粮不能超过存储上限，但可随时领取。',
            'city_my_protect_time': '免战保护：{{:time}}',
            'city_my_siege_time': '已占领：{{:time}}',
            'city_name': '一个小村庄',
            'city_name_and_level': '{{:name}}({{:minlevel}}~{{:maxlevel}}级)',
            'city_name_and_level2': '{{:name}}<span class="city-name-highlight">({{:minlevel}}~{{:maxlevel}}级)</span>',
            'city_placate': '安抚',
            'city_placate_dlg_content': '主公~您确定要花费{{:rm}}元宝安抚民心吗？<br>每次安抚可提升5点民心，但民心最多不超过{{:popular}}点哦~',
            'city_placate_dlg_title': '安抚民心',
            'city_placate_fail_title': '安抚失败',
            'city_placate_no_right': '只有势力官员才能安抚民心哦~',
            'city_placate_result': '安抚成功，民心+5',
            'city_placate_special_tip': '提示：民心越高，据点守将在夺城战中防御越强哦~',
            'city_protect_cd': '保护：{{:timespan}}',
            'city_rank': '【{{:forcename}}】占领{{:timespan}}',
            'city_siege_record': '【{{:name}}】占领{{:time}}',
            'collect_tax': '收税',
            'con_capitulate': '继续劝降',
            'con_capitulated': '劝降',
            'contact': '交流',
            'continue_exchange': '继续兑换',
            'cost_find_token': '花费寻访令：',
            'cost_grain': '花费粮饷：',
            'cost_rm': '花费元宝：',
            'count_challenge': '军令：',
            'count_member': '成员数：',
            'count_officer_1': '内务官数量：',
            'count_officer_2': '外务官数量：',
            'count_officer_3': '财务官数量：',
            'count_officer_4': '行政官数量：',
            'count_officer_5': '外交官数量：',
            'count_officer_6': '先锋数量：',
            'count_officer_7': '护卫数量：',
            'count_officer_name_1': '内务官',
            'count_officer_name_2': '外务官',
            'count_officer_name_3': '财务官',
            'count_officer_name_4': '行政官',
            'count_officer_name_5': '外交官',
            'count_officer_name_6': '先锋',
            'count_officer_name_7': '护卫',
            'counterattack': '反击',
            'crazywar_attack_retreat_answer': '主公~我方势力已成功退兵，{{:action}}状态解除！',
            'crazywar_defence_retreat_answer': '【{{:opponent_force}}】偷袭我方势力，不料踢到铁板，落荒而逃！',
            'crazywar_retreat_question': '主公~退兵后我方短期内不能再对【{{:forcename}}】发起{{:action}}了，是否确定要退兵？',
            'create_force': '创建势力',
            'create_free': '免费创建',
            'create_pay': '付费创建',
            'create_succ': '创建成功',
            'create_succ_tip': '恭喜您成功创建势力【{{:name}}】~',
            'create_succ_weibo': '我在#三国来了#创建了势力【{{:name}}】！你还是一个人在战斗吗？快来加入我们吧！',
            'create_tip': '为您的势力取一个惊艳的名字吧',
            'create_use_rebirth': '捐献68个转生丹即可免费创建势力~',
            'current_chanllenge_get': '&#149<span style="font-weight: bold">势力拥有军令：{{:now}}/{{:all}}</span>',
            'current_level': '{{:level}}级',
            'dang_memberCount': '第{{:level}}档成员数：{{:count}}',
            'default_chat_message': '点击进入势力聊天',
            'defence_lose': '防御失败',
            'defence_succ': '防御成功',
            'defense_lose': '防御失败',
            'defense_resign': '请辞申请',
            'defense_succ': '防御成功',
            'deleted': '已删除',
            'deny_apply': '主公~您拒绝了【{{:name}}】的结盟请求！',
            'deny_boycott': '主公~您拒绝了【{{:name}}】的联合反叛邀请！',
            'deny_capitulate': '拒绝劝降',
            'deny_capture': '主公~您拒绝了【{{:name}}】的劝降！',
            'deny_resign_apply': '主公~您拒绝了【{{:name}}】的请辞申请，TA仍是我方势力的太守！',
            'depose': '罢免',
            'diplomacy': '外交',
            'diplomacy_description': '与其他势力交流，无需消耗粮饷或军令',
            'diplomacy_tip': '•请输入势力名称或ID来搜索您想要外交的势力<br/>•消息发送后，双方势力的势力主/外交官均将收到消息。',
            'do_with_member': '要和<div class="pname"></div>做些什么呢？',
            'edit_force_fobbiden': '您没有权限编辑公告哦~',
            'electioneer_officer': '竞选州牧',
            'electioneer_officer_lose': '竞选州牧失败',
            'electioneer_officer_succ': '竞选州牧成功',
            'empty': '没有势力',
            'empty_notice_default_text': '点击编辑势力公告',
            'enemy force': '宿敌势力',
            'event': '事件',
            'exchange': '兑换',
            'exchange_again': '继续兑换',
            'exchange_failed_content': '主公，您的粮饷不够啦！势力主可以把势力粮饷分发给成员哦~',
            'exchange_failed_title': '兑换失败',
            'exchange_special': '特殊',
            'exchange_successful_content': '主公~您兑换的东东已经送达，可以<br/>从【首页-活动中心】中查收~',
            'exchange_successful_content2': '主公~您兑换的东东已经送达，可以<br/>从【商城-道具】中查收~',
            'exchange_successful_title': '兑换成功',
            'exchange_warning_content': '主公~您要兑换此东东吗？',
            'exchange_warning_title': '兑换确认',
            'expiretime_coming': '协防时间已到',
            'expiretime_coming_message': '借来的防守外援任期已满，回营去了。请势力主调整守将！',
            'explanation_content': '胜利规则：<br>·对方剩余时间为0，我方势力获胜。<br>',
            'fail_to_do': '操作失败',
            'fight': '战斗',
            'food_description': '抢夺其它势力的粮饷，需消耗军令',
            'force': '势力',
            'force_alliance': '[结盟势力]',
            'force_alliance_content': '主公～与其它势力结盟会使本势力保护期提前结束，届时其它势力将攻击本势力，是否确定结盟？',
            'force_appling': '主公～您已经申请该势力～',
            'force_apply': '势力申请',
            'force_apply_fail': '申请失败',
            'force_assistant_alert1': '主公~您的内政已全部完成~',
            'force_assistant_alert2': '主公~您点的太快啦~休息几秒再点吧~',
            'force_assistant_alert3': '主公~内政小助手正在帮您自动完成内政哦~',
            'force_assistant_auto_end': '<div class="fontWait bottomTitle">内政刷新，自动内政已中止。</div>',
            'force_assistant_auto_end2': '<div class="fontWait bottomTitle">内政全部完成。</div>',
            'force_assistant_auto_end3': '<div class="fontWait bottomTitle">自动内政已中止。</div>',
            'force_assistant_auto_end_alert': '主公~内政小助手已帮您完成本次内政了哦~',
            'force_assistant_auto_start': '<div class="fontWait">开始自动内政。</div>',
            'force_assistant_buyCard': '购买月卡',
            'force_assistant_content1': '主公~欢迎使用内政小助手~<br>点击【开启】后，内政小助手可以在主公做其他事时<span class="redfont">（包括主公不在线哦~）</span>，帮助主公自动将本次内政全部做到100%~',
            'force_assistant_content2': '内政小助手只有可领取月卡或日进斗金的主公才能使用哦~小助手可以帮助主公自动完成内政（即便主公不在线）~',
            'force_assistant_content3': '主公~您本次还有内政未做完哦，您确定刷新内政吗？',
            'force_assistant_content4': '<div class="fontWait bottomTitle">退出势力，内政中止。</div>',
            'force_assistant_end': '中止',
            'force_assistant_log1': '<div class="p"><div class="time"><span>{{:time}}</span> </div><div>执行：{{:task_name}} ({{:percent}}%)</div><div class="gets">获得：{{:gets}}</div></div>',
            'force_assistant_log2': '<div class="p"><div class="time"><span>{{:time}}</span></div><div class="fontWaitColor">领取：个人存粮</div><div class="gets fontWaitColor">获得：粮饷×{{:gets}}</div></div>',
            'force_assistant_prompt_title': '温馨提示',
            'force_assistant_start': '开启',
            'force_assistant_title': '内政小助手',
            'force_assistant_title1': '<span class="assis_title">内政小助手：</span><span class="assistant-status">可以自动完成内政~</span>',
            'force_assistant_title2': '<span class="assis_title">内政小助手：</span><span class="assistant-status assis_state_in">开启中</span>',
            'force_assistant_title3': '<span class="assis_title">内政小助手：</span><span class="assistant-status assis_state_out">未开启</span>',
            'force_autosellcard': '自动出售获得3星及以下卡牌',
            'force_battle_detail': '战斗统计',
            'force_battle_detail_attack_count': '次数',
            'force_battle_detail_attack_lose': '未被攻破',
            'force_battle_detail_attacker': '据点攻破者',
            'force_battle_detail_lodgment': '据点',
            'force_become_slave': '主公~我方势力成为了【{{:name}}】的太守！',
            'force_become_slave_seize_lose': '主公~我方势力成为了【{{:name}}】的太守！<br>对【{{:name2}}】的霸占失败！',
            'force_boss_challenge': '挑战',
            'force_boss_challenge_attack_default_msg': '点击【战斗】为本次挑战贡献力量吧！',
            'force_boss_challenge_attack_preview_cost': '花费元宝：',
            'force_boss_challenge_attack_preview_header': '主公~您还在挑战冷却时间中，是否花费元宝来加速冷却？',
            'force_boss_challenge_attack_preview_lose': '可能击杀100~200名黄巾军，获得5~10点粮饷',
            'force_boss_challenge_attack_preview_not': '付费战斗',
            'force_boss_challenge_attack_preview_speedup': '确认',
            'force_boss_challenge_attack_preview_win': '可能击杀200~300名黄巾军，获得10~15点粮饷',
            'force_boss_challenge_attack_reattack': '重试',
            'force_boss_challenge_attack_rm': '主公~您的免费战斗次数已用完，是否确认花费元宝进行一次战斗？',
            'force_boss_challenge_cd': '冷却中：{{:time}}',
            'force_boss_challenge_cd_content': '主公~冷却时间内不能【战斗】哦~',
            'force_boss_challenge_detail': '详细',
            'force_boss_challenge_detail_content': '【开启规则】<br>•一品以上官员可以开启挑战<br>•每天可以银币挑战1次黄巾军<br>•每次可以选择3种挑战模式<br>•银币挑战次数用完后可以用元宝召唤黄巾军挑战<br>•挑战黄巾军会在每天0点重置<br><br>【战斗规则】<br>•势力成员均可以参战<br>•势力等级越高，黄巾军等级越高<br><br>【奖励】<br>•参加战斗能获得粮饷奖励，击败黄巾军后参战成员和势力均能获得丰厚奖励<br>•每次击败黄巾军，势力全员均可在【兑换】中进行5折兑换啦<br>•击败高等级的黄巾军能获得更多奖励',
            'force_boss_challenge_detail_dlg': '规则说明',
            'force_boss_challenge_exchange_answer': '击败黄巾军',
            'force_boss_challenge_exchange_fail': '不能兑换',
            'force_boss_challenge_exchange_reason': '开启条件：',
            'force_boss_challenge_final_des1': '恭喜主公，我方势力击败了{{:level}}级{{:name}}，您获得了参与奖，共获得：',
            'force_boss_challenge_final_des1_superbonus': '恭喜主公，我方势力击败了{{:level}}级{{:name}}，您获得了参与奖、超级大奖，共获得：',
            'force_boss_challenge_final_des2': '恭喜主公，我军给予{{:level}}级{{:name}}最后一击！您获得了参与奖、击杀奖，共获得：',
            'force_boss_challenge_final_des2_superbonus': '恭喜主公，我军给予{{:level}}级{{:name}}最后一击！您获得了参与奖、击杀奖及超级大奖，共获得：',
            'force_boss_challenge_final_des3': '现在可以进行5折兑换啦！',
            'force_boss_challenge_final_des4': '主公~{{:level}}级{{:name}}已逃走，下次召集更多人来参战吧~',
            'force_boss_challenge_final_des5': '我方势力战胜了{{:level}}级{{:name}}，势力获得了{{:num}}粮饷！现在可以前往【兑换】中进行5折兑换啦！',
            'force_boss_challenge_final_des6': '恭喜主公，我方势力击败了{{:level}}级{{:name}}，您获得了参与奖及幸运奖，共获得：',
            'force_boss_challenge_final_des6_superbonus': '恭喜主公，我方势力击败了{{:level}}级{{:name}}，您获得了参与奖、幸运奖及超级大奖，共获得：',
            'force_boss_challenge_final_des7': '恭喜主公，我军给予{{:level}}级{{:name}}最后一击！您获得了参与奖、击杀奖及幸运奖，共获得：',
            'force_boss_challenge_final_des7_superbonus': '恭喜主公，我军给予{{:level}}级{{:name}}最后一击！您获得了参与奖、击杀奖、幸运奖及超级大奖，共获得：',
            'force_boss_challenge_final_des8': '主公~您挑战{{:boss}}获得了超级大奖【{{:name}}】，可以从【首页-卡牌】中查收',
            'force_boss_challenge_final_goexchange': '去兑换',
            'force_boss_challenge_final_goexchange2': '兑换',
            'force_boss_challenge_final_goviewcity': '查看城池',
            'force_boss_challenge_final_lose': '挑战失败',
            'force_boss_challenge_final_win': '成功击败黄巾军',
            'force_boss_challenge_final_win2': '挑战胜利',
            'force_boss_challenge_final_win_grain': '粮饷',
            'force_boss_challenge_freetimes': '免费战斗次数：{{:times}}',
            'force_boss_challenge_help_content': '号召势力成员参加势力挑战吧！',
            'force_boss_challenge_help_title': '号召参加势力挑战',
            'force_boss_challenge_hint_text': '齐心协力，无坚不摧！',
            'force_boss_challenge_lack_rm': '主公~您的元宝不够啦，攒点钱再来吧！',
            'force_boss_challenge_lack_title': '挑战失败',
            'force_boss_challenge_lack_vm': '主公~您的银币不够啦，攒点钱再来吧！',
            'force_boss_challenge_limit': '今日剩余银币挑战次数：{{:num}}',
            'force_boss_challenge_limit2': '今日剩余元宝挑战次数：{{:num}}',
            'force_boss_challenge_msg_content': '{{:name}}击杀了{{:num}}名{{:boss}}。',
            'force_boss_challenge_msg_content2': '（{{:time}}前）',
            'force_boss_challenge_no_right': '势力主/副势力主/内务官才能开启哦~',
            'force_boss_challenge_no_right2': '主公~今日挑战次数已达上限哦~',
            'force_boss_challenge_notice': '击杀黄巾军能开启5折兑换哦~',
            'force_boss_challenge_notice2': '【战斗】一次可能击杀100~300名黄巾军，相应获得5~15粮饷哦~',
            'force_boss_challenge_preview_choose_niudan': '请选择击败黄巾军后开启的5折兑换：',
            'force_boss_challenge_preview_cost': '挑战消耗：',
            'force_boss_challenge_preview_header': '主公~开始挑战黄巾军后，势力全员可参与战斗，是否要开始挑战？',
            'force_boss_challenge_preview_niudan1': '四星蜀国寻将任务',
            'force_boss_challenge_preview_niudan2': '四星魏国寻将任务',
            'force_boss_challenge_preview_niudan3': '四星吴国寻将任务',
            'force_boss_challenge_preview_niudan4': '四星群雄寻将任务',
            'force_boss_challenge_preview_niudan5': '四星寻宝任务-武器',
            'force_boss_challenge_preview_niudan6': '四星寻宝任务-防具',
            'force_boss_challenge_preview_niudan7': '四星寻宝任务-坐骑',
            'force_boss_challenge_profile': '{{:name}}存在时间：{{:time}}分钟<br>【人数】：{{:num}}<br>【防御】：{{:defencemin}}~{{:defencemax}}<br>【技能】<br>{{:skill}}',
            'force_boss_challenge_reward': '挑战奖励',
            'force_boss_challenge_reward_des': '恭喜主公，我军击杀了{{:num}}名{{:name}}！',
            'force_boss_challenge_reward_des2': '恭喜主公，我军击杀了{{:level}}级{{:name}}头目赢得了胜利！您获得了丰富的击杀奖励！！',
            'force_boss_challenge_reward_get': '获得',
            'force_boss_challenge_reward_get2': '共获得',
            'force_boss_challenge_reward_killboss': '击杀奖励',
            'force_boss_challenge_speed_fail_title': '加速失败',
            'force_boss_challenge_start': '开始挑战',
            'force_boss_challenge_start2': '挑战',
            'force_boss_challenge_start3': '立即战斗',
            'force_boss_challenge_start4': '战斗',
            'force_boss_challenge_start5': '挑战开始',
            'force_boss_challenge_tip_content': '主公～已开始挑战【{{:opponent_force}}】，是否号召势力成员前来参战？',
            'force_boss_flee_time': '{{:time}}后逃走',
            'force_boss_left': '【残余人数】：{{:num}}/{{:wholenum}}',
            'force_boss_name_level': '{{:name}}<span class="challenge-highlight">({{:level}}级)</span>',
            'force_boss_name_level2': '{{:name}}{{:level}}级',
            'force_capitulate_fail': '不能劝降',
            'force_capture_content': '主公～劝降其它势力会使本势力保护期提前结束，届时其它势力将攻击本势力，是否确定劝降？',
            'force_challenge_model_alert': '点击【进攻黄巾军】后，选择想要挑战的模式。',
            'force_challenge_model_attack': '进攻黄巾军',
            'force_challenge_model_bossinfo_defence': '【防御】{{:min}}~{{:max}}',
            'force_challenge_model_bossinfo_life': '【人数】{{:life}}',
            'force_challenge_model_bossinfo_name': '{{:name}}({{:level}}级)',
            'force_challenge_model_bossinfo_skill': '【技能】<br>{{:skill}}',
            'force_challenge_model_bossinfo_title': 'BOSS信息',
            'force_challenge_model_deadGod': '“苍天已死，黄天当立。岁在甲子，天下大吉！”黄巾军散布谣言，四处作乱，请各路诸侯前去征讨。',
            'force_challenge_model_duration': '战斗时间：{{:duration}}分钟',
            'force_challenge_model_easy': '【简单模式 {{:name}}({{:level}}级)】',
            'force_challenge_model_hard': '【困难模式 {{:name}}({{:level}}级)】',
            'force_challenge_model_huangjin': '黄巾军',
            'force_challenge_model_normal': '【普通模式 {{:name}}({{:level}}级)】',
            'force_challenge_model_skill_easy': '描述：简单模式的黄巾军更容易击杀，击杀时间不会计入排行榜。',
            'force_challenge_model_skill_hard': '描述：击杀困难模式黄巾军可获得更多粮饷，击杀时间会计入{{:level}}级排行榜。',
            'force_challenge_model_skill_normal': '描述：击杀普通模式黄巾军会计入排行榜。',
            'force_challenge_model_title': '选择挑战模式',
            'force_city_all_citys': '所有城池',
            'force_city_attack_cd_notice': '您的战斗次数已经用光啦~',
            'force_city_attack_header_notice1': '（已占据点）',
            'force_city_attack_header_notice2': '（剩{{:num}}次）',
            'force_city_grain_fetch': '去领取',
            'force_city_search_hint': '输入城池名称搜索',
            'force_city_search_noresult': '主公～没有找到相关的城池哦～',
            'force_city_war_exchange_answer': '占领【{{:city}}】',
            'force_city_war_result_content1': '报主公~【{{:forcename}}】捷足先登，已将【{{:name}}】抢走，我军只能中途退兵~',
            'force_city_war_result_content2': '我方势力从【{{:name}}】退兵，未夺得城池，【{{:name}}】百姓对【{{:forcename}}】的忠诚似乎降低了！',
            'force_city_war_result_content3': '报主公~【{{:name}}】城主弃城逃走，【黄巾势力】趁虚而入占领了【{{:name}}】，我军只能中途退兵~',
            'force_city_war_result_title1': '城池已被抢',
            'force_city_war_result_title2': '中途退兵',
            'force_contribute_not_enough': '我方势力等级{{:force_level}}级，贡献值{{:contribute}}及以上的势力成员可以参战~快去做内政提高贡献吧~',
            'force_create_failed': '势力创建失败',
            'force_create_ok': '主公～您还未加入势力，赶快创建或加入一个吧！',
            'force_disband': '势力解散',
            'force_dismiss': '势力解散',
            'force_empty': '主公～没有找到相关的势力哦～',
            'force_entry_without_permission': '申请此势力可直接加入，此势力主曾在{{:time}}前登录',
            'force_entry_without_permission2': '可直接加入',
            'force_entry_without_permission_btn': '去势力',
            'force_entry_without_permission_lebel': '自动同意势力申请',
            'force_entry_without_permission_owner_perform': '主公~只有势力主或副势力主才能操作哦~',
            'force_entry_without_permission_title1': '加入势力',
            'force_entry_without_permission_title2': '发送申请成功',
            'force_event_alliance_notice': '结盟后，我方势力将不能劝降、霸占、接受劝降。',
            'force_exchange_unavailable': '主公~现在还不能兑换该物品哦~',
            'force_exchange_unavailable_forceboss': '主公~请先击败黄巾军哦~',
            'force_forcewar_content': '主公～挑战其它势力会使本势力保护期提前结束，届时其它势力将攻击本势力，是否确定挑战？',
            'force_free': '[自由势力]',
            'force_grain': '势力粮饷：',
            'force_id': '势力ID：',
            'force_invite': '势力邀请',
            'force_join_no': '主公～您还未加入势力，升到{{:level}}级就能加入势力哦~',
            'force_join_ok': '主公～您还未加入势力，赶快加入一个吧！升到{{:level}}级就能创建势力哦～',
            'force_level': '势力等级：',
            'force_level_is_not_enough': '主公～势力的级别不足哦～',
            'force_level_not_enough': '势力等级不足',
            'force_level_not_enough_msg': '主公~对方的势力等级不足，还不能与TA建立关系哦～',
            'force_level_too_low': '主公~势力的级别不足哦~',
            'force_list_limit': '主公~只能查看前100名的势力哦~',
            'force_list_more': '主公~没有更多的势力了~',
            'force_master': '[诸侯势力]',
            'force_message': '势力消息',
            'force_name': '主公，请选择是对【{{:force_name}}】进行反击还是查看成员？',
            'force_name_empty': '亲～势力名字不能为空',
            'force_name_empty1': '亲～势力不能没有名字哦',
            'force_name_max': '最多5个汉字',
            'force_num': '/人（共{{:count}}人）',
            'force_owner': '势力主：',
            'force_protected': '保护期：',
            'force_protected_tips': '温馨提示',
            'force_ranking_empty': '暂时无人进榜~',
            'force_search_noresult': '主公～没有找到相关的势力哦～',
            'force_siege_content': '主公～夺城会使本势力保护期提前结束，届时其它势力将攻击本势力，是否确定夺城？',
            'force_slave': '[太守势力]',
            'force_usurp_content': '主公～霸占其它势力会使本势力保护期提前结束，届时其它势力将攻击本势力，是否确定霸占？',
            'force_vice_owner': '副势力主：',
            'force_view': '查看',
            'force_war': '抢粮战',
            'force_war_tip': '挑战等级高、存粮多的势力能抢到更多粮饷哦~',
            'force_war_tip2': '贡献值{{:contribute}}及以上的势力成员可以参战哦~',
            'force_war_tip3': '霸占成功后，我方势力将不能结盟、接受劝降。',
            'forcebroadcastNotice': '势力群发消息',
            'forcebuff': '势力称号：',
            'forcewar': '挑战',
            'forcewar_action': '挑战',
            'forcewar_alliancemember': '联盟成员',
            'forcewar_battle': '战斗',
            'forcewar_battle_action': '攻占',
            'forcewar_battle_notice': '攻击【{{:opponent_force}}】中 ({{:battle_schedule}}) - {{:battle_time}}',
            'forcewar_battle_preview': '战斗结果预览',
            'forcewar_battle_start': '发起抢粮战',
            'forcewar_change': '更换',
            'forcewar_communion': '交流',
            'forcewar_defence_notice': '请势力主派遣强力的成员防守势力据点',
            'forcewar_defense': '防务',
            'forcewar_disband_content': '我方势力声势浩大，吓尿了某不知名势力，<br/>夺得势力粮饷：',
            'forcewar_element_assistforce': '势力：',
            'forcewar_element_captured': '攻占：',
            'forcewar_element_defence': '防御：',
            'forcewar_element_expiretime': '协防中：',
            'forcewar_element_force': '势力：',
            'forcewar_element_general': '守将：',
            'forcewar_element_group': '势力：',
            'forcewar_element_hascaptured': '占领',
            'forcewar_element_position': '据点{{:index}}  ',
            'forcewar_enemy': '宿敌',
            'forcewar_enemy_grain': '现在反击可以获得：',
            'forcewar_enemy_level': '级别{{:index}}  ',
            'forcewar_enemy_mem': '成员数：{{:current_mem}}/{{:total_mem}}',
            'forcewar_enemy_notice': '保留最近的10个宿敌',
            'forcewar_enemy_owner': '势力主：[{{:owner_title}}] {{:owner_name}}',
            'forcewar_grain_action': '抢粮',
            'forcewar_grain_preview': '抢粮结果预览',
            'forcewar_hasborrowmember': '已借用协防人员： ',
            'forcewar_help': '号召',
            'forcewar_help_content': '号召势力成员参加抢粮战吧！',
            'forcewar_help_title': '号召参加抢粮战',
            'forcewar_lose': '挑战失败',
            'forcewar_lose_content': '我方势力挑战【{{:forcename}}】时败北而归，未夺得任何战利品～',
            'forcewar_lose_grain': '【{{:forcename}}】率众偷袭我方势力，夺走了{{:grain}}粮饷',
            'forcewar_march_header': '请势力主召集成员积极备战',
            'forcewar_no_battle': '势力拥有军令:{{:challenge}}/{{:challenge_limit}}',
            'forcewar_notice_members': '{{:ownername}}向【{{:forcename}}】发起挑战，号召你加入战斗！{{:content}}',
            'forcewar_notice_members1': '<span>{{:title}}</span>{{:ownername}}向【{{:forcename}}】发起挑战，号召你加入战斗！',
            'forcewar_only_owner_change_defender': '势力主/副势力主/外务官才能更换守将哦~',
            'forcewar_only_owner_start': '势力主/副势力主/外务官才能发起抢粮战~',
            'forcewar_preview': '挑战结果预览',
            'forcewar_preview_city_in_battle_tip': '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主公~有其它势力正在抢夺【{{:name}}】~',
            'forcewar_retreat': '退兵',
            'forcewar_retreat_content': '我方势力从【{{:forcename}}】退兵，未夺得任何战利品~',
            'forcewar_retreat_question': '退兵将视为战败处理，您确定要退兵吗？',
            'forcewar_retreat_tip': '主公~只有势力主和副势力主才能选择退兵哦~',
            'forcewar_start_content': '发起：势力主或副势力主发起，消耗军令<br/><br/>参战：全体成员可参战，攻占据点可得贡献<br/><br/>胜利：限时攻占敌对势力一半以上的据点<br/><br/>失败：倒计时结束前未获胜利或选择退兵<br/><br/>奖惩：获胜可夺得粮饷，战败无损失',
            'forcewar_start_title': '规则说明：',
            'forcewar_tip_content': '主公～已向【{{:opponent_force}}】发起抢粮战，一定要在10分钟内取得胜利哦～是否号召势力成员前来参战？',
            'forcewar_tip_title': '提示',
            'forcewar_win': '挑战胜利',
            'forcewar_win_commend': '特此表彰以下成员：<br/>',
            'forcewar_win_content': '我方势力轻松击败【{{:forcename}}】，夺得势力粮饷：',
            'forcewar_win_grain': '我方势力轻松击败【{{:forcename}}】，夺得{{:grain}}粮饷',
            'foreign': '外务',
            'formation detail': '阵容对比',
            'free_only_owner_can_ask_alliance': '主公~只有势力主才能结盟哦~',
            'free_only_owner_can_ask_diplomacy': '势力主/外交官才能外交哦~',
            'free_only_ownerorvice_can_ask_surrender': '主公~只有势力主、副势力主才能劝降哦~',
            'free_only_ownerorvice_can_start_battle': '只有势力主、副势力主才能发起霸占~',
            'from': '从',
            'g_back_changeBtn': '返回调整',
            'g_benqigongxian': '本期贡献：自上次发粮后，增加的贡献值；',
            'g_changedItem': '已选成员：{{:num}}/{{:count}}',
            'g_condition_txt': '显示已分配档次的成员',
            'g_faliang_detail_confirm': '主公~您确定按如下分配发放粮饷吗？',
            'g_faliang_detail_confirm2': '（发放粮饷后需要冷却3天哦~）',
            'g_faliang_detail_count': '第{{:level}}档包含成员：',
            'g_faliang_detail_t': '第{{:level}}档每人获得{{:grain}}粮饷，共{{:num}}人：',
            'g_faliang_sender': '{{:sender}}将{{:grain}}点势力粮饷分配给势力成员：',
            'g_faliang_t': '发粮详情',
            'g_filtertype1': '官职',
            'g_filtertype10': '贡献元宝',
            'g_filtertype11': '官职：',
            'g_filtertype33': '本期贡献：',
            'g_filtertype4': '爵位',
            'g_filtertype5': '分配档次',
            'g_filtertype55': '贡献元宝：',
            'g_filtertype9': '本期贡献',
            'g_gongxianyuanbao': '贡献元宝：自上次发粮后，为势力花费的元宝数；',
            'g_level_bodys': '第{{:level}}档（共{{:num}}人）',
            'g_level_bodys2': '第{{:level}}档 {{:grain}}/人（共{{:num}}人）',
            'g_level_bodys3': '<span style="color:#A80E0E">未分配（共{{:num}}人）</span>',
            'g_level_grain': '每人获得{{:num}}粮饷',
            'g_moreLabel': '全选未分配成员',
            'g_order1': '降序',
            'g_order2': '升序',
            'g_remainderGrain': '剩余粮饷：{{:grainNum}}',
            'g_remainderGrain2': '<span style="color:#CC3513">剩余粮饷：{{:grainNum}}</span>',
            'g_selectMember': '选择成员',
            'g_selectedTxt': '第{{:level}}档：{{:grain}}粮',
            'g_sendgrain_ok': '成功发放粮饷~',
            'g_setNumber': '设定数量',
            'g_xLevel': '第{{:level}}档',
            'g_xNum': ' / 人（共{{:num}}人）',
            'gained': '获得贡献：',
            'get_officer': '夺得州牧',
            'get_out_of_force': '退出势力',
            'get_out_of_force_content': '退出势力后，您贡献值将被清空，但可保留私有粮饷。您确定要退出势力吗？',
            'get_title': '获得称号',
            'go': '前往',
            'go_forcewar': '去外务',
            'go_internal': '做内政',
            'goaway': '后离开',
            'grain': '粮饷：',
            'grain_contribute': '捐献粮饷',
            'grain_cost': '扣除粮饷：',
            'grain_donate': '获赠粮饷',
            'grain_input_err': '主公~您未输入分配数量哦~',
            'grain_not_enouph': '主公~粮饷不足，先攒点粮饷再来吧~',
            'grain_not_input': '主公~您未输入分配数量哦~',
            'grain_share_cd': '（发放粮饷后需要冷却3天哦~）',
            'grain_share_cdtip': '发粮冷却：',
            'grain_share_confirm': '主公~您确定按如下分配发放粮饷吗？',
            'grain_share_fail': '主公~势力粮饷不足啦~',
            'grain_succ': '成功发放粮饷~',
            'graun_share_cd_no': '主公~现在还不能发放粮饷哦~',
            'has_captured': '主公～我方势力已攻下该据点',
            'has_in_force': '主公~TA已经找到了归属~',
            'have_armygrain': '现有粮饷：',
            'have_grain': '现有粮饷：{{:grain}}（保险粮：{{:safe_grain}}）',
            'help revenge': '帮助复仇',
            'help_defense_member_change': '协防人事变更',
            'help_defense_time_finish': '协防时间已到',
            'hour': '时',
            'how_to_adjust_official': '如何调整<div class="pname"></div>的官职？',
            'id': 'ID：',
            'in_force_protected': '保护中',
            'in_force_rest': '休整中',
            'in_war': '参战',
            'info': '势力信息',
            'info_board': '公告',
            'info_level': '级别',
            'info_member': '普通成员',
            'info_member1': '成员数',
            'info_owner': '势力主',
            'info_vice_owner': '副势力主',
            'input_message_call_toge': '主公~请输入留言召集帮众：',
            'internal': '内政',
            'invite_member': '邀请',
            'is_submission': '是否归顺',
            'its_alliance': 'TA的盟友',
            'its_master': 'TA的诸侯',
            'its_slave': 'TA的太守',
            'join_already': '主公～您已经申请该势力～',
            'join_apply': '申请加入',
            'join_apply_force': '申请加入势力',
            'join_event_privilege': '势力主/副势力主/行政官才能处理哦~',
            'join_force': '加入势力',
            'join_slogen': '请发表入伙宣言！',
            'lake_grain': '粮饷不足',
            'last_grain': '剩余粮饷：',
            'leve_updated': '恭喜主公，势力升级到{{:level}}级',
            'level': '级别: ',
            'level1': '一',
            'level2': '二',
            'level3': '三',
            'level4': '四',
            'level5': '五',
            'level_full': '已满级',
            'level_full_tip': '势力已满级',
            'levelinfo': '级别{{:level}}',
            'login': '登录：',
            'login2': '登录',
            'lose_lodgment_defender': '我军不敌{{:defendername}}，没能攻占据点【{{:lodgment}}】～',
            'lose_officer': '失去州牧',
            'lose_title': '失去称号',
            'march_content_rebel_attack': '·我军抵达【{{:forcename}}】后，反叛正式开始。<br/>·敌我双方各拥有30分钟来夺取胜利。<br/>·当我方势力占领对方一个以上的据点，对方倒计时就会启动。<br/>·对方倒计时归零则反叛胜利，我方势力恢复自由身份。<br/>·如果我方倒计时归零则反叛失败。',
            'march_content_rebel_defence': '·敌军抵达我方势力后，反叛正式开始。·敌我双方各拥有30分钟来夺取胜利。<br/>·当我方势力占领全部据点，对方倒计时就会启动。<br/>·对方倒计时归零则防守胜利。<br/>·如果我方倒计时归零则防守失败，对方势力将恢复自由身份。',
            'march_content_uniterebel_attack': '·我军抵达【{{:forcename}}】后，联合反叛正式开始。<br/>·敌我双方各拥有30分钟来夺取胜利。<br/>·被邀请的势力同意后可加入联合反叛的战斗。<br/>·当我方势力占领对方一半以上的据点，对方倒计时就会启动。<br/>·对方倒计时归零则反叛胜利，我方势力恢复自由身份。<br/>·如果我方倒计时归零则反叛失败。',
            'march_content_uniterebel_defence': '·敌军抵达我方势力后，联合反叛正式开始。<br/>·敌我双方各拥有30分钟来夺取胜利。<br/>·当我方势力占领一半以上的据点，对方倒计时就会启动。<br/>·对方倒计时归零则防守胜利。<br/>·如果我方倒计时归零则防守失败，对方势力将恢复自由身份。',
            'march_content_usurp_attack': '·我军抵达【{{:forcename}}】后，霸占正式开始。<br/>·敌我双方各拥有30分钟来夺取胜利。<br/>·当我方势力占领对方所有的据点，对方倒计时就会启动。<br/>·对方倒计时归零则霸占胜利，对方成为我方的太守势力。<br/>·如果我方倒计时归零则霸占失败。',
            'march_content_usurp_defence': '·敌军抵达我方势力后，霸占正式开始。<br/>·敌我双方各拥有30分钟来夺取胜利。<br/>·当我方势力占领一个及以上的据点，对方倒计时就会启动。<br/>·对方倒计时归零则防守胜利。<br/>·如果我方倒计时归零则防守失败，我方成为对方的太守势力。',
            'march_expiretime_rebel_attack': '行军中，{{:expiretime}}后将抵达【{{:forcename}}】。',
            'march_expiretime_rebel_defence': '【{{:forcename}}】{{:expiretime}}后将抵达我方势力。',
            'march_expiretime_uniterebel_attack': '行军中，{{:expiretime}}后将抵达【{{:forcename}}】。',
            'march_expiretime_uniterebel_defence': '【{{:forcename}}】{{:expiretime}}后将抵达我方势力。',
            'march_expiretime_usurp_attack': '行军中，{{:expiretime}}后将抵达【{{:forcename}}】。',
            'march_expiretime_usurp_defence': '【{{:forcename}}】{{:expiretime}}后将抵达我方势力。',
            'master_slave_num': '太守数量：{{:slavenum}}/{{:maxslavenum}}',
            'member': '成员',
            'member_contact': '成员交流',
            'member_count': '成员数量：',
            'member_count1': '成员数：{{:now}}/{{:max}}',
            'member_count_txt': '成员：',
            'member_empty': '暂无成员！',
            'member_full': '主公～该势力已经满人～',
            'member_max': '成员数上限：',
            'member_more': '更多成员',
            'more': '更多',
            'more_force': '刷新势力',
            'name': '势力名：',
            'need_rm': '主公～您的元宝不够啦，攒点钱再来吧！',
            'next_chanllenge_get': '&#149下一封军令获得：',
            'nextday': '次日',
            'no enemy force': '近期风平浪静，未受到外来攻击。',
            'no_allocatebuff': '主公~这个称号已经没有多余的数量了哦~',
            'no_more_member': '没有更多成员啦~',
            'no_suitable_player': '没有符合条件的玩家哦~',
            'non_rmb_player_add_defense': '已加固{{:percent}}%',
            'non_rmb_player_assist_attack': '挖墙脚',
            'non_rmb_player_assist_defense': '固城防',
            'non_rmb_player_assist_result': '{{:name}}防御值{{:percent}}%！获得粮饷：5，贡献：5',
            'non_rmb_player_defense_data': '(防御{{:percent}}%)',
            'non_rmb_player_sub_defense': '已削弱{{:percent}}%',
            'none': '无',
            'not_resign_apply': '不能受理请辞',
            'not_this_member': '没有这个成员',
            'notice': '势力公告',
            'notice_default_text1': '#对内公告内容#',
            'notice_default_text2': '#对外公告内容#',
            'notice_default_title1': '对内公告（仅势力成员可见）',
            'notice_default_title2': '对外公告（非势力成员可见）',
            'notice_edit_btn': '修改',
            'notice_title': '【公告】',
            'offer': '贡献：',
            'offer1': '贡献',
            'officer_first': '一品官',
            'officer_second': '二品官',
            'officer_third': '三品官',
            'official': '官职：',
            'official1': '转让势力主',
            'official100': '无官职',
            'official14': '外务官',
            'official15': '财务官',
            'official16': '行政官',
            'official17': '外交官',
            'official18': '先锋',
            'official19': '护卫',
            'official2': '副势力主',
            'official3': '内务官',
            'ok_submission': '确认归顺',
            'only_official_can_refresh': '势力主/副势力主/内务官才能刷新哦~',
            'only_ownerandvice_broadcast': '只有势力主/副势力主可以群发消息哦~',
            'order': '排名：{{:order}}',
            'order_condition': '筛选条件',
            'order_conditions': '排序条件',
            'order_force': '排序',
            'other': '其它',
            'other_prefect_message': '其他太守消息',
            'out': '退隐',
            'out_force': '请出势力',
            'out_force_default_message': '请告诉Ta请出的原因吧。',
            'out_force_message': '将<div class="pname"></div>请出势力后，TA的贡献值将被清空，您确定要这么做吗？',
            'out_force_tip': '主公～只能请出官职低于自身的成员哦～',
            'over': '结束',
            'owner': '势力主：[<span class=\"official\">{{:title}}</span>]{{:name}}',
            'owner_bg': '势力主：',
            'owner_name': '城主：{{:owner_name}}',
            'owner_title': '势力主称号：',
            'pass_resign_apply': '主公~您批准了【{{:name}}】的请辞，TA不再是我方势力的太守了！',
            'personal_grain_amount': '您拥有粮饷：{{:amount}}',
            'position_count': '据点数量：',
            'position_empty': '空缺',
            'prefect_be_seized': '太守被夺',
            'prefect_count': '太守：',
            'prefect_message': '太守消息',
            'prefect_revolt': '太守反叛',
            'price': '花费：',
            'prince_message': '诸侯消息',
            'profile_level': '级别：',
            'quanxian_yilan': '权限一览',
            'qx_1': '<span class="h-3">副势力主：</span>拥有发起抢粮、夺城、劝降、霸占、更换据点守将、刷新内政任务、开启黄巾军挑战、编辑公告、群发留言、自动同意势力申请、处理加入势力申请、踢出势力主/副势力主以外成员的权力。',
            'qx_2': '<span class="h-3">内务官：</span>拥有刷新内政任务、开启黄巾军挑战、编辑公告的权力。',
            'qx_3': '<span class="h-3">外务官：</span>拥有发起抢粮、夺城、更换据点守将、编辑公告的权力。',
            'qx_4': '<span class="h-3">财务官：</span>拥有发放粮饷、编辑公告的权力。',
            'qx_5': '<span class="h-3">行政官：</span>拥有处理加入势力申请、踢出普通成员、编辑公告的权力。',
            'qx_6': '<span class="h-3">外交官：</span>拥有和其它势力外交、编辑公告的权力。',
            'qx_7': '<span class="h-3">先锋/护卫：</span>无权力。',
            'ranking': '排行',
            'rebel': '反叛',
            'rebel_attack_disband': '时来运转，我方诸侯势力由于内部动荡导致解散，我方势力反叛成功，恢复了自由！',
            'rebel_attack_explanation': '<br>·占据对方一个以上的据点，我方倒计时停止，对方的倒计时即会启动。',
            'rebel_attack_lose': '反叛失败',
            'rebel_attack_lose_content': '出师不利，我方势力反叛【{{:opponent_force}}】败北而归。',
            'rebel_attack_win': '反叛成功',
            'rebel_attack_win_content': '经过浴血奋战，我方势力反叛【{{:opponent_force}}】成功！恢复了自由身！<br>特此表彰以下成员：<br>{{:players}}',
            'rebel_attacker_win_momentum': '<br/>我方已经拿下对方一个以上的据点了，坚守就是胜利啊～',
            'rebel_defence_disband': '某不知名的势力解散，对我方势力的本次反叛失败告终！',
            'rebel_defence_explanation': '<br>·守住我方全部的据点，我方倒计时停止，对方的倒计时即会启动。',
            'rebel_defence_lose': '防御失败',
            'rebel_defence_lose_content': '【{{:opponent_force}}】反叛成功，不再是我方的太守势力了！',
            'rebel_defence_win': '防御成功',
            'rebel_defence_win_content': '经过我方势力成员的不懈努力，成功击退了【{{:opponent_force}}】的反叛！',
            'rebel_defenceer_win_momentum': '<br/>总算夺回全部据点了，死也要守住啊～',
            'rebel_fail': '不能反叛',
            'rebel_fail_forcerest': '主公~诸侯势力正在休整中，还不能反叛TA哦~',
            'rebel_over': '反叛结束',
            'rebirth_not_enouph': '主公~您的转生丹不够啦！您可以通过闯关获得足够的转生丹哦',
            'rebirth_not_enouph_title': '转生丹不足',
            'rebirth_now_have': '（现有{{:num}}个转生丹）',
            'rece_invite': '接受邀请',
            'receive_capitulate': '接受劝降',
            'refresh': '刷新',
            'refreshTime1': '于{{:hour}}点{{:minutes}}分',
            'refreshTime2': '{{:hour}}点{{:minutes}}分',
            'refresh_award': '恭喜您成功帮势力成员刷新内政任务！',
            'refresh_award1': '获得回报：',
            'refresh_cost': '刷新花费：',
            'refresh_fail': '内政刷新失败',
            'refresh_fail_tip': '报主公，您所在的势力存在不断加人踢人以恶意刷粮的行为，导致每日自动刷新内政的机会被用光啦~您可以找势力主探明究竟，或另寻势力加入哦~',
            'refresh_info1': '主公～您愿意给所有势力成员施加恩惠，帮他们刷新内政任务吗？',
            'refresh_info3': '(下次花费{{:cost}}{{:yb}}，多次刷新内政，势力成员可依次接受，不会覆盖，每日{{:point}}点重置)',
            'refresh_info4': '报～主公～<div class="pname"></div>花重金为势力刷新内政任务，您愿意接受刷新吗？<br>(刷新后可重新做任务，获得更多奖励～)',
            'refresh_info5': '主公~今日',
            'refresh_info6': '花重金共刷新了<span class = "dark-red">{{:totaltime}}</span>次内政，您还可以接受<span class = "dark-red">{{:remaintime}}</span>次刷新内政，确定刷新吗？',
            'refresh_info7': '（刷新后可重新做内政任务，获得更多奖励~未接受的刷新会在每日24点清空哦~）',
            'refresh_info8': '主公~今日还没有官员刷新过内政哦~',
            'refresh_internal_mission': '刷新内政任务',
            'refresh_text': '每日24点刷新内政任务',
            'relation': '关系',
            'relation_disband': '关系解除',
            'relation_join_no': '主公～势力升到{{:level}}级后就可以开启关系了哦~',
            'relation_join_no_dlg_title': '势力等级不足',
            'relationship': '关系',
            'require_force_level': '需势力级别：',
            'resign': '请辞',
            'response': '接受',
            'responsedandsummon': '主公~我方势力已经加入到对诸侯【{{:name}}】的联合反叛中了~<br>是否号召势力成员前来参战？',
            'revenge': '征讨',
            'revenge result preview': '复仇结果预览',
            'revenge_result_title_fail': '复仇失败',
            'revenge_result_title_win': '复仇奖励',
            'revolt': '反叛',
            'revolt_cancel': '反叛撤退',
            'revolt_lose': '反叛失败',
            'revolt_succ': '反叛成功',
            'reward': '势力收获',
            'rm': '元宝',
            'salary_only_owner': '势力主/财务官才能发放粮饷哦~',
            'search': '搜',
            'seize': '霸占',
            'seize_evacuate': '霸占撤退',
            'seize_lose': '霸占失败',
            'seize_succ': '霸占成功',
            'seizing_phase_cancel': '霸占状态解除',
            'select_assign_title': '请选择分配给{{:honor}}{{:name}}的称号',
            'send_already': '已飞鸽传书，请等待回复！',
            'send_apply': '发送',
            'send_definedgrain': '自定义发粮',
            'send_diplomacy_success': '消息发送成功~',
            'send_diplomacy_to': '留言给{{:receiveForceName}}',
            'send_weibo': '发送微博',
            'set_resttime_sucess': '设置休整时间成功！',
            'share_grain': '按官职发粮',
            'share_grain2': '发放粮饷',
            'show_detail': '查看详细',
            'siege': '夺城',
            'siege_battle_notice': '抢夺【{{:city}}】 ({{:battle_schedule}}) - {{:battle_time}}',
            'siege_button_disable_msg': '您的势力等级不符合要求哦~',
            'siege_button_disable_msg2': '城池易主未久，不要趁火打劫哦~',
            'siege_button_disable_msg3': '势力主/副势力主/外务官才能发起夺城战~',
            'siege_button_resiege_txt': '弃旧夺新',
            'siege_button_txt': '抢夺',
            'siege_city_war_lose': '夺城失败',
            'siege_city_war_lose_content': '我方势力在抢夺【{{:name}}】时败北而归，未夺得城池，【{{:name}}】百姓对【{{:forcename}}】的忠诚似乎降低了！',
            'siege_city_war_win': '夺城胜利',
            'siege_city_war_win_content': '我方势力轻松击败【{{:forcename}}】，占领城池【{{:name}}】。记得去兑换【{{:niudanname}}】哦~',
            'siege_description': '争夺三国名城，抢个体面的根据地，需消耗军令',
            'siege_help_content': '号召势力成员参加夺城战吧！',
            'siege_help_title': '号召参加夺城战',
            'siege_only_owner_start': '势力主/副势力主/外务官才能发起夺城战~  ',
            'siege_preivew_dlg_title': '抢夺结果预览',
            'siege_preview_dlg_lose': '【{{:name}}】民心-1',
            'siege_preview_dlg_win': '占领城池【{{:name}}】',
            'siege_tip_content': '主公~已向【{{:owner_name}}】发起夺城战！为了防止其它势力捷足先登，抢走城池，我们一定要速战速决哦~<br>是否号召势力成员前来参战？',
            'submission': '归顺',
            'submission_succ': '归顺成功',
            'submissioned': '已归顺',
            'sum_tax': '累积税收',
            'summon': '号召',
            'sure_exchange': '确定兑换',
            'tax_rate': '税率：',
            'tax_rate_adjust': '税率调整',
            'time_tip_for_own_battle': '再坚持{{:time}}就成功啦~',
            'tip1': '主公～二品以上官员才能编辑公告哦～',
            'title': '称号',
            'to_msg': '留言',
            'today_offer': '(今日{{:offer}})',
            'turning_point_condition': '我方倒计时停止条件：占领据点',
            'uniterebel': '联合反叛',
            'uniterebel_attack_disband': '时来运转，我方诸侯势力由于内部动荡导致解散，我方势力及{{:sibling}}联合反叛成功，恢复了自由身！',
            'uniterebel_attack_explanation': '<br>·占据对方一半以上的据点，我方倒计时停止，对方的倒计时即会启动。',
            'uniterebel_attack_lose': '反叛失败',
            'uniterebel_attack_lose_content': '出师不利，我方势力{{:sibling}}联合反叛【{{:opponent_force}}】败北而归。',
            'uniterebel_attack_win': '反叛成功',
            'uniterebel_attack_win_content': '经过浴血奋战，我方势力{{:sibling}}联合反叛【{{:opponent_force}}】成功！恢复了自由身！<br>特此表彰以下成员：<br>{{:players}}',
            'uniterebel_attacker_win_momentum': '<br/>我方已经拿下对方一半以上的据点了，坚守就是胜利啊～',
            'uniterebel_defence_disband': '某不知名的势力解散，对我方势力的本次反叛失败告终！',
            'uniterebel_defence_explanation': '<br>·占据对方一半以上的据点，我方倒计时停止，对方的倒计时即会启动。',
            'uniterebel_defence_lose': '防御失败',
            'uniterebel_defence_lose_content': '{{:opponent_force}}联合反叛成功，恢复了自由身！',
            'uniterebel_defence_retreat_answer': '{{:opponent_force}}偷袭我方势力，不料踢到铁板，落荒而逃！',
            'uniterebel_defence_win': '防御成功',
            'uniterebel_defence_win_content': '经过我方势力成员的不懈努力，成功击退了{{:opponent_force}}的联合反叛！',
            'uniterebel_defenceer_win_momentum': '<br/>总算夺回一半以上的据点了，死也要守住啊～',
            'uniterebel_fail': '不能联合反叛',
            'uniterebel_fail_forcerest': '主公~诸侯势力正在休整中，还不能反叛TA哦~',
            'uniterebel_num': '联合反叛进行中，已响应',
            'uniterebel_retreat_tip': '主公~只有发起联合反叛的势力主才能退兵哦~',
            'unlock_level': '需势力级别：{{:level}}',
            'until': '&nbsp;至 ',
            'update': '升级势力',
            'update_force': '升级势力',
            'update_grain': '升级消耗：',
            'update_only_owner': '主公~只有势力主才能升级势力哦~',
            'update_succ_weibo': '我在#三国来了#把势力【{{:name}}】升到了{{:level}}级！又向称霸三国迈近一步，亲们快来投奔我吧！',
            'update_tip': '主公，您确定要提升势力等级么？',
            'userDefinedBtn': '自定义',
            'usurp': '霸占',
            'usurp_assist_notice': '我方正在协助抵抗【{{:opponent_force}}】中 ({{:battle_schedule}})',
            'usurp_attack_disband': '我方势力声势浩大，吓得某不知名势力解散，本次霸占失败！',
            'usurp_attack_explanation': '<br>·占据对方全部据点，我方倒计时停止，对方的倒计时即会启动。',
            'usurp_attack_lose': '霸占失败',
            'usurp_attack_lose_content': '出师不利，我方势力霸占【{{:opponent_force}}】时败北而归。',
            'usurp_attack_terminated': '报~主公，战场上突然天降异象，大雾弥漫已经无法再战，我方已经收兵，还是择日再战吧~',
            'usurp_attack_win': '霸占成功',
            'usurp_attack_win_content': '经过浴血奋战，我方势力成功霸占了【{{:opponent_force}}】！现在TA是我方的太守势力啦~<br>特此表彰以下成员：<br>{{:players}}',
            'usurp_attacker_win_momentum': '<br/>我方已经拿下对方所有据点了，坚守就是胜利啊～',
            'usurp_battle_tip': '小贴士：对方倒计时结束则我方获胜！',
            'usurp_def_notice': '我方正在防守【{{:opponent_force}}】中 ({{:battle_schedule}})',
            'usurp_defence_disband': '某不知名的势力解散，对我方势力的本次霸占失败告终！',
            'usurp_defence_explanation': '<br>·守住我方一个以上据点，我方倒计时停止，对方的倒计时即会启动。',
            'usurp_defence_lose': '防御失败',
            'usurp_defence_lose_content': '防守失利，我方势力沦为了【{{:opponent_force}}】的太守势力了！',
            'usurp_defence_terminated': '报~主公，战场上突然天降异象，大雾弥漫已经无法再战，对方已经收兵，还是择日再战吧~',
            'usurp_defence_win': '防御成功',
            'usurp_defence_win_content': '经过我方势力成员的不懈努力，我方成功防守住了【{{:opponent_force}}】的霸占，毫发无伤！',
            'usurp_defenceer_win_momentum': '<br/>总算夺回一个据点了，死也要守住啊～',
            'usurp_description': '强行占领其它势力并征税，行军两小时后开始战斗，消耗军令',
            'usurp_fail': '不能霸占',
            'usurp_fail_forcerest': '主公~对方势力正在休整中，还不能霸占TA哦~',
            'usurp_preview_tip': '霸占时，优先扣除粮饷哦~',
            'usurp_tip': '主公~发起霸占需要用2个小时来行军准备，并扣除军令，确定要霸占这个势力吗？',
            'usurp_war_help': '号召',
            'usurp_war_help_subhead': '主公~请输入留言召集帮众：',
            'usurp_war_help_title': '召集帮众',
            'usurp_war_notice': '我方正在攻打【{{:opponent_force}}】中 ({{:battle_schedule}})',
            'usurp_war_tip': '主公~已向【{{:opponent_force}}】发起霸占了！<br><br>·我军需要2小时才能抵达【{{:opponent_force}}】。<br>·2小时后行军结束，霸占正式开始。<br>·敌我双方各拥有30分钟来夺取胜利。',
            'vice_chairman': '副势力主：',
            'view member': '查看成员',
            'view_battle_array': '查看阵容',
            'vm': '银币',
            'win_lodgment_with_defender': '恭喜主公～我军击败了{{:defendername}}，成功攻占据点【{{:lodgment}}】～',
            'win_lodgment_without_defender': '恭喜主公～我军成功攻占据点【{{:lodgment}}】',
        },
    };
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.Broadcast = w.Mojo.Object.extend({
        clsname: function () {
            return "com.Broadcast";
        },
        init: function (options) {
            this._super('com-broadcast', options);
            this.element().addClass('mojo-com-broadcast');
            this.element().append('<div class="icon"></div>');
            this._wrapper = $('<div class="wrapper"></div>').appendTo(this.element());
            var self = this;
            this._interval = w.setInterval(function () {
                self.sync();
            }, 300000);
            this._index = 0;
            this._run();
        },
        _run: function () {
            if (this._data == undefined || this._data == null || this._data.length == 0) {
                this._running = false;
                this.sync();
            } else {
                this._running = true;
                var self = this;
                if (this._index >= this._data.length) this._index = 0;
                this._current = this._data[this._index];
                var item = this._genItem(this._current);
                this["_display" + this._options.display](item);
            }
        },
        _display0: function (item) {
            var self = this;
            item.animate({
                left: -item.width(),
            }, {
                duration: (item.width() + self._wrapper.width()) * 40,
                complete: function () {
                    $(this).remove();
                    self._index = parseInt((self._index + 1) % self._data.length);
                    self._run();
                },
            });
        },
        _display1: function (item) {
            var self = this;
            item.animate({
                top: "-=" + self._wrapper.height(),
            }, {
                duration: 1000,
                complete: function () {
                    if ($(this).position().top + $(this).height() > self._wrapper.height()) {
                        setTimeout(function () {
                            self._display1(item);
                        }, 2000);
                    } else {
                        $(this).delay(3000).animate({
                            opacity: 0,
                        }, {
                            duration: 1000,
                            complete: function () {
                                $(this).remove();
                                self._index = parseInt((self._index + 1) % self._data.length);
                                self._run();
                            }
                        });
                    }
                },
            });
        },
        _genItem: function (data) {
            if (this._options.display == 0) {
                return $('<div class="item">' + data.content + '</div>').appendTo(this._wrapper).css('left', this._wrapper.width()).css('top', 0);
            }
            return $('<div class="item">' + data.content + '</div>').appendTo(this._wrapper).css('left', 0).css('top', this._wrapper.height());
        },
        _getDefaultOptions: function () {
            return {
                display: 1,
            };
        },
        sync: function () {
            var self = this;
            var data = Mojo.cache.get("broadcast");
            if (data != undefined) {
                self._data = data;
                if (!self._running) {
                    self._run();
                }
            } else {
                Mojo.ajax('/message/broadcast', {
                    start: 0,
                    count: 1,
                }, function (result) {
                    if (result.errorCode == 0) {
                        self._data = result.data;
                        Mojo.cache.set("broadcast", self._data, 300);
                        if (!self._running) {
                            self._run();
                        }
                    }
                });
            }
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.NeedBuyDialog = Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.NeedBuyDialog";
        },
        init: function (id, options) {
            this._super(id, options);
            this.element().addClass("mojo-com-needbuydialog");
            this._paragraph = undefined;
            this._goods = undefined;
            this._buyBtn = undefined;
            this._useBtn = undefined;
            this._nextRestoreTime = this._options.nextRestoreTime;
            this._allRestoreTime = (this._options.stamina - this._options.restoreCount - 1) * this._options.allRestoreTime + this._nextRestoreTime;
            this._handle = undefined;
            this._refreshParagraph();
            this._refreshGoods();
            this._addButtons();
            this._refreshRestoreStatus();
        },
        _refreshParagraph: function (flag) {
            var self = this;
            if (flag == true) {
                clearTimeout(self._handle);
                this._allRestoreTime = (this._options.stamina - this._options.restoreCount - 1) * this._options.allRestoreTime + this._nextRestoreTime;
                this._refreshRestoreStatus();
                return;
            }
            if (this._paragraph == undefined) {
                this._paragraph = $('<div class="paragraph"></div>').appendTo(this._content);
            }
            var html = this._options.needBuyTip + '<br/>';
            if (self._options.goods.goods_id == 'sp0011') {
                html = html + Mojo.utils.locale('force', 'current_chanllenge_get', {
                    now: self._options.restoreCount,
                    all: self._options.stamina
                }) + '<br/>';
            }
            if (this._allRestoreTime < 0) {
                html = html + this._options.nextRestoreText + Mojo.utils.locale('common', 'has reached the maximum') + '<br/>' + this._options.allRestoreText + Mojo.utils.locale('common', 'has reached the maximum') + '<br/>';
            } else {
                html = html + this._options.nextRestoreText + Mojo.utils.formatTime(this._nextRestoreTime) + '<br/>' + this._options.allRestoreText + Mojo.utils.formatTime(this._allRestoreTime) + '<br/>';
            }
            this._paragraph.html(html);
        },
        _refreshGoods: function () {
            var self = this;
            if (this._goods == undefined) {
                this._goods = $('<div class="goods"></div>').appendTo(this._content);
                $('<div class="card"></div>').append($('<img/>').attr('src', this._options.goods.goods_small_image)).append($('<div class="count"></div>').html(this._options.goods.count)).appendTo(this._goods);
                this._goods.append($('<div class="name"></div>').html(this._options.goods.goods_name)).append($('<div class="desc"></div>').html(this._options.goods.goods_description)).append((new Mojo.com.Price({
                    'rm': self._options.goods.goods_rm,
                    'vm': self._options.goods.goods_vm
                })).element());
            }
            self._goods.find('.count').html(self._options.goods.count);
            if (self._useBtn) {
                if (self._options.goods.count > 0 && self._options.restoreCount < self._options.stamina) {
                    self._useBtn.disable(false);
                } else {
                    self._useBtn.disable(true);
                }
            }
        },
        _addButtons: function () {
            var self = this;
            var disabled = true;
            if (self._options.goods.count > 0) {
                disabled = false;
            }
            this._useBtn = new Mojo.ui.Button(undefined, {
                text: self._options.useBtnText,
                disabled: disabled,
                click: function () {
                    self._useBtn.disable(true);
                    Mojo.ajax('/entity/Use', {
                        id: self._options.goods.id
                    }, function (result) {
                        if (self._options.goods.goods_id == 'sp0011') {
                            if (result.errorCode == 0) {
                                self._options.goods.count -= 1;
                                self._options.restoreCount += 1;
                                self._refreshParagraph(true);
                                self._refreshGoods();
                                if (self._options.goods.count > 0 && self._options.restoreCount < self._options.stamina) {
                                    self._useBtn.disable(false);
                                }
                                if (self._options.useBtnClick instanceof Function) {
                                    self._options.useBtnClick(self, result);
                                }
                                if (self._options.restoreCount == self._options.stamina) {
                                    self.close();
                                }
                            } else {
                                if (result.errorCode == 130060) {
                                    self._options.restoreCount = self._options.stamina;
                                    self._refreshParagraph(true);
                                }
                                Mojo.app.toast.show(result.errorMsg);
                            }
                        } else {
                            if (result.errorCode == 0) {
                                self._options.goods.count -= 1;
                                self._refreshGoods();
                                if (self._options.goods.count > 0) {
                                    self._useBtn.disable(false);
                                }
                                if (self._options.useBtnClick instanceof Function) {
                                    self._options.useBtnClick(self, result);
                                }
                            } else {
                                Mojo.app.toast.show(result.errorMsg);
                            }
                        }
                    }, function () {
                        self._useBtn.disable(false);
                    }, {
                        showWait: true
                    });
                }
            });
            this._useBtn.element().appendTo(this._footer);
            this._buyBtn = new Mojo.ui.Button(undefined, {
                text: self._options.buyBtnText,
                special: 'button-big-red',
                click: function () {
                    self.hide();
                    if (self._options.goods.goods_id == 'sp0011') {
                        Mojo.ajax('/force/checkPlayerBuyedRm', {
                            type: 'buyitem'
                        }, function (res2) {
                            if (res2.errorCode == 0) {
                                var price = self._options.goods.goods_rm;
                                var dlg = new Mojo.com.GoodsBatchBuyDlg({
                                    title: Mojo.utils.locale("mall", "buy_warning_title"),
                                    type: 'rm',
                                    rm: self._options.data.player_rm,
                                    price: parseInt(price),
                                    onBuy: function (count) {
                                        dlg.close();
                                        self.show();
                                        Mojo.ajax('/mall/Buy', {
                                            id: self._options.goods.goods_id,
                                            count: count
                                        }, function (result) {
                                            self._buyBtn.disable(false);
                                            if (result.errorCode == 0) {
                                                if (self._options.buyBtnClick instanceof Function) {
                                                    self._options.buyBtnClick(self, result);
                                                }
                                                self._options.goods.count = parseInt(self._options.goods.count) + parseInt(count);
                                                self._options.goods.id = result.data.entities[0].player_entity_id;
                                                self._options.data.player_rm = result.data.player.rm;
                                                self._refreshGoods();
                                                Mojo.app.toast.show(Mojo.utils.locale("common", "buy_something_success", {
                                                    name: self._options.goods.goods_name
                                                }));
                                            } else {
                                                if (result && result.errorCode == '10005') {
                                                    (new Mojo.com.BuyFailDialog({
                                                        message: result.errorMsg,
                                                        close: function () {
                                                            self.show();
                                                        },
                                                    })).open(true);
                                                } else if (result && result.errorCode == 130109) {
                                                    (new Mojo.com.CommonDialog(undefined, {
                                                        title: result.data ? result.data.title : Mojo.utils.locale('force', 'force_assistant_prompt_title'),
                                                        content: $('<div class="tip"></div>').html(result.errorMsg),
                                                        leftBtnText: Mojo.utils.locale('common', 'ok'),
                                                        leftBtnClick: function (that) {
                                                            that.close();
                                                        }
                                                    })).open(true);
                                                } else {
                                                    Mojo.app.toast.show(result.errorMsg);
                                                }
                                            }
                                        });
                                        self._buyBtn.disable(true);
                                    },
                                    onClose: function () {
                                        self.show();
                                    },
                                    deviceaware: true
                                });
                                dlg.open(true);
                            } else {
                                (new Mojo.com.CommonDialog(undefined, {
                                    title: res2.data ? res2.data.title : Mojo.utils.locale('force', 'force_assistant_prompt_title'),
                                    content: $('<div class="tip"></div>').html(res2.errorMsg),
                                    leftBtnText: Mojo.utils.locale('common', 'ok'),
                                    leftBtnClick: function (that) {
                                        that.close();
                                    },
                                    close: function () {
                                        self.close();
                                    }
                                })).open(true);
                            }
                        }, function () {}, {
                            showWait: true
                        });
                    } else {
                        var buyWarningDialog = new Mojo.ui.Dialog(undefined, {
                            title: Mojo.utils.locale('common', 'buy_warning_title'),
                            content: $('<div class="tip">' + Mojo.utils.locale('common', 'buy_warning_content') + '</div>'),
                            deviceaware: true
                        });
                        new Mojo.ui.Button(undefined, {
                            text: Mojo.utils.locale('common', 'sure_buy'),
                            special: "button-big-red",
                            click: function () {
                                buyWarningDialog.close();
                                self.show();
                                Mojo.ajax('/mall/Buy', {
                                    id: self._options.goods.goods_id
                                }, function (result) {
                                    self._buyBtn.disable(false);
                                    if (result.errorCode == 0) {
                                        if (self._options.buyBtnClick instanceof Function) {
                                            self._options.buyBtnClick(self, result);
                                        }
                                        self._options.goods.count = parseInt(self._options.goods.count) + 1;
                                        self._options.goods.id = result.data.entities[0].player_entity_id;
                                        self._refreshGoods();
                                        Mojo.app.toast.show(Mojo.utils.locale("common", "buy_something_success", {
                                            name: self._options.goods.goods_name
                                        }));
                                    } else {
                                        if (result && result.errorCode == '10005') {
                                            (new Mojo.com.BuyFailDialog({
                                                message: result.errorMsg,
                                                close: function () {
                                                    self.show();
                                                },
                                            })).open(true);
                                        } else {
                                            Mojo.app.toast.show(result.errorMsg);
                                        }
                                    }
                                });
                                self._buyBtn.disable(true);
                            }
                        }).element().appendTo(buyWarningDialog._footer);
                        new Mojo.ui.Button(undefined, {
                            text: Mojo.utils.locale('common', 'think_again'),
                            special: 'button-big-blue',
                            click: function () {
                                buyWarningDialog.close();
                                self.show();
                            }
                        }).element().appendTo(buyWarningDialog._footer);
                        buyWarningDialog.open(true);
                    }
                }
            });
            this._buyBtn.element().appendTo(this._footer);
        },
        _refreshRestoreStatus: function () {
            var self = this;
            if (this._options.stamina == this._options.restoreCount) {
                self._allRestoreTime = -1;
                self._refreshParagraph();
                return;
            }
            self._nextRestoreTime -= 1;
            self._allRestoreTime -= 1;
            if (self._nextRestoreTime < 0) {
                self._nextRestoreTime = self._options.allRestoreTime - 1;
                self._options.restoreCount = parseInt(self._options.restoreCount) + 1;
                if (self._allRestoreTime < 0) {
                    self._refreshParagraph();
                }
            }
            if (self._allRestoreTime >= 0) {
                self._refreshParagraph();
                self._handle = setTimeout(function () {
                    self._refreshRestoreStatus();
                }, 1000);
            }
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                goods: {},
                stamina: 0,
                restoreCount: 0,
                allRestoreText: "",
                allRestoreTime: 0,
                nextRestoreText: "",
                nextRestoreTime: 0,
                restoreText: "",
                needBuyTip: "",
                buyBtnText: Mojo.utils.locale('common', 'buy'),
                buyBtnClick: undefined,
                useBtnText: Mojo.utils.locale('common', 'use'),
                useBtnClick: undefined
            });
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.page = w.Mojo.page || {};
    w.Mojo.page.Force = w.Mojo.Object.extend({
        clsname: function () {
            return "page.Force";
        },
        _current: undefined,
        init: function (index) {
            var self = this;
            w.Mojo.page.Force.getController = function () {
                return self;
            };
            this._super(undefined, undefined);
            this.element().addClass('mojo-page');
            this._mojoajax = w.Mojo.ajax;
            w.Mojo.ajax = function (url, params, callback, onError, options) {
                self._mojoajax(url, params, function (response) {
                    if (response && response.errorCode === 130019) {
                        if (self._commonDlg != undefined) return;
                        (self._commonDlg = new Mojo.com.CommonDialog(undefined, {
                            title: Mojo.utils.locale('force', 'fail_to_do'),
                            content: $('<div class="paragraph"></div>').html(Mojo.utils.locale('force', 'cannot_do_it')),
                            leftBtnText: Mojo.utils.locale('common', 'close'),
                            leftBtnClick: function (that) {
                                Mojo.app.redirect('/home');
                            },
                            close: function () {
                                Mojo.app.redirect('/home');
                            }
                        })).open(true);
                    } else if (callback instanceof Function) {
                        callback(response);
                    }
                }, onError, options);
            };
            w.Mojo.ajax.baseUrl = this._mojoajax.baseUrl;
            this._addBroadcast();
            this._addProfile();
            $(document.body).append(this.element());
            this.sync(function () {
                self.switchTo(index);
            });
        },
        _addBroadcast: function () {
            this._broadcast = new Mojo.com.Broadcast();
            this.element().append(this._broadcast.element());
        },
        _addProfile: function () {
            var self = this;
            this._forceProfile = new Mojo.com.ForceBaseProfile({
                getController: function () {
                    return self;
                },
                profileUpdate: function (force, player) {
                    self._notifyComponet(force, player);
                }
            });
            this.element().append(this._forceProfile.element());
        },
        _notifyComponet: function (force, player) {
            for (var index in this.cache) {
                if (this.cache[index]._options.profileUpdated) {
                    this.cache[index]._options.profileUpdated(force, player);
                }
            }
        },
        routeTable: {
            0: "Mojo.com.ForceBase",
            1: "Mojo.com.ForceInternal",
            2: "Mojo.com.ForceWar",
            3: "Mojo.com.ForceExchange",
            4: "Mojo.com.ForceMember",
            5: "Mojo.com.ForceEvent",
            6: "Mojo.com.ForceRanking",
            7: "Mojo.com.ForceBossChallenge",
            8: "Mojo.com.ForceCity"
        },
        cache: {},
        getInstance: function (index, args) {
            var self = this;
            if (this.cache[index] == undefined) {
                this._create(index, args);
            } else {
                var ins = this.cache[index];
                if (args.refresh == 1) {
                    ins.element().remove();
                    this.cache[index] = undefined;
                    this._create(index, args);
                }
            }
            return this.cache[index];
        },
        _create: function (index, args) {
            var clsname = this.routeTable[index];
            var packages = clsname.split('.');
            var parent = w;
            var cls = undefined;
            for (var i = 0; i < packages.length; i++) {
                cls = parent[packages[i]];
                parent = cls;
            }
            var instance = new cls(args);
            instance.element().appendTo(this.element());
            this.cache[index] = instance;
            return instance;
        },
        switchToHome: function (args) {
            this.switchTo(0, args);
        },
        _defaultOptions: function () {
            return {
                refresh: 0,
            };
        },
        _sysOptions: function (index) {
            var self = this;
            return {
                getController: function () {
                    return self;
                },
                getComIndex: function () {
                    return index;
                }
            };
        },
        switchTo: function (index, args) {
            var self = this;
            var param = this._defaultOptions();
            $.extend(true, param, args || {});
            $.extend(true, param, this._sysOptions(index));
            var prev = this._current;
            var instance = this.getInstance(index, param);
            if (prev && instance) {
                prev.hide();
                if (prev.pause) {
                    prev.pause();
                }
            }
            if (instance) {
                this._current = instance;
                instance.show();
                if (instance.refreshData) {
                    instance.refreshData();
                }
            }
        },
        load: function () {
            Mojo.app.toast.show('', 10, true);
        },
        sync: function (callback) {
            this._forceProfile.sync(callback);
        },
        syncForce: function (callback) {
            this._forceProfile.syncForce(callback);
        },
        getProfile: function () {
            return this._forceProfile;
        },
        getData: function () {
            var self = this;
            var data = {
                force_info: self.getForceProfile(),
                player_info: self.getPlayerProfile()
            };
            return data;
        },
        getForceProfile: function () {
            return this._forceProfile._force;
        },
        getPlayerProfile: function () {
            return this._forceProfile._player;
        },
        updateForceProfile: function (force) {
            this._forceProfile._force = $.extend(true, this.getForceProfile(), force);
            this._forceProfile._refresh();
        },
        updatePlayerProfile: function (player) {
            this._forceProfile._player = $.extend(true, this.getPlayerProfile(), player);
            this._forceProfile._refresh();
        },
        diffPlayer: function (player) {
            this._forceProfile.updatePlayerDiff(player);
            this._forceProfile._refresh();
        },
        diffForce: function (force) {
            this._forceProfile.updateForceDiff(force);
            this._forceProfile._refresh();
        },
        debugable: function () {
            return Mojo.utils.debug.vars.page.force;
        },
        hideCurrent: function () {
            if (this._current) {
                this._current.hide();
            }
        },
        showCurrent: function () {
            if (this._current) {
                this._current.show();
            }
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceBase = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceBase";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-forcebase');
            this._addBase();
            this._addNotice();
            this._addChatMsg();
            this._addViewButton();
            this._addNavButton();
            this._refresh();
            this._player = Mojo.page.Force.getController().getPlayerProfile();
            this.force_text = '';
        },
        _addBase: function () {
            var self = this;
            self.nameclass = '';
            self.lastlbltext = '';
            var lbl1class = '';
            var forcetype = this._options.getController().getForceProfile().type;
            switch (parseInt(forcetype)) {
            case 2:
                self.nameclass = 'allyfriend';
                self.lastlbltext = 'ally_friend';
                break;
            case 3:
                self.nameclass = 'taxrate';
                self.lastlbltext = 'tax_rate';
                break;
            case 4:
                self.nameclass = 'precount';
                self.lastlbltext = 'prefect_count';
                break;
            default:
                self.nameclass = 'other';
            }
            var intro = $("<div class='intro'></div>").appendTo(this.element());
            this._fname = $("<div class='fname short'></div>");
            this._fnameicon = $("<div></div>");
            this._fnameicon.addClass(self.nameclass);
            this._fnametext = $("<div class='fnametext'></div>");
            var stateowner = this._options.getController().getPlayerProfile().state_owner;
            switch (parseInt(stateowner)) {
            case 1:
                lbl1class = 'stateowner';
                break;
            default:
                lbl1class = 'owner';
            }
            this._lbl1 = $('<div class="lbl"></div>');
            this._lbl3 = new Mojo.ui.Label(undefined, {
                classes: ['lbl', 'member'],
                text: self.locale('member_count_txt')
            });
            this._fgrain = new Mojo.ui.Label(undefined, {
                classes: ['fgrain'],
                text: self.locale('grain'),
            });
            intro.append(this._fname).append(this._lbl1).append(this._lbl3.element()).append(this._fgrain.element());
            this._fname.append(this._fnametext);
            this._restoreInterval = w.setInterval(function () {
                self._calcSpAndGrain();
            }, 1000);
            intro.click(function () {
                if (self._force == undefined) return;
                Mojo.track.onEvent('24_301');
                (this._fpdlg = new Mojo.com.ForceProfileDialog(self._force, self._player, {
                    getData: function () {
                        return self._force;
                    },
                    getController: function () {
                        return self._options.getController();
                    },
                })).open();
                this._fpdlg._scroll.refresh();
            });
        },
        _addNotice: function () {
            var self = this;
            self.noticearea = $('<div class="notice"></div>').appendTo(this.element());
            self._header = $('<div class="n-header"><span></span><marquee scrollamount="2"></marquee></div>').appendTo(self.noticearea).click(function () {
                self._onEditNotice();
            });
        },
        _addChatMsg: function () {
            var self = this;
            self._chat = $('<div class="n-content chat-channel"></div>').appendTo(self.noticearea);
            self._chatlist = $('<div class="list"></div>');
            self._chatscroll = new Mojo.ui.Scroll(undefined, self._chatlist, {
                direction: 2
            });
            self._chat.append(self._chatscroll.element());
            self._chat.click(function () {
                Mojo.app.redirect('/chat', {
                    selected: 1,
                    history: 1
                });
            });
            if (Mojo.supportTouch()) {
                self._chatlist.bind('touchstart', function (event) {
                    event.stopPropagation();
                });
            } else {
                self._chatlist.bind('mousedown', function (event) {
                    event.stopPropagation();
                });
            }
        },
        _onEditNotice: function () {
            var self = this;
            var editable = false;
            if (Mojo.utils.isNone(self._player)) {
                return;
            }
            if (this._player.force_rights.__all__ || this._player.force_rights.edit_announcement) {
                editable = true;
            }
            (new Mojo.com.ForceNoticeDialog(self._force, {
                getController: self._options.getController,
                editable: editable,
                showNotice: true,
                showBroadcastNotice: true,
                okBtnText: Mojo.utils.locale('force', 'notice_edit_btn')
            })).open();
        },
        _addChatButton: function () {
            var self = this;
            this._chatBtn = new Mojo.ui.Button(undefined, {
                text: self.locale('chat'),
                classes: ['chat'],
                click: function () {
                    Mojo.app.redirect('/chat', {
                        selected: 1,
                        history: 1
                    });
                },
            });
            this._chatBtn.element().appendTo(self.noticearea);
        },
        _addViewButton: function () {
            var self = this;
            this._viewBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'view'),
                classes: ['chat', 'view'],
                click: function () {
                    self._onEditNotice();
                },
            });
            this._viewBtn.element().appendTo(self.noticearea);
        },
        _addNavButton: function () {
            var self = this;
            var buttonArea = $('<div class="button-area"></div>').appendTo(this.element());
            this._everydaydo = $('<div class="everyday-do"></div>').appendTo(buttonArea);
            var btns = [{
                id: 'btn-internal',
                text: 'internal',
                index: 1,
                refresh: 1,
                eventCode: '24_303'
            }, {
                id: 'btn-challenge',
                text: 'force_boss_challenge',
                index: 7,
                refresh: 1,
                eventCode: '24_310'
            }, {
                id: 'btn-foreign',
                text: 'foreign',
                index: 2,
                refresh: 1,
                eventCode: '24_304'
            }, {
                id: 'btn-city',
                text: 'city',
                index: 8,
                refresh: 1,
                eventCode: '24_311'
            }, {
                id: 'btn-member',
                text: 'member',
                index: 4,
                refresh: 1,
                eventCode: '24_306'
            }, {
                id: 'btn-event',
                text: 'event',
                index: 5,
                refresh: 1,
                eventCode: '24_307'
            }, {
                id: 'btn-relation',
                text: 'relation',
                index: 6,
                refresh: 1,
                eventCode: '24_309'
            }, {
                id: 'btn-exchange',
                text: 'exchange',
                index: 3,
                refresh: 0,
                eventCode: '24_305'
            }, ];
            var ForceButton = [];
            self.TipsCount = [];
            var buffdlgs = self._options.getController().getPlayerProfile().messageRemindCount;
            $.each(btns, function (i, b) {
                ForceButton[i] = new Mojo.ui.Button(b.id, {
                    click: function () {
                        switch (i) {
                        case 0:
                            buffdlgs.task = 0;
                            break;
                        case 7:
                            buffdlgs.exchange = 0;
                            break;
                        case 5:
                            buffdlgs.event = 0;
                            break;
                        }
                        if (i == 6) {
                            var relationMinLevel = self._options.getController().getForceProfile().min_level_of_network;
                            var armylevel = self._options.getController().getForceProfile().level;
                            if (armylevel < relationMinLevel) {
                                new Mojo.com.CommonDialog(undefined, {
                                    title: Mojo.utils.locale('force', 'relation_join_no_dlg_title'),
                                    content: $('<div class="paragraph"></div>').html(Mojo.utils.locale('force', 'relation_join_no', {
                                        level: relationMinLevel
                                    })),
                                    leftBtnText: Mojo.utils.locale('common', 'close'),
                                    leftBtnClick: function (that) {
                                        that.close();
                                    }
                                }).open(true);
                            } else {
                                Mojo.app.redirect('/relation');
                            }
                        } else {
                            self.element().hide();
                            self._options.getController().switchTo(b.index, {
                                refresh: b.refresh,
                                showHeader: true
                            });
                        }
                        Mojo.track.onEvent(b.eventCode);
                    },
                    text: self.locale(b.text),
                    icon: true,
                    textWrap: true,
                    classes: b.isNew === true ? ['is_new'] : [],
                });
                var TipsClass = 'count';
                if (i == 2 || i == 6) {
                    TipsClass = 'battleStatus';
                }
                self.TipsCount[i] = $("<div></div>");
                self.TipsCount[i].addClass(TipsClass);
                self.TipsCount[i].hide();
                ForceButton[i].element().append(self.TipsCount[i]);
                self._everydaydo.append(ForceButton[i].element());
            });
        },
        _calcSpAndGrain: function () {
            var self = this;
            if (this._force.challenge < this._force.challenge_limit) {
                if (this._force.challenge_second < 0) {
                    this._force.challenge_second = this._force.cd_challange;
                    return;
                }
                this._force.challenge_second--;
                if (this._force.challenge_second == 0) {
                    this._force.challenge_second = this._force.cd_challange;
                    this._force.challenge++;
                    this._refresh();
                }
            }
            if (this._force.time_to_assign_grain > 0) {
                this._force.time_to_assign_grain--;
                if (this._force.time_to_assign_grain <= 0) {
                    w.clearInterval(self._restoreInterval);
                }
            }
        },
        _refresh: function () {},
        localeCat: function () {
            return 'force';
        },
        _updateInfo: function (force, player) {
            var self = this;
            self._force = force;
            self._player = player;
            self._force.challenge_second = force.time_to_restore_challenge;
            self._lbl1.empty();
            self._lbl1.addClass("mojo-ui-label");
            var pn = new Mojo.com.PlayerName(force.title_info ? force.title_info : {
                player_name: force.owner.name
            }, {
                title: true
            }).element().appendTo(self._lbl1);
            pn.find('.nobility_name').toggleClass().addClass('nobility_name highlight');
            pn.find('.position_icon').after(pn.find('.pn_title').remove());
            if (force.name.length > 3) {
                this._fname.removeClass('short').addClass('long');
            }
            self._lbl3.text(self.locale('member_count_txt') + force.member_num + "/" + force.member_num_limit);
            self._fgrain.text(self.locale('grain') + force.grain);
            self._fnameicon.removeClass(this.nameclass);
            if (this._lastlbl != undefined) {
                self._lastlbl.element().removeClass(this.nameclass);
            }
            switch (parseInt(force.type)) {
            case 2:
                self.lastlbltext = self.locale('ally_friend') + force.alliance_num + '/' + force.max_alliance;
                self.nameclass = 'allyfriend';
                self.force_text = Mojo.utils.locale('force', 'force_alliance');
                break;
            case 3:
                self.lastlbltext = self.locale('tax_rate') + force.tax_ratio + '%';
                self.nameclass = 'taxrate';
                self.force_text = Mojo.utils.locale('force', 'force_slave');
                break;
            case 4:
                self.lastlbltext = self.locale('prefect_count') + force.slave_num + '/' + force.max_slave;
                self.nameclass = 'precount';
                self.force_text = Mojo.utils.locale('force', 'force_master');
                break;
            default:
                self.nameclass = 'other';
                self.lastlbltext = "";
                self.force_text = Mojo.utils.locale('force', 'force_free');
            }
            self._fnameicon.addClass(this.nameclass);
            self._fnametext.html(self.force_text + force.name + '(' + Mojo.utils.locale('force', 'current_level', {
                level: force.level
            }) + ')');
            if (parseInt(force.protect_status) == 0) {
                if (self._lblpro != undefined) {
                    self._lblpro.element().remove();
                    self._lblpro = undefined;
                }
                if (self._lastlbl == undefined) {
                    self._lastlbl = new Mojo.ui.Label(undefined, {
                        classes: [self.nameclass],
                        text: self.locale(self.lastlbltext),
                    });
                    $('.intro').append(this._lastlbl.element());
                } else {
                    self._lastlbl.text(self.lastlbltext);
                    self._lastlbl.element().addClass(this.nameclass);
                }
            } else {
                w.clearInterval(this.proInterval);
                if (self._lastlbl != undefined) {
                    self._lastlbl.element().remove();
                    self._lastlbl = undefined;
                }
                if (this._lblpro == undefined) {
                    this._lblpro = new Mojo.ui.Label(undefined, {
                        classes: ['force-protected'],
                        text: self.locale(Mojo.utils.locale('force', 'force_protected')),
                    });
                    $('.intro').append(this._lblpro.element());
                }
                self.pro_time = parseInt(force.remain_protect_time);
                self.proInterval = w.setInterval(function () {
                    self._proTime();
                }, 1000);
            }
            self._header.find('span').html(self.locale('notice_title'));
            if (Mojo.utils.trim(force.announcement) == '') {
                self._header.find('marquee').html(self.locale('empty_notice_default_text'));
            } else {
                var arr = force.announcement.split('<br />');
                var announce = '';
                for (var i = 0; i < arr.length; i++) {
                    announce += arr[i];
                }
                self._header.find('marquee').html(announce);
            }
            self._chatlist.html('');
            var ch = 0;
            if (force.force_chat == undefined || force.force_chat.length == 0) {
                $('<div class="chatmsg"></div>').html(self.locale('default_chat_message')).appendTo(self._chatlist);
            } else {
                var msg = '';
                for (var i = 0; i < force.force_chat.length; i++) {
                    var data = force.force_chat[i];
                    var chatmsg = $('<div class="chatmsg"></div>');
                    new Mojo.com.PlayerName(data.title_info ? data.title_info : {
                        player_name: data.name
                    }).element().appendTo(chatmsg);
                    $('<div class="msg"></div>').html("：" + data.message).appendTo(chatmsg);
                    chatmsg.appendTo(self._chatlist);
                    if (chatmsg.height() > self._getR('chatMsgHeight')) ch++;
                }
                self._chatscroll.scrollTo(0, self._getR('chatMsgHeight') * ch);
                self._chatscroll.refresh();
            }
            var playerRemindCount = [player.messageRemindCount.task, 0, player.messageRemindCount.battle, 0, 0, player.messageRemindCount.event, player.messageRemindCount.relation, player.messageRemindCount.exchange];
            var armyRemindCount = player.messageRemindCount.army;
            $.each(playerRemindCount, function (i, p) {
                if (p > 0) {
                    if (i == 2) {
                        self.TipsCount[i].show();
                    } else if (i == 6) {
                        self.TipsCount[i].show();
                    } else {
                        var count = p;
                        if (count < 10) {
                            self.TipsCount[i].html(count);
                        } else {
                            self.TipsCount[i].html("N");
                        }
                        self.TipsCount[i].show();
                        if (i == 0) {
                            self._everydaydo.find(".is_new .icon").hide();
                        }
                    }
                } else {
                    if (i == 3) {
                        self._everydaydo.find(".is_new .icon").show();
                    }
                    self.TipsCount[i].hide();
                }
                if (i == 5 && armyRemindCount > 0) {
                    Mojo.gap.buffCut(armyRemindCount);
                    return false;
                }
            });
        },
        _proTime: function () {
            var self = this;
            if (self.pro_time > 0) {
                self._lblpro.text(Mojo.utils.locale('force', 'force_protected') + self._formatTime(this.pro_time));
                self.pro_time--;
            } else {
                w.clearInterval(this.proInterval);
                self._lblpro.text(Mojo.utils.locale('force', 'force_protected') + '0');
                self._lblpro.element().remove();
                self._lblpro = undefined;
                self._lastlbl = new Mojo.ui.Label(undefined, {
                    classes: [self.nameclass],
                    text: self.locale(self.lastlbltext),
                });
                $('.intro').append(this._lastlbl.element());
            }
        },
        _formatTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
        refreshData: function () {
            var self = this;
            var profile = self._options.getController().getProfile();
            if (profile != undefined) {
                self._updateInfo(profile._force, profile._player);
            }
        },
        _getR: function (key) {
            var r = {
                ipad: {
                    'chatMsgHeight': 30
                },
                iphone: {
                    'chatMsgHeight': 20
                }
            };
            if (Mojo.gap.device == 'ipad') {
                return r.ipad[key];
            } else {
                return r.iphone[key];
            }
        },
        _getDefaultOptions: function () {
            var self = this;
            return {
                profileUpdated: function (force, player) {
                    self._updateInfo(force, player);
                },
                btnClick: $.noop,
            };
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceNoticeDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceNoticeDialog";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-messagedlg');
            this.element().addClass('mojo-com-forcenoticedlg');
            this._paragraph = $("<div class='paragraph'></div>").appendTo(this._content);
            this._addContent();
            this._addHandleButtons();
        },
        _replaceBr: function (str) {
            if (Mojo.utils.isNone(str)) {
                return "";
            }
            return str.replace(/<.+?>/gm, '\r');
        },
        _replaceEnter: function (str) {
            if (Mojo.utils.isNone(str)) {
                return "";
            }
            return str.replace(/\n/gm, '\r\n');
        },
        _addContent: function () {
            var hintText = this._options.hintText;
            if (this._options.showNotice == true) {
                hintText = Mojo.utils.locale('force', 'notice_default_text1');
            }
            var text1 = this._data.announcement ? this._data.announcement : hintText;
            text1 = this._replaceBr(text1);
            this.oldText1 = this._replaceBr(this._data.announcement);
            this._textarea = this._createTextArea(text1, 1);
            if (this._options.showNotice != true) {
                this._textarea.css({
                    height: '200px'
                });
            }
            if (this._options.showNotice == true) {
                var text2 = this._data.notice ? this._data.notice : Mojo.utils.locale('force', 'notice_default_text2');
                text2 = this._replaceBr(text2);
                this.oldText2 = this._replaceBr(this._data.notice);
                this._textArea2 = this._createTextArea(text2, 2);
            }
        },
        _createTextArea: function (text, flag) {
            var self = this;
            var _titleTip = null;
            var _title = null;
            var _tip = null;
            var _textArea = null;
            if (self._options.subhead != undefined) {
                $('<span class="words-subhead"></span>').html(self._options.subhead).appendTo(self._paragraph);
            }
            _titleTip = $('<div class="title_tip"></div>').appendTo(this._paragraph);
            if (self._options.showNotice == true) {
                _title = $('<div class="title_left"></div>').appendTo(_titleTip);
                if (flag == 1) {
                    self._options.hintText1 = Mojo.utils.locale('force', 'notice_default_text1');
                    _title.html(Mojo.utils.locale('force', 'notice_default_title1'));
                } else {
                    self._options.hintText2 = Mojo.utils.locale('force', 'notice_default_text2');
                    _title.html(Mojo.utils.locale('force', 'notice_default_title2'));
                }
            }
            _tip = $('<div class="words-tip"></div>').html(self._options.maxlength).appendTo(_titleTip);
            var _border = $('<div class="border"></div>').addClass('force-notice').appendTo(this._paragraph);
            var _content = $('<form name="form" method="post" action=""><textarea name="textarea' + flag + '" class="textarea' + flag + '" maxlength="' + self._options.maxlength + '" id="message-content" cols="45" rows="5">' + text + '</textarea></form>').appendTo(_border);
            _textArea = this._content.find('.textarea' + flag).click(function () {
                this.selectionStart = 0;
                this.selectionEnd = this.value.length;
            });
            _textArea.bind("focus input propertychange", function () {
                var maxLength = $(this).attr('maxlength');
                var text = $(this).val();
                text = self._replaceEnter(text);
                var v = text.length;
                if (v <= maxLength) {
                    _tip.html(maxLength - v);
                    return true;
                } else {
                    $(this).val(text.substring(0, maxLength));
                    return false;
                }
            });
            _textArea.trigger("input");
            if (this._options.editable == false) {
                _textArea.attr('disabled', 'disabled');
            }
            if (self._options.beforeend != undefined) {
                $('<span class="words-subhead"></span>').html(self._options.beforeend).appendTo(self._paragraph);
            }
            return _textArea;
        },
        _checkCount: function (v) {
            var self = this;
            var v = parseInt(v.length);
            if (v <= self._options.maxlength) {}
        },
        _addHandleButtons: function () {
            var self = this;
            var editBtn = new Mojo.ui.Button('ok-btn', {
                special: 'button-big-red',
                text: self._options.okBtnText,
                click: function () {
                    var content1 = self._textarea.attr('value');
                    if (content1 == self._options.hintText && !self._options.hasDefaultMsg) {
                        content1 = '';
                    }
                    if (Mojo.utils.trim(content1) == '') {
                        Mojo.app.toast.show(Mojo.utils.locale('common', 'no content'));
                        return;
                    }
                    var content2;
                    if (self._options.showNotice == true) {
                        content2 = self._textArea2.attr('value');
                        if (content2 == self._options.hintText && !self._options.hasDefaultMsg) {
                            content2 = '';
                        }
                        if (Mojo.utils.trim(content2) == '') {
                            Mojo.app.toast.show(Mojo.utils.locale('common', 'no content'));
                            return;
                        }
                    }
                    if (self._options.okBtnClick instanceof Function) {
                        self._options.okBtnClick(self);
                    } else {
                        if (self.oldText1 != content1 || self.oldText2 != content2) {
                            Mojo.ajax('/force/editAnnouncement', {
                                'announcement': content1,
                                'notice': content2
                            }, function (response) {
                                if (response.errorCode == 0) {
                                    Mojo.track.onEvent('24_302');
                                    self._options.getController().sync();
                                    self.close();
                                } else if (response.errorCode == 130039) {
                                    Mojo.app.toast.show(Mojo.utils.locale('force', 'edit_force_fobbiden'));
                                }
                            }, function (e) {}, {
                                showWait: true
                            });
                        }
                        self.close();
                    }
                },
                disableClick: function () {
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'edit_force_fobbiden'));
                },
            });
            if (this._options.editable == false) {
                editBtn.disable(true);
            }
            this._footer.append(editBtn.element());
            if (self._options.showBroadcastNotice) {
                this._footer.append((new Mojo.ui.Button('close-btn', {
                    text: Mojo.utils.locale('force', 'broadcastNotice'),
                    disabled: parseInt(Mojo.page.Force.getController().getPlayerProfile().position_id) > 2,
                    disableClick: function () {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'only_ownerandvice_broadcast'));
                    },
                    click: function () {
                        self.close();
                        var broadcastDlg = new Mojo.com.MsgInputDialog({
                            title: Mojo.utils.locale('force', 'forcebroadcastNotice'),
                            defaultText: Mojo.utils.locale('force', 'broadcastNoticetip'),
                            leftBtnText: Mojo.utils.locale('ui', 'Send'),
                            leftBtnClick: function (value, that) {
                                if (value == "") {
                                    Mojo.app.toast.show(Mojo.utils.locale('common', 'no content'));
                                    return;
                                }
                                that.close();
                                Mojo.ajax('/force/memberNotice', {
                                    content: value,
                                }, function (result) {
                                    if (result.errorCode == 0) {
                                        Mojo.app.toast.show(Mojo.utils.locale('force', 'broadcastNoticeSucess'));
                                    } else {
                                        Mojo.app.toast.show(result.errorMsg);
                                    }
                                });
                            },
                            close: function () {
                                self.close();
                            },
                        });
                        broadcastDlg.open();
                        setTimeout(function () {
                            Mojo.utils.center(broadcastDlg.element());
                        }, 10)
                    },
                })).element());
            } else {
                this._footer.append((new Mojo.ui.Button('close-btn', {
                    text: Mojo.utils.locale('ui', 'Close'),
                    click: function () {
                        if (self._options.closeBtnClick instanceof Function) {
                            self._options.closeBtnClick(self);
                        } else {
                            self.close();
                        }
                    },
                })).element());
            }
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('force', 'notice'),
                subhead: undefined,
                maxlength: 50,
                okBtnText: Mojo.utils.locale('common', 'ok'),
                okBtnClick: undefined,
                showNotice: false,
                hasDefaultMsg: false,
                hintText: '',
                id: '',
                callback: $.noop,
                deviceaware: true,
                close: function () {
                    window.scrollTo(0, 0);
                }
            });
        },
        getContent: function () {
            var content = this._textarea.val();
            if (content == this._options.hintText && !this._options.hasDefaultMsg) {
                return "";
            }
            if (Mojo.utils.trim(content) == '') {
                return "";
            }
            return content;
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceInternal = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceInternal";
        },
        init: function (options) {
            this._super('com-force-internal', options);
            this.element().addClass('mojo-com-forceinternal');
            this._playerProfile = this._options.getController().getPlayerProfile();
            this._addTabs();
            this._addButton();
            var self = this;
            Mojo.page.Force.getController().getProfile().addSyncHandle(function (data) {
                self._setRefreshTimes(data);
            });
        },
        _createInternalPanel: function (selected) {
            this._createList(selected);
            this._addHeader();
            this._addAssistantHeader();
            this._showBuffdlg();
            this._inRefreshing = false;
        },
        _createForceChallengePanel: function (selected) {
            var self = this;
            this._challengePanel = new Mojo.com.ForceChallengePanel({
                getController: self._options.getController
            });
            this._tabs.setPanel(selected, this._challengePanel);
        },
        _addTabs: function () {
            var self = this;
            this._panels = [{
                type: 1,
                label: 'internal'
            }, ];
            this._tabs = new Mojo.ui.Tabs('tabs-internal', {
                selectionChange: function (i) {
                    if (self._challengePanel) {
                        self._challengePanel.pause();
                    }
                    if (i == 0) {
                        self._createInternalPanel(i);
                    } else if (i == 1) {
                        self._createForceChallengePanel(i);
                    }
                },
            });
            $.each(this._panels, function (i, p) {
                self._tabs.addTab(self.locale(p.label));
            });
            this.element().append(this._tabs.element());
            this._tabs.element().find('.panel').addClass('box-outter');
            if (Mojo.app.request('index') == 1)
                this._selected = Mojo.app.request('selected');
            if (Mojo.utils.isNone(this._selected) == true) {
                this._selected = 0;
            } else {
                this._selected = parseInt(this._selected);
            }
            this._tabs._select(this._selected);
        },
        _addHeader: function () {
            this._header = $("<div class='page-tips'></div>");
            this._header.appendTo(this._list._header);
        },
        _addAssistantHeader: function () {
            var self = this;
            var forceAssistant = $("<div  class = 'assistant-header'></div>");
            var showBtn = new Mojo.ui.Button(undefined, {
                classes: ['assistant-show-btn'],
                text: Mojo.utils.locale('force', 'force_view'),
                click: function () {
                    self._showAssistantClick();
                }
            });
            showBtn.element().appendTo(forceAssistant);
            forceAssistant.appendTo(this._list._header);
        },
        _setAssistantStatusStr: function (status) {
            this._setAssistantStatusHtml(this._getAssistantStatusStr(status));
        },
        _getAssistantStatusStr: function (status) {
            switch (status) {
            case '0':
                return Mojo.utils.locale('force', 'force_assistant_title1');
            case '1':
                return Mojo.utils.locale('force', 'force_assistant_title2');
            case '2':
                return Mojo.utils.locale('force', 'force_assistant_title3');
            }
        },
        _setAssistantStatusHtml: function (dom) {
            var label = this._list._header.find('.assistant-header .label');
            if (label && label.length > 0) {
                label.html(dom);
            } else {
                $("<div class = 'label'></div>").html(dom).appendTo(this._list._header.find('.assistant-header'));
            }
        },
        _showAssistantClick: function () {
            var self = this;
            var flag = self.forceInternalListData.is_assist;
            var is_assist_open = self.forceInternalListData.is_assist_open;
            if (flag == 1) {
                self._showAssistantContent = $('<div class="paragraph wordBreak"></div>');
                self._scrollAssistant = new Mojo.ui.Scroll(undefined, self._showAssistantContent, {
                    direction: 2
                });
                self.assistantDialog = new Mojo.com.CommonDialog('com-assistant-dialog', {
                    title: Mojo.utils.locale('force', 'force_assistant_title'),
                    content: self._scrollAssistant.element(),
                    leftBtnText: is_assist_open == 1 ? Mojo.utils.locale('force', 'force_assistant_end') : Mojo.utils.locale('force', 'force_assistant_start'),
                    leftBtnClick: function (that) {
                        if (Mojo.app.data.tasks_finish == 1) {
                            self.assistantRunning = 0;
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'force_assistant_alert1'));
                        } else {
                            if (is_assist_open == 1) {
                                self._endShowAssistant(function () {
                                    Mojo.app.data.is_assist_finish = self.forceInternalListData.is_assist_finish = 1;
                                    that.leftButton.element().html(Mojo.utils.locale('force', 'force_assistant_start'));
                                    self._showAssistantContent.append(Mojo.utils.locale('force', 'force_assistant_auto_end3'));
                                    self._scrollAssistant.scrollTo(0, 9999);
                                    self._scrollAssistant.refresh();
                                });
                            } else {
                                self._startShowAssistant(function () {
                                    Mojo.app.data.is_assist_finish = self.forceInternalListData.is_assist_finish = 0;
                                    that.leftButton.element().html(Mojo.utils.locale('force', 'force_assistant_end'));
                                    self._showAssistantContent.html('');
                                    self._scrollAssistant.refresh();
                                });
                            }
                        }
                    },
                    close: function () {
                        if (self.assistantRunning == 1) {
                            self._createInternalPanel(0);
                        }
                        window.clearInterval(self.intervalAssistantLog);
                    }
                });
                var footer = $('<div class="content-footer"></div>');
                footer.appendTo(self.assistantDialog._content);
                var chooseBtn = new Mojo.ui.Button(undefined, {
                    text: '',
                    classes: ['choose-button'],
                    special: 'combo',
                    click: function () {
                        self._ajaxForceTaskAutoSell(function (result) {
                            var btnEle = chooseBtn.element();
                            var cls = "combo-selected-class";
                            if (result.data.auto_sell == 1) {
                                self.forceInternalListData.auto_sell = 1;
                                btnEle.addClass(cls);
                            } else {
                                self.forceInternalListData.auto_sell = 0;
                                btnEle.removeClass(cls);
                            }
                        });
                    }
                });
                chooseBtn.element().appendTo(footer);
                if ("" + self.forceInternalListData.auto_sell == "1") {
                    chooseBtn.element().addClass("combo-selected-class");
                }
                $('<div class="label"></div>').html(Mojo.utils.locale('force', 'force_autosellcard')).appendTo(footer);
                self.assistantDialog.open();
                if (self.forceInternalListData.is_assist_open == 0) {
                    self._showAssistantContent.html(Mojo.utils.locale('force', 'force_assistant_content1'));
                    self._scrollAssistant.refresh();
                } else {
                    self._showAssistant();
                }
            } else {
                new Mojo.com.CommonDialog(undefined, {
                    title: Mojo.utils.locale('force', 'force_assistant_prompt_title'),
                    content: $('<div class="paragraph wordBreak"></div>').html(Mojo.utils.locale('force', 'force_assistant_content2')),
                    leftBtnText: Mojo.utils.locale('force', 'force_assistant_buyCard'),
                    leftBtnClick: function (that) {
                        Mojo.app.redirect('/newmall', {
                            selected: 5
                        });
                        that.close();
                    },
                    rightBtnText: Mojo.utils.locale('common', 'close'),
                    rightBtnClick: function (that) {
                        that.close();
                    }
                }).open();
            }
        },
        _ajaxForceTaskAutoSell: function (callback) {
            Mojo.ajax('/assist/forceTaskAutoSell', {}, function (result) {
                if (result.errorCode == 0) {
                    if (callback && callback instanceof Function) {
                        callback(result);
                    }
                } else {
                    Mojo.app.toast.show(result.errorMsg);
                }
            }, function () {}, {
                showWait: true
            });
        },
        _startShowAssistant: function (callback) {
            var self = this;
            Mojo.ajax('/assist/forceTask', {}, function (result) {
                if (result.errorCode == 0) {
                    if (callback) callback();
                    if (result.data.finish == 1) {
                        self._setAssistantStatusStr('2');
                        self.assistantDialog.leftButton.element().html(Mojo.utils.locale('force', 'force_assistant_start'));
                    } else {
                        self._setAssistantStatusStr('1');
                        self.assistantDialog.leftButton.element().html(Mojo.utils.locale('force', 'force_assistant_end'));
                        self._intervalAssistantLog();
                    }
                    self._showAssistantContentFn(result.data);
                } else {
                    Mojo.app.toast.show(result.errorMsg);
                }
            }, function () {}, {
                showWait: true
            });
        },
        _showAssistant: function () {
            var self = this;
            Mojo.ajax('/assist/GetForceTaskLog', {}, function (result) {
                if (result.errorCode == 0) {
                    if (result.data.finish == 1) {
                        self._setAssistantStatusStr('2');
                        self.assistantDialog.leftButton.element().html(Mojo.utils.locale('force', 'force_assistant_start'));
                    } else {
                        self._setAssistantStatusStr('1');
                        self.assistantDialog.leftButton.element().html(Mojo.utils.locale('force', 'force_assistant_end'));
                        self._intervalAssistantLog();
                    }
                    self._showAssistantContentFn(result.data);
                } else {
                    Mojo.app.toast.show(result.errorMsg);
                }
            }, function () {}, {
                showWait: true
            });
        },
        _intervalAssistantLog: function () {
            var self = this;
            self.intervalAssistantLog = window.setInterval(function () {
                if (self.isFinish == 1) {
                    window.clearInterval(self.intervalAssistantLog);
                    return;
                }
                Mojo.ajax('/assist/GetForceTaskLog', {}, function (result) {
                    if (result.errorCode == 0) {
                        if (result.data.finish == 1) {
                            self._setAssistantStatusStr('2');
                            self.assistantDialog.leftButton.element().html(Mojo.utils.locale('force', 'force_assistant_start'));
                            window.clearInterval(self.intervalAssistantLog);
                        } else {
                            self._setAssistantStatusStr('1');
                            self.assistantDialog.leftButton.element().html(Mojo.utils.locale('force', 'force_assistant_end'));
                        }
                        self._showAssistantContent.html('');
                        self._showAssistantContentFn(result.data);
                    } else {
                        window.clearInterval(self.intervalAssistantLog);
                        Mojo.app.toast.show(result.errorMsg);
                    }
                }, function () {});
            }, 36000);
        },
        _endShowAssistant: function (callback) {
            var self = this;
            Mojo.ajax('/assist/intermitForceTask', {}, function (result) {
                if (result.errorCode == 0) {
                    self._setAssistantStatusStr('2');
                    if (callback) callback();
                } else {
                    Mojo.app.toast.show(result.errorMsg);
                }
            }, function () {}, {
                showWait: true
            });
        },
        _showAssistantContentFn: function (data) {
            var self = this;

            function formatSecTime(sec) {
                var str = '';
                var date = new Date(sec * 1000);
                var dd = date.getDate();
                var h = date.getHours() + "";
                var min = date.getMinutes() + "";
                var _sec = date.getSeconds() + "";
                if (min.length < 2)
                    min = "0" + min;
                if (_sec.length < 2)
                    _sec = "0" + _sec;
                str = dd + Mojo.utils.locale('common', 'dday') + h + ":" + min + ':' + _sec;
                return str;
            }
            var htmls = [];
            var d = data.log;
            self.isFinish = data.finish != undefined ? data.finish : self.isFinish;
            self.assistantDialog._options.leftBtnClick = function (that) {
                if (Mojo.app.data.tasks_finish == 1) {
                    self.assistantRunning = 0;
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'force_assistant_alert1'));
                } else {
                    if (self.isFinish == 0) {
                        self._endShowAssistant(function () {
                            self.isFinish = 1;
                            Mojo.app.data.is_assist_finish = self.forceInternalListData.is_assist_finish = 1;
                            that.leftButton.element().html(Mojo.utils.locale('force', 'force_assistant_start'));
                            self._showAssistantContent.append(Mojo.utils.locale('force', 'force_assistant_auto_end3'));
                            self._scrollAssistant.scrollTo(0, 9999);
                            self._scrollAssistant.refresh();
                        });
                    } else {
                        self._startShowAssistant(function () {
                            self.isFinish = 0;
                            Mojo.app.data.is_assist_finish = self.forceInternalListData.is_assist_finish = 0;
                            that.leftButton.element().html(Mojo.utils.locale('force', 'force_assistant_end'));
                            self._showAssistantContent.html('');
                            self._scrollAssistant.refresh();
                        });
                    }
                }
            };
            for (var i = 0; i < d.length; i++) {
                var ele = d[i];
                var status = ele.status;
                var time = formatSecTime(ele.time);
                var task_name = ele.task_name;
                var percent = ele.percent;
                var _div = '';
                var reward = ele.reward;
                switch ('' + status) {
                case '1':
                    _div = Mojo.utils.locale('force', 'force_assistant_auto_start');
                    break;
                case '2':
                    self.isFinish = 1;
                    _div = Mojo.utils.locale('force', 'force_assistant_auto_end2');
                    break;
                case '3':
                    self.assistantRunning = 0;
                    _div = Mojo.utils.locale('force', 'force_assistant_auto_end3');
                    break;
                case '4':
                    var grain = reward.grain;
                    _div = Mojo.utils.locale('force', 'force_assistant_log2', {
                        time: time,
                        gets: grain
                    });
                    break;
                case '5':
                    self.assistantRunning = 1;
                    var autoSell = reward.auto_sell;
                    if (autoSell) {
                        var vm = autoSell.vm;
                        var name = autoSell.name;
                        var count = autoSell.count;
                        var sellCards = name + "×" + count;
                        _div = Mojo.utils.locale('force', 'auto_sell_log', {
                            time: time,
                            sellCards: sellCards,
                            vm: vm
                        });
                    } else {
                        var contribute = reward.contribute;
                        var grain = reward.grain;
                        var vm = reward.vm;
                        var entity = reward.entity;
                        var gets = [];
                        if (contribute) {
                            gets.push(Mojo.utils.locale('force', 'offer1') + '×' + contribute);
                        }
                        if (grain) {
                            gets.push(Mojo.utils.locale('force', 'force_boss_challenge_final_win_grain') + '×' + grain);
                        }
                        if (vm) {
                            gets.push(Mojo.utils.locale('force', 'vm') + '×' + vm);
                        }
                        if (entity) {
                            gets.push(entity + '×' + 1);
                        }
                        _div = Mojo.utils.locale('force', 'force_assistant_log1', {
                            time: time,
                            task_name: task_name,
                            percent: percent,
                            gets: gets.join('，')
                        });
                    }
                    break;
                case '6':
                    _div = Mojo.utils.locale('force', 'force_assistant_auto_end');
                    break;
                case '7':
                    _div = Mojo.utils.locale('force', 'force_assistant_content4');
                    break;
                default:
                    self._showAssistantContent.html(Mojo.utils.locale('force', 'force_assistant_content1'));
                    break;
                }
                htmls.push(_div);
            }
            if (htmls.length > 0) {
                self._showAssistantContent.append(htmls.join(''));
            }
            self._scrollAssistant.scrollTo(0, 9999);
            self._scrollAssistant.refresh();
        },
        _addBuffHeader: function (data) {
            var self = this;
            if (data.tips.length == 1) {
                self._header.html(data.tips[0]);
            } else {
                self._buffheader = $('<marquee scrollamount=2 behavior=scroll></marquee>').appendTo(self._header);
                var datatips = '';
                $.each(data.tips, function (i, t) {
                    if (i == data.tips.length - 1) {
                        datatips += t;
                        return false;
                    }
                    datatips += t + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                });
                self._buffheader.html(datatips);
            }
        },
        _createList: function (selected) {
            var self = this;
            this._list = new Mojo.com.ForceInternalList({
                afterDoTask: function (data, result) {
                    self._options.getController().updateForceProfile(data.force);
                    self._options.getController().updatePlayerProfile(data.player);
                },
                callback: function (data) {
                    self.forceInternalListData = data;
                    Mojo.app.data.is_assist_finish = self.forceInternalListData.is_assist_finish;
                    Mojo.app.data.tasks_finish = self.forceInternalListData.tasks_finish;
                    if (self.forceInternalListData.is_assist == '0') {
                        self._setAssistantStatusStr('0');
                    } else if (self.forceInternalListData.is_assist == '1') {
                        if (self.forceInternalListData.is_assist_open == '1' && self.forceInternalListData.is_assist_finish == '0') {
                            self._setAssistantStatusStr('1');
                        } else if (self.forceInternalListData.is_assist_open == '0' || self.forceInternalListData.is_assist_finish == '1') {
                            self._setAssistantStatusStr('2');
                        }
                    }
                    self._addRefreshButton();
                    if (data.tips.length != 0) {
                        self._addBuffHeader(data);
                    } else {
                        self._header.html(Mojo.utils.locale('force', 'refresh_text'));
                    }
                    self._setRefreshTimes(data);
                },
            });
            this._tabs.setPanel(selected, this._list);
        },
        _setRefreshTimes: function (data) {
            if (!this.forceInternalListData) {
                this.forceInternalListData = {};
            }
            $('.internal-accept-btn').find('.count').remove();
            this.forceInternalListData.can_accepts = data.can_accepts;
            if (parseInt(data.can_accepts) > 0) {
                $('<div class="count"></div>').html(data.can_accepts).appendTo(this._acceptBtn.element());
            }
        },
        _addButton: function () {
            var self = this;
            this._acceptBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('force', 'accept_refresh'),
                click: function () {
                    Mojo.ajax('/force/refreshes', {}, function (result) {
                        if (result.errorCode == 0) {
                            self._setRefreshTimes(result.data);
                            self._acceptRefresh(result.data);
                        } else {
                            Mojo.app.toast.show(result.errorMsg);
                        }
                    });
                },
                disableClick: function () {
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'cannot_refrsh_internal'));
                },
                classes: ['force-back-btn internal-accept-btn'],
            });
            this._acceptBtn.element().appendTo(this.element());
            this._backBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'back'),
                click: function () {
                    if (self._challengePanel) {
                        self._challengePanel.pause();
                    }
                    self.element().hide();
                    self._options.getController().switchToHome();
                },
                classes: ['force-back-btn'],
            });
            this._backBtn.element().appendTo(this.element());
        },
        _acceptRefresh: function (data) {
            var self = this;
            Mojo.app.data.tasks_finish = data.tasks_finish;
            if (parseInt(data.refresh_num) < 1) {
                new Mojo.com.CommonDialog(undefined, {
                    title: Mojo.utils.locale('force', 'refresh_internal_mission'),
                    content: $("<div class='paragraph'>" + Mojo.utils.locale('force', 'refresh_info8') + "<span class = 'refresh-msg-tip'>" + Mojo.utils.locale('force', 'refresh_info7') + "</span>" + "</div>"),
                    rightBtnText: Mojo.utils.locale('common', 'cancel'),
                    rightBtnClick: function (that) {
                        that.close();
                    }
                }).open();
                return;
            }
            var msg = $("<div class='msgContent paragraph'></div>").html(Mojo.utils.locale('force', 'refresh_info5'));
            if (data && data.titles) {
                var i = 0;
                for (var index in data.titles) {
                    var title_info = data.titles[index];
                    if (i > 0) {
                        msg.append('，');
                    }
                    msg.append(new Mojo.com.PlayerName(title_info ? title_info : {
                        player_name: data.refresh_player_name
                    }).element());
                    msg.append(self._formateTime(data.titles[index].create_time));
                    i++;
                }
            }
            msg.append(Mojo.utils.locale('force', 'refresh_info6', {
                totaltime: data.refresh_num,
                remaintime: data.can_accepts
            })).append($("<div class='refresh-msg-tip'></div>").html(Mojo.utils.locale('force', 'refresh_info7')));
            var refreshdlg = new Mojo.com.CommonDialog('refresh-internal-dlg', {
                title: Mojo.utils.locale('force', 'refresh_internal_mission'),
                content: msg,
                leftBtnText: Mojo.utils.locale('common', 'ok'),
                leftBtnClick: function (that) {
                    if (Mojo.app.data.tasks_finish == 0) {
                        var acceptRefreshTask_time = Mojo.app.getStorage('acceptRefreshTask-time');
                        if (acceptRefreshTask_time) {
                            var _nowTime = new Date().getTime();
                            var tmp = _nowTime - acceptRefreshTask_time;
                            tmp = tmp / 1000;
                            tmp = tmp / 60;
                            if (tmp < 1) {
                                Mojo.app.toast.show('您刚刚已接受刷新，还是先做做内政吧~');
                                return;
                            }
                        }
                        that.close();
                        new Mojo.com.CommonDialog(undefined, {
                            title: Mojo.utils.locale('force', 'refresh_internal_mission'),
                            content: $("<div class='paragraph'></div>").html(Mojo.utils.locale('force', 'force_assistant_content3')),
                            leftBtnText: Mojo.utils.locale('common', 'ok'),
                            rightBtnText: Mojo.utils.locale('common', 'cancel'),
                            leftBtnClick: function (that) {
                                Mojo.ajax('/force/acceptRefreshTask', {}, function (result) {
                                    if (result.errorCode == 0) {
                                        var nowTime = new Date().getTime();
                                        Mojo.app.saveStorage('acceptRefreshTask-time', nowTime);
                                        Mojo.app.data.is_assist_finish = 1;
                                        if (self.forceInternalListData.is_assist == '1') {
                                            self._setAssistantStatusStr('2');
                                        }
                                        Mojo.track.onEvent('24_602');
                                        self._list.refresh(result.data);
                                        if (parseInt(self.forceInternalListData.can_accepts) > 0) {
                                            self.forceInternalListData.can_accepts = self.forceInternalListData.can_accepts - 1;
                                            self._setRefreshTimes(self.forceInternalListData);
                                        }
                                    } else {
                                        Mojo.app.toast.show(result.errorMsg);
                                    }
                                });
                                that.close();
                            },
                            rightBtnClick: function (that) {
                                that.close();
                            }
                        }).open();
                    } else {
                        that.close();
                        Mojo.ajax('/force/acceptRefreshTask', {}, function (result) {
                            if (result.errorCode == 0) {
                                Mojo.app.data.tasks_finish = 0;
                                Mojo.track.onEvent('24_602');
                                self._list.refresh(result.data);
                                if (parseInt(self.forceInternalListData.can_accepts) > 0) {
                                    self.forceInternalListData.can_accepts = self.forceInternalListData.can_accepts - 1;
                                    self._setRefreshTimes(self.forceInternalListData);
                                }
                            } else {
                                Mojo.app.toast.show(result.errorMsg);
                            }
                        });
                    }
                },
                leftBtnDisabled: parseInt(data.can_accepts) < 1,
                leftBtnDisabledClick: function () {
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'cannot_refrsh_internal'));
                },
                rightBtnText: Mojo.utils.locale('common', 'close'),
                rightBtnClick: function (that) {
                    that.close();
                },
            });
            refreshdlg.open();
        },
        _formateTime: function (timeArr) {
            var self = this;
            if (!timeArr || timeArr.length <= 0) {
                return;
            }
            var str = '';
            for (var index in timeArr) {
                var h = parseInt(timeArr[index] / 3600);
                var m = parseInt((timeArr[index] % 3600) / 60);
                if (index == 0) {
                    str += Mojo.utils.locale('force', 'refreshTime1', {
                        hour: h,
                        minutes: m
                    });
                } else {
                    str += '、' + Mojo.utils.locale('force', 'refreshTime2', {
                        hour: h,
                        minutes: m
                    });
                }
            }
            return str;
        },
        _addRefreshButton: function () {
            var self = this;
            var refreshTxt = Mojo.utils.locale('force', 'refresh_internal_mission');
            self.refreshBtn = new Mojo.ui.Button(undefined, {
                text: refreshTxt,
                classes: ['more'],
                click: function () {
                    Mojo.ajax('/force/refreshTaskPreview', {}, function (result) {
                        if (result.errorCode == 0) {
                            self._showRefreshDialog(result.data);
                        } else {
                            Mojo.app.toast.show(result.errorMsg);
                        }
                    }, function () {}, {
                        showWait: true
                    });
                },
                disableClick: function () {
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'only_official_can_refresh'));
                },
            });
            if (!(this._playerProfile.force_rights.__all__ || this._playerProfile.force_rights.refresh_task)) {
                self.refreshBtn.disable(true);
            }
            self.refreshBtn.element().appendTo(self._list._list).show();
            this._list.resize();
        },
        _showRefreshDialog: function (data) {
            var self = this;
            var refreshdlg = new Mojo.com.HandleDialog({
                title: Mojo.utils.locale('force', 'refresh_internal_mission'),
                message: '',
                btn1: Mojo.utils.locale('common', 'ok'),
                handle1: function () {
                    if (self._inRefreshing == true)
                        return;
                    self._inRefreshing = true;
                    Mojo.ajax('/force/refreshTask', {}, function (result) {
                        self._inRefreshing = false;
                        if (result.errorCode == 0) {
                            Mojo.app.data.tasks_finish = self.forceInternalListData.tasks_finish = 0;
                            var i = 0,
                                player = {};
                            if (parseInt(data.vm) > 0) {
                                i = parseInt(data.vm);
                                player.vm = -i;
                            } else if (parseInt(data.rm) > 0) {
                                i = parseInt(data.rm);
                                player.rm = -i;
                            }
                            self._onTrack(i);
                            var grain = result.data.awardGrain;
                            Mojo.page.Force.getController().diffPlayer({
                                grain: grain
                            });
                            self._options.getController().diffPlayer(player);
                            self._setRefreshTimes(result.data);
                            var c = $("<div class='paragraph'></div>").html(Mojo.utils.locale('force', 'refresh_award'));
                            var tip2 = $("<div class='info2'></div>").appendTo(c).html(Mojo.utils.locale('force', 'refresh_award1'));
                            new Mojo.ui.Label(undefined, {
                                classes: ['grain', 'award'],
                                text: grain
                            }).element().appendTo(tip2);
                            var dlg = new Mojo.ui.Dialog(undefined, {
                                title: Mojo.utils.locale('ui', 'Refresh Succ'),
                                classes: ['force-refresh-succdlg'],
                                content: c
                            });
                            new Mojo.ui.Button(undefined, {
                                text: Mojo.utils.locale('ui', 'Close'),
                                click: function () {
                                    dlg.close();
                                }
                            }).element().appendTo(dlg._footer);
                            dlg.open();
                        } else if (result.errorCode == 130108) {
                            (new Mojo.com.CommonDialog(undefined, {
                                title: result.data ? result.data.title : Mojo.utils.locale('force', 'force_assistant_prompt_title'),
                                content: $('<div class="tip"></div>').html(result.errorMsg),
                                leftBtnText: Mojo.utils.locale('common', 'ok'),
                                leftBtnClick: function (that) {
                                    that.close();
                                }
                            })).open();
                        } else if (result.errorCode == 138000) {
                            (new Mojo.com.CommonDialog(undefined, {
                                title: result.data && result.data.title ? result.data.title : Mojo.utils.locale('force', 'forcewar_tip_title'),
                                content: $('<div class="tip"></div>').html(result.errorMsg),
                                rightBtnText: Mojo.utils.locale('ui', 'Close'),
                                rightBtnClick: function (that) {
                                    that.close();
                                }
                            })).open();
                        } else if (result.errorCode == 130101) {
                            (new Mojo.com.CommonDialog(undefined, {
                                title: result.data && result.data.title ? result.data.title : Mojo.utils.locale('force', 'forcewar_tip_title'),
                                content: $('<div class="tip"></div>').html(result.errorMsg),
                                rightBtnText: Mojo.utils.locale('ui', 'Close'),
                                rightBtnClick: function (that) {
                                    that.close();
                                }
                            })).open();
                        } else {
                            (new Mojo.com.BuyFailDialog({
                                message: result.errorMsg,
                                useRm: (parseInt(data.vm) > 0 ? false : true),
                            })).open();
                        }
                    }, function () {}, {
                        showWait: true
                    });
                },
            });
            var info1 = $('<div class="info1"></div>').html(Mojo.utils.locale('force', 'refresh_info1')).appendTo(refreshdlg._message);
            var info2 = $('<div class="info2"></div>').appendTo(refreshdlg._message);
            var cost = $('<div class="cost"></div>').html(Mojo.utils.locale('force', 'refresh_cost')).appendTo(info2);
            var i = 0;
            if (parseInt(data.vm) > 0) {
                (new Mojo.ui.Label(undefined, {
                    text: data.vm,
                    classes: ['vm'],
                })).element().appendTo(info2);
            } else if (parseInt(data.rm) > 0) {
                (new Mojo.ui.Label(undefined, {
                    text: data.rm,
                    classes: ['rm'],
                })).element().appendTo(info2);
            }
            var param = {};
            param.cost = (parseInt(data.next_vm) > 0 ? data.next_vm : data.next_rm);
            param.yb = (parseInt(data.next_vm) > 0 ? Mojo.utils.locale('force', 'vm') : Mojo.utils.locale('force', 'rm'));
            param.point = data.time;
            var info3 = $('<div class="info3"></div>').html(Mojo.utils.locale('force', 'refresh_info3', param)).appendTo(refreshdlg._message);
            refreshdlg.open();
        },
        _showBuffdlg: function () {
            Mojo.ajax('/force/buffpops', {
                type: 'task'
            }, function (response) {
                if (response.errorCode == 0) {
                    var tit = undefined;
                    var dlgmsg = undefined;
                    if (response.errorCode == 0) {
                        if (Mojo.utils.isNone(response.data) || Mojo.utils.isNone(response.data.desc)) {
                            return;
                        }
                        dlgmsg = response.data.desc;
                        if (Mojo.utils.isNone(response.data.title) == false) {
                            tit = response.data.title;
                        } else {
                            tit = Mojo.utils.locale('package', 'title_info');
                        }
                    } else {
                        if (Mojo.utils.isNone(response.errorMsg)) {
                            return;
                        }
                        dlgmsg = response.errorMsg;
                        if (response.data != undefined && Mojo.utils.isNone(response.data.title) == false) {
                            tit = response.data.title;
                        } else {
                            tit = Mojo.utils.locale('package', 'title_info');
                        }
                    }
                    var dlg = new Mojo.ui.Dialog(undefined, {
                        title: tit,
                        content: $('<div class="paragraph"></div>').html(dlgmsg)
                    });
                    (new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'close'),
                        click: function () {
                            dlg.close();
                        }
                    })).element().appendTo(dlg._footer);
                    dlg.open();
                }
            }, function () {});
        },
        _onTrack: function (i) {
            var code = '';
            switch (i) {
            case 30000:
                code = '24_001';
                break;
            case 500:
                code = '24_002';
                break;
            case 1000:
                code = '24_003';
                break;
            case 2000:
                code = '24_004';
                break;
            case 5000:
                code = '24_005';
                break;
            }
            Mojo.track.onEvent(code);
        },
        _getDefaultOptions: function () {
            return {
                backCallback: $.noop,
            };
        },
        localeCat: function () {
            return 'force';
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceInternalList = w.Mojo.ui.ListPanel.extend({
        clsname: function () {
            return "com.ForceInternalList";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-forceinternallist');
        },
        refresh: function (data) {
            var self = this;
            if (data == undefined) return;
            self._list.find('.mojo-com-forceinternalelement').remove();
            self.appendData(data);
            if (data.length == self._options.pageSize) {
                self._more.element().show();
            } else {
                self._more.element().hide();
            }
        },
        _getDefaultOptions: function () {
            var self = this;
            return {
                pageSize: 10,
                scrollable: true,
                showMore: true,
                moreLabel: Mojo.utils.locale('entity', 'entity_more'),
                callback: $.noop,
                onLoaded: undefined,
                loadFunc: function (start, count, params) {
                    Mojo.ajax('/force/playerTasks', {}, function (result) {
                        if (result.errorCode == 0) {
                            Mojo.app.data.is_assist_finish = result.data.is_assist_finish;
                            if (result.data.illegal_auto_refresh == 1) {
                                var dlg = new Mojo.com.CommonDialog(undefined, {
                                    title: Mojo.utils.locale('force', 'refresh_fail'),
                                    content: $("<div class='paragraph'></div>").html(Mojo.utils.locale('force', 'refresh_fail_tip')),
                                    leftBtnText: Mojo.utils.locale('common', 'close'),
                                    leftBtnClick: function () {
                                        dlg.close();
                                    },
                                });
                                dlg.open();
                            }
                            self.data = result.data;
                            self.appendData(self.data.task.tasks);
                            if (result.data != undefined && result.data.length == self._options.pageSize) {
                                self._more.element().show();
                            } else {
                                self._more.element().hide();
                            }
                            self._options.callback(result.data);
                        }
                    }, function () {
                        self.appendData();
                    });
                },
                drawFunc: function (data) {
                    return new Mojo.com.ForceInternalElement(data, {
                        forceLevel: self.data.task.force_level,
                        afterDo: function (data, result) {
                            self._options.afterDoTask(data, result);
                        },
                    });
                },
            };
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceInternalElement = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceInternalElement";
        },
        init: function (data, options) {
            this._data = this.task = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-forceinternalelement');
            this._addTitle();
            this._addDescription();
            this._addDetail();
            this._addAction();
            this._refresh();
        },
        _addTitle: function () {
            this.element().append('<div class="title"><div class="left">' +
                this._data.name + '</div><div class="center"></div><div class="right">' +
                Mojo.utils.locale('force', 'unlock_level', {
                    level: this._data.unlock_level
                }) + '</div></div>');
        },
        _addDescription: function () {
            this.element().append('<div class="row description">' + this._data.description + '</div>');
        },
        _addDetail: function () {
            this._lblDemand = new Mojo.ui.Label(undefined, {
                classes: ['demand'],
                text: Mojo.utils.locale('force', 'none'),
            });
            this._lblGrain = new Mojo.ui.Label(undefined, {
                classes: ['fgrain'],
                text: this.task.grain,
            });
            this._cd = this.task.cold_down;
            this._lblCd = new Mojo.ui.Label(undefined, {
                text: '',
                classes: ['cd'],
            });
            this._progress = new Mojo.ui.Progress(undefined, {
                value: this.task.count,
                max: this.task.sum_count,
            });
            this.element().append('<div class="row"><div class="requirement"></div><div class="reward"></div><div class="progress"></div></div>');
            this.element().find('.row > .requirement').append(Mojo.utils.locale('ui', 'Requirement') + '<br>').append(this._lblDemand.element());
            this.element().find('.row > .reward').append(Mojo.utils.locale('force', 'reward') + '<br>').append('<div class="group"></div>').find('.group').append(this._lblGrain.element());
            this.element().find('.row > .progress').append(Mojo.utils.locale('ui', 'Progress') + '<br>').append(this._progress.element());
        },
        _addAction: function () {
            var self = this;
            this._slot = new Mojo.com.Slot({
                slotId: 'slot-task-' + this.task.id
            });
            this._btnDo = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('ui', 'Do'),
                disabled: Mojo.app.data.is_assist_finish == 0,
                click: function () {
                    Mojo.track.onEvent('24_601');
                    self._showWait = false;
                    self._btnDo.disable(true);
                    self._slot.startInSchedule();
                    self._sendRequest();
                },
                disableClick: function () {
                    if (self.task.status == 2) {
                        Mojo.app.toast.show(Mojo.utils.locale('mission', 'The task is completed!'));
                    } else if (Mojo.app.data.is_assist_finish == 0) {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'force_assistant_alert3'));
                    } else if (self._cd > 0) {
                        Mojo.app.toast.show(Mojo.utils.locale('common', 'wait_to_do'));
                    } else if (parseInt(self._options.forceLevel) < parseInt(self.task.unlock_level)) {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'force_level_is_not_enough'));
                    }
                },
                special: 'button-big-red',
                sound: '17_slotmachine',
            });
            var action = $('<div class="action"></div>').append(this._lblCd.element()).append(this._btnDo.element());
            $('<div class="row"><div class="slot"></div></div>').appendTo(this.element()).append(action).children('.slot').append(this._slot == undefined ? this._boss.element() : this._slot.element());
            this._showCd();
        },
        _refresh: function () {
            this._progress.value(this.task.count);
            this._btnDo.disable(Mojo.app.data.is_assist_finish == 0 || this.task.status == 2 || parseInt(this.task.cold_down) > 0 || parseInt(this._options.forceLevel) < parseInt(this.task.unlock_level));
        },
        _showCd: function () {
            var self = this;
            if (this._data.status == 2 || this._cd == undefined || this._cd == 0) return;
            this._lblCd.text(Mojo.utils.locale('common', 'in_cd') + self._formatCDTime(self._cd));
            this._lblCd.show();
            this._interval = w.setInterval(function () {
                if (self._cd != undefined && self._cd > 1) {
                    self._cd--;
                    self._lblCd.text(Mojo.utils.locale('common', 'in_cd') + self._formatCDTime(self._cd));
                } else {
                    self._cd = 0;
                    w.clearInterval(self._interval);
                    self._btnDo.disable(false);
                    self._lblCd.hide();
                }
            }, 1000);
        },
        _overlayShow: function () {
            if (this._overlay == undefined) {
                this._overlay = new Mojo.ui.Overlay('task-slot-overlay', {
                    opacity: 0,
                });
            }
            this._overlay.show();
        },
        _overlayHide: function () {
            if (this._overlay != undefined) {
                this._overlay.hide();
            }
        },
        _sendRequest: function () {
            var self = this;
            self._overlayShow();
            Mojo.ajax('/force/doTask', {
                id: this.task.id,
            }, function (result) {
                if (result.errorCode == 0) {
                    self._stopSlot(result.data.award.bonus, function () {
                        self._onResult(result);
                    });
                } else if (result.errorCode == 240016) {
                    self._stopSlot(undefined, function () {
                        self._overlayHide();
                    });
                    if (Mojo.utils.isNone(result.errorMsg) || result.errorMsg == '') {
                        result.errorMsg = Mojo.utils.locale('common', 'action_error');
                    }
                    (new Mojo.com.CommonDialog(undefined, {
                        title: result.data ? result.data.title : Mojo.utils.locale('force', 'forcewar_tip_title'),
                        content: $('<div class="tip"></div>').html(result.errorMsg),
                        leftBtnText: Mojo.utils.locale('force', 'force_city_grain_fetch'),
                        leftBtnClick: function (that) {
                            that.close();
                            Mojo.app.redirect('/force', {
                                index: 8
                            });
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        },
                        close: function () {
                            Mojo.app.redirect('/force', {
                                index: 1
                            });
                        }
                    })).open();
                } else {
                    self._stopSlot(undefined, function () {
                        self._overlayHide();
                    });
                    Mojo.app.toast.show(result.errorMsg);
                }
            }, function () {
                self._stopSlot(undefined, function () {
                    self._overlayHide();
                });
            }, {
                showWait: self._showWait
            });
        },
        _onResult: function (result) {
            var self = this;
            var data = result.data;
            if (data.task != undefined) {
                self._cd = data.task.cold_down;
            } else {
                self._cd = 0;
            }
            self._overlayHide();
            if (data.task.status != 2) {
                self._showCd();
            }
            (new Mojo.com.ForceInternalDialog(data, {
                close: function () {
                    $.extend(self.task, data.task);
                    self.task.cold_down = self._cd;
                    self._options.afterDo(data, result);
                    self._refresh();
                    if (self.task.status == 2) {}
                },
            })).open(true);
        },
        _stopSlot: function (bonus, callback) {
            if (this._slot == undefined) return;
            var n = 1;
            if (bonus != undefined) {
                if (bonus.vm != undefined) {
                    n = 2;
                } else if (bonus.xp != undefined) {
                    n = 3;
                } else if (bonus.entities != undefined) {
                    n = 4;
                } else if (bonus.grain != undefined) {
                    n = 3;
                }
            }
            this._slot.stopInSchedule(n, callback);
        },
        _formatCDTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
        unlock: function (value) {
            this._btnDo.disable(!value);
        },
        _getDefaultOptions: function () {
            return {
                forceLevel: null,
                afterDo: $.noop,
            };
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceInternalDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceInternalDialog";
        },
        init: function (data, options) {
            this._data = data.award;
            this._task = data.task;
            this._super(undefined, options);
            this.element().addClass('mojo-com-forceinternaldlg');
            var self = this;
            this._grain = this._data.fixed;
            this._xp = this._xpText();
            this._vm = this._vmText();
            this._grain = this._grainText();
            this._offer = this._offerText();
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            var data = null;
            var vm = 0,
                rm = 0,
                xp = 0,
                addvm = 0,
                addrm = 0,
                addvm = 0;
            if (this._data.bonus != undefined) {
                if (this._data.bonus.entities != undefined && this._data.bonus.entities.length > 0) {
                    Mojo.gap.soundPlay('18_new_card');
                    data = this._data.bonus.entities[0];
                }
            }
            if (data != null) {
                this._entity = new Mojo.com.LargeEntity(data);
                this._content.append(this._entity.element());
                this._content.append('<div class="tip">' + this._contentText(data) + '</div>');
            }
            this._content.append('<div class="reward"></div>');
            if (this._xp != '' && this._vm != '') {
                this._content.find('.reward').append((new Mojo.ui.Label(undefined, {
                    text: Mojo.utils.locale('mission', 'Gained') + '：',
                    classes: ['gained'],
                })).element());
            } else {
                this._content.find('.reward').append((new Mojo.ui.Label(undefined, {
                    text: Mojo.utils.locale('force', 'gained') + this._offer,
                    classes: ['gained'],
                })).element());
            }
            if (this._xp != '') {
                this._content.find('.reward').append((new Mojo.ui.Label(undefined, {
                    text: this._xp,
                    classes: ['xp'],
                })).element());
            }
            if (this._vm != '') {
                this._content.find('.reward').append((new Mojo.ui.Label(undefined, {
                    text: this._vm,
                    classes: ['vm'],
                })).element());
            }
        },
        _xpText: function () {
            var xp = '';
            if (this._data.bonus != undefined && this._data.bonus.xp > 0) {
                xp = this._data.bonus.xp;
                if (parseInt(this._data.fixed.add_xp) > 0) {
                    xp += '+' + this._data.fixed.add_xp;
                }
                return xp;
            } else {
                return '';
            }
        },
        _vmText: function () {
            var vm = '';
            if (this._data.bonus != undefined && this._data.bonus.vm > 0) {
                vm = this._data.bonus.vm;
                if (parseInt(this._data.fixed.add_vm) > 0) {
                    vm += '+' + this._data.fixed.add_vm;
                }
                return vm;
            } else {
                return '';
            }
        },
        _grainText: function () {
            if (this._data.bonus != undefined && this._data.bonus.grain > 0) {
                return this._data.bonus.grain;
            } else {
                return '';
            }
        },
        _offerText: function () {
            if (this._data.fixed != undefined && this._data.fixed.grain > 0) {
                return this._data.fixed.grain;
            } else {
                return '';
            }
        },
        _contentText: function (entity) {
            var number = Math.random();
            if (this._data.bonus != undefined) {
                if (entity.type_id == 1) {
                    if (number > 0.5) {
                        return Mojo.utils.locale('mission', 'Get One Generals', {
                            name: entity.name
                        });
                    } else {
                        return Mojo.utils.locale('mission', 'Get Another Generals', {
                            name: entity.name
                        });
                    }
                } else {
                    if (number > 0.5) {
                        return Mojo.utils.locale('mission', 'Get One Collection', {
                            name: entity.name
                        });
                    } else {
                        return Mojo.utils.locale('mission', 'Get Another Collection', {
                            name: entity.name
                        });
                    }
                }
            } else {
                if (entity.type_id == 1) {
                    return Mojo.utils.locale('mission', 'Attack One Generals', {
                        boss_name: this._task.boss_name,
                        name: entity.name
                    });
                } else {
                    return Mojo.utils.locale('mission', 'Attack Another Generals', {
                        boss_name: this._task.boss_name,
                        name: entity.name
                    });
                }
            }
        },
        _addHandleButtons: function () {
            var self = this;
            this._footer.append((new Mojo.ui.Button(undefined, {
                special: 'button-big-red',
                text: Mojo.utils.locale('common', 'ok'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('mission', 'Task Awards'),
                handle: $.noop,
            });
        },
        open: function () {
            if (this._entity != null && this._entity != undefined) {
                this._super();
            } else {
                var str = '';
                if (this._xp != '' && this._vm != '') {
                    str += ' XP:' + this._xp + '，' + Mojo.utils.locale('mission', 'Coins') + ':' + this._vm;
                } else if (this._xp != '') {
                    str += ' XP:' + this._xp;
                } else if (this._vm != '') {
                    str += Mojo.utils.locale('mission', 'Coins') + ':' + this._vm;
                } else if (this._grain != '') {
                    str += Mojo.utils.locale('force', 'grain') + this._grain;
                }
                if (str == '') {
                    str += Mojo.utils.locale('force', 'offer') + this._offer;
                } else {
                    str += '，' + Mojo.utils.locale('force', 'offer') + this._offer;
                }
                if (str != '') {
                    Mojo.app.toast.show(Mojo.utils.locale('mission', 'Gained') + str);
                }
                this.close();
            }
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    var g = w.Mojo.com.Slot = w.Mojo.Object.extend({
        clsname: function () {
            return "com.Slot";
        },
        init: function (options) {
            this._super(undefined, options);
            var self = this;
            this._slotContainer = this.element();
            this._slotContainer.show().addClass(self._options.slotContainerClass);
            this._slot = $('<div></div>').attr("id", self._options.slotId).addClass(self._options.slotClass).addClass(self._options.slotClass + '-' + Mojo.app.data.userLanguage).appendTo(this._slotContainer);
            $(this._slot).pan({
                fps: 30,
                dir: 'down'
            });
            $(this._slot).spStop();
        },
        _getDefaultOptions: function () {
            var self = this;
            return {
                slotId: '0',
                speed: 0,
                step: 2,
                interval: null,
                maxSpeed: 60,
                minSpeed: 10,
                imgHeight: self.getR("imgHeight"),
                spriteHeight: self.getR("spriteHeight"),
                started: false,
                slotContainerClass: 'mojo-com-slot-container',
                slotClass: 'mojo-com-slot',
                slotMotionClass: 'mojo-com-slot-motion',
                slotActivePaneClass: 'mojo-com-slot-activepane',
                slotActiveBtnClass: 'mojo-com-slot-activebtn',
            };
        },
        reset: function () {
            var self = this;
            $(this._slot).spStop();
            $._spritely.instances[self._options.slotId].t = 0;
            $(this._slot).css('background-position', self.getR("background-position"));
            self._options.speed = 0;
        },
        canStart: function () {
            var self = this;
            if (self._options.started === false && self._options.speed == 0) {
                return true;
            } else {
                return false;
            }
        },
        startInSchedule: function () {
            var self = this;
            if (self._options.started === false) {
                if (self._options.speed == 0) {
                    self.start();
                } else {
                    var interval = window.setInterval(function () {
                        if (self._options.speed == 0) {
                            self.start();
                            clearInterval(interval);
                        }
                    }, 100);
                }
            }
        },
        start: function () {
            var self = this;
            $(this._slot).spStart();
            self._options.started = true;
            self._options.interval = window.setInterval(function () {
                if (self._options.speed < self._options.maxSpeed) {
                    self._options.speed += self._options.step;
                    $(self._slot).spSpeed(self._options.speed);
                }
            }, 40);
        },
        canStop: function () {
            var self = this;
            if (self._options.started === true && self._options.speed >= self._options.maxSpeed) {
                return true;
            } else {
                return false;
            }
        },
        stopInSchedule: function (n, callback) {
            var self = this;
            if (self._options.started === true) {
                var targetPos = self._options.spriteHeight * n;
                if (self._options.speed >= self._options.maxSpeed) {
                    self.stop(targetPos, callback);
                } else {
                    var interval = window.setInterval(function () {
                        if (self._options.speed >= self._options.maxSpeed) {
                            self.stop(targetPos, callback);
                            clearInterval(interval);
                        }
                    }, 100);
                }
            }
        },
        stop: function (targetPos, callback) {
            var self = this;
            clearInterval(self._options.interval);
            self._options.interval = window.setInterval(function () {
                if (self._options.speed > self._options.minSpeed) {
                    self._options.speed -= self._options.step;
                    $(self._slot).spSpeed(self._options.speed);
                }
                if (self._options.speed <= self._options.minSpeed) {
                    var range = self._rangeFromTarget_when_dir_down(targetPos);
                    if (range > 0) {
                        if (Mojo.gap.device == 'ipad') {
                            if (range < 0.05) {
                                var best = targetPos;
                                var bgPos = "0px " + best + "px";
                                $(self._slot).css('background-position', bgPos);
                                $(self._slot).spSpeed(0);
                                $(self._slot).spStop();
                                clearInterval(self._options.interval);
                                $(self._slot).removeClass(self._options.slotMotionClass);
                                self._options.speed = 0;
                                self._options.started = false;
                                if (callback != undefined) {
                                    callback.call();
                                }
                            } else if (range < 0.1) {
                                self._options.speed = 1;
                                $(self._slot).spSpeed(1);
                            } else if (range < 0.5) {
                                self._options.speed = 2;
                                $(self._slot).spSpeed(2);
                            } else if (range < 0.9) {
                                self._options.speed = 4;
                                $(self._slot).spSpeed(4);
                            } else if (range < 1.4) {
                                self._options.speed = 6;
                                $(self._slot).spSpeed(6);
                            } else if (range < 2) {
                                self._options.speed = 8;
                                $(self._slot).spSpeed(8);
                            }
                        } else {
                            if (range < 0.1) {
                                var best = targetPos - 7;
                                var bgPos = "5px " + best + "px";
                                $(self._slot).css('background-position', bgPos);
                                $(self._slot).spSpeed(0);
                                $(self._slot).spStop();
                                clearInterval(self._options.interval);
                                $(self._slot).removeClass(self._options.slotMotionClass);
                                self._options.speed = 0;
                                self._options.started = false;
                                if (callback != undefined) {
                                    callback.call();
                                }
                            } else if (range < 0.5) {
                                self._options.speed = 2;
                                $(self._slot).spSpeed(2);
                            } else if (range < 0.9) {
                                self._options.speed = 4;
                                $(self._slot).spSpeed(4);
                            } else if (range < 1.4) {
                                self._options.speed = 6;
                                $(self._slot).spSpeed(6);
                            } else if (range < 2) {
                                self._options.speed = 8;
                                $(self._slot).spSpeed(8);
                            }
                        }
                    }
                }
            }, 40);
        },
        _rangeFromTarget_when_dir_down: function (targetPos) {
            var self = this;
            var currentPos = $(self._slot).css('background-position');
            currentPos = currentPos.split(' ')[1];
            currentPos = parseInt(currentPos, 10);
            if ((targetPos - (currentPos % self._options.imgHeight)) > 0) {
                return ((targetPos - (currentPos % self._options.imgHeight)) / self._options.spriteHeight);
            } else {
                return -1;
            }
        },
        _rangeFromTarget_when_dir_up: function (targetPos) {
            var self = this;
            var currentPos = $(self._slot).css('background-position');
            currentPos = currentPos.split(' ')[1];
            currentPos = parseInt(currentPos, 10);
            if (((currentPos % self._options.imgHeight) - targetPos) > 0) {
                return (((currentPos % self._options.imgHeight) - targetPos) / self._options.spriteHeight);
            } else {
                return -1;
            }
        },
        _isNearTarget: function (range, targetPos) {
            var self = this;
            var currentPos = $(self._slot).css('background-position');
            currentPos = currentPos.split(' ')[1];
            currentPos = parseInt(currentPos, 10);
            if (((currentPos % self._options.imgHeight) - targetPos) > 0 && ((currentPos % self._options.imgHeight) - targetPos) < (self._options.spriteHeight * range)) {
                return true;
            } else {
                return false;
            }
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceExchange = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceExchange";
        },
        init: function (options) {
            this._super('com-force-exchange', options);
            this.element().addClass('mojo-com-forceexchange');
            this._force = this._options.getController()._forceProfile._force;
            this.curLevel = this._force.level;
            this._addTabs();
            this._addButton();
            this._showBuffdlg();
        },
        _addTabs: function () {
            var self = this;
            this._panels = [{
                type: 'exchange',
                label: 'exchange'
            }, {
                type: 'exchange_special',
                label: 'exchange_special'
            }, ];
            this._tabs = new Mojo.ui.Tabs('tabs-exchange', {
                selectionChange: function (i) {
                    self._createList(i);
                },
            });
            $.each(this._panels, function (i, p) {
                self._tabs.addTab(self.locale(p.label));
            });
            this.element().append(this._tabs.element());
            this._tabs.element().find('.panel').addClass('box-outter');
            this._panel = this._tabs.element().find('.panel').addClass('box-outter');
            if (Mojo.app.request('index') == 3)
                this._selected = Mojo.app.request('selected');
            if (Mojo.utils.isNone(this._selected) == true) {
                this._selected = 0;
            } else {
                this._selected = parseInt(this._selected);
            }
            this._tabs._select(this._selected);
        },
        _createList: function (index) {
            var self = this;
            var p = this._panels[index];
            if (self._list == undefined || p.list == undefined || p.list == null) {
                self._list = p.list = new Mojo.com.ForceExchangeList('exchange-' + p.type, {
                    type: p.type,
                    level: parseInt(self._force.level),
                    callback: function (data) {
                        if (data.tips.length != 0) {
                            self._addBuffHeader(data);
                        }
                    }
                });
                this._tabs.setPanel(index, p.list);
            }
        },
        _addBuffHeader: function (data) {
            var self = this;
            self._buffhead = $("<div class='page-tips'></div>");
            self._buffhead.appendTo(self._list._list._header);
            if (data.tips.length == 1) {
                self._buffhead.html(data.tips[0]);
            } else {
                self._buffheader = $('<marquee scrollamount=2 behavior=scroll></marquee>').appendTo(self._buffhead);
                var datatips = '';
                $.each(data.tips, function (i, t) {
                    if (i == data.tips.length - 1) {
                        datatips += t;
                        return false;
                    }
                    datatips += t + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
                });
                self._buffheader.html(datatips);
            }
            self._list._list.resize();
        },
        _addButton: function () {
            var self = this;
            this._header = $('<div class="head"></div>').appendTo(this._panel);
            this._backBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'back'),
                click: function () {
                    self.element().hide();
                    self._options.getController().switchToHome();
                },
            });
            this._backBtn.element().addClass('force-back-btn').appendTo(this.element());
        },
        refreshData: function () {
            this._list.refreshData();
        },
        _getDefaultOptions: function () {
            var self = this;
            return {
                profileUpdated: function (f, p) {
                    if (self.curLevel != f.level && self._list != undefined) {
                        self.curLevel = f.level;
                        self._list.profileUpdated(f.level);
                    }
                },
                backCallback: $.noop,
            };
        },
        _showBuffdlg: function () {
            Mojo.ajax('/force/buffpops', {
                type: 'exchange'
            }, function (response) {
                if (response.errorCode == 0) {
                    var tit = undefined;
                    var dlgmsg = undefined;
                    if (response.errorCode == 0) {
                        if (Mojo.utils.isNone(response.data) || Mojo.utils.isNone(response.data.desc)) {
                            return;
                        }
                        dlgmsg = response.data.desc;
                        if (Mojo.utils.isNone(response.data.title) == false) {
                            tit = response.data.title;
                        } else {
                            tit = Mojo.utils.locale('package', 'title_info');
                        }
                    } else {
                        if (Mojo.utils.isNone(response.errorMsg)) {
                            return;
                        }
                        dlgmsg = response.errorMsg;
                        if (response.data != undefined && Mojo.utils.isNone(response.data.title) == false) {
                            tit = response.data.title;
                        } else {
                            tit = Mojo.utils.locale('package', 'title_info');
                        }
                    }
                    var dlg = new Mojo.ui.Dialog(undefined, {
                        title: tit,
                        content: $('<div class="paragraph"></div>').html(dlgmsg)
                    });
                    (new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'close'),
                        click: function () {
                            dlg.close();
                        }
                    })).element().appendTo(dlg._footer);
                    dlg.open();
                }
            }, function () {});
        },
        localeCat: function () {
            return 'force';
        },
        debugable: function () {
            return Mojo.utils.debug.vars.com.forceinternal;
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceMember = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceMember";
        },
        init: function (options) {
            this._super('com-force-member', options);
            this.element().addClass('mojo-com-forcemember');
            this.forceMemberList = undefined;
            this.forceHelperMemberList = undefined;
            this._ForceMemberPanel = undefined;
            this._ForceHelperMemberPanel = undefined;
            this._ownmember = undefined;
            this._assitmemeber = undefined;
            this._index = undefined;
            this._forceProfile = this._options.getController().getForceProfile();
            this._playerProfile = this._options.getController().getPlayerProfile();
            this._param = {
                typeId: '1,2,3,4,5,6',
                orderId: '1',
                type: 'all'
            };
            this._addTabs();
            document.onkeydown = function (event) {
                if (event.keyCode == 13) {
                    $('#search-btn').click();
                    $('#friend-search-condition').blur()
                    return false;
                }
            };
        },
        _addTabs: function () {
            var self = this;
            this._tabs = new Mojo.ui.Tabs('tabs-member', {
                selectionChange: function (index) {
                    self._index = index;
                    self._createList();
                    self._refreshFilter();
                }
            });
            if (Mojo.utils.isNone(this._ForceMemberPanel) == false) {
                return;
            }
            this._tabs.addTab(this.locale('member'));
            this.element().append(this._tabs.element());
            this._ForceMemberPanel = this._tabs.element().find('.panel').eq(0).addClass('box-outter');
            this._tabs._select(0);
            this._addButton();
        },
        _addHelperTabs: function (data) {
            if (Mojo.utils.isNone(this._ForceHelperMemberPanel) == false) {
                return;
            }
            if (Mojo.utils.isNone(this._options.showAssistTabs) || this._options.showAssistTabs == false) {
                return;
            }
            if (Mojo.utils.isNone(data.hasHelper) || data.hasHelper == false) {
                return;
            }
            this._tabs.addTab(data.hasHelper);
            this._ForceHelperMemberPanel = this._tabs.element().find(".panel").eq(1).addClass("box-outter");
        },
        _addHeader: function (data) {
            if (this._index == undefined) this._index = 0;
            if (Mojo.utils.isNone(this._options.showHeader) || this._options.showHeader == false) {
                return;
            }
            var headerText = undefined;
            if (this._index == 0 && this._ownheader == undefined) {
                if (Mojo.utils.isNone(data.hasHelper) || data.hasHelper == false) {
                    headerText = Mojo.utils.locale('force', 'member_count') + this._forceProfile.member_num + '/' + this._forceProfile.member_num_limit;
                } else {
                    headerText = Mojo.utils.locale('force', 'forcewar_hasborrowmember') + data.enabled + '/' + data.available;
                }
                this._ownheader = new Mojo.ui.Label(undefined, {
                    text: headerText,
                    classes: ['member-count'],
                });
                this._ownheader.element().appendTo((this._index <= 0 ? this.forceMemberList : this.forceHelperMemberList)._header);
            } else if (this._index == 1 && data.hasHelper != false && this._helpheader == undefined) {
                headerText = Mojo.utils.locale('force', 'forcewar_hasborrowmember') + data.enabled + '/' + data.available;
                this._helpheader = new Mojo.ui.Label(undefined, {
                    text: headerText,
                    classes: ['member-count'],
                });
                this._helpheader.element().appendTo((this._index <= 0 ? this.forceMemberList : this.forceHelperMemberList)._header);
            }
        },
        update: function (data) {
            var self = this;
            if (data != undefined && data.player_num != this._forceProfile.member_num) {
                this._header.text(Mojo.utils.locale('force', 'member_count') + data.player_num + '/' + data.player_num_limit);
            }
            self._options.getController().updateForceProfile({
                member_num: data.player_num,
                member_num_limit: data.player_num_limit
            });
            for (var i = 0; i < data.list.length; i++) {
                if (this._playerProfile.id == data.list[i].id) {
                    if (this._playerProfile.position_id != data.list[i].position_id) {
                        this._options.getController().sync(function () {
                            self._forceProfile = self._options.getController().getForceProfile();
                            self._playerProfile = self._options.getController().getPlayerProfile();
                        });
                        break;
                    }
                }
            }
        },
        _createList: function () {
            var self = this;
            if (this._index == undefined) this._index = 0;
            self._refreshFilter();
            var member = {
                id: this._playerProfile.id,
                position_id: parseInt(this._playerProfile.position_id),
                member_count: parseInt(this._forceProfile.member_num),
                member_owner: self._getTabsId(),
                forceProfile: this._forceProfile
            };
            var forceMemberListOptions = {
                type: 'member',
                params: self._param,
                member: member,
                refreshCallback: function (element, op) {
                    if (op == "outforce") {
                        element._btn.element().remove();
                        element._hiddenTxt.html(self.getL("force", "deleted"));
                        self._forceProfile.member_num = self._forceProfile.member_num - 1;
                        if (self._header) {
                            self._header.text(Mojo.utils.locale('force', 'member_count') + self._forceProfile.member_num + '/' + self._forceProfile.member_num_limit);
                        }
                    } else {
                        self.refresh();
                    }
                    self._options.getController().sync();
                },
                updateCallback: function (data) {
                    self.update(data);
                },
                refreshForceInviteList: function () {
                    self._tabs.element().hide();
                    self._addForceInviteTabs();
                },
            };
            if (Mojo.utils.isNone(this._options.forceMemberElementOptions) == false) {
                forceMemberListOptions["forceMemberElementOptions"] = this._options.forceMemberElementOptions;
            }
            if (Mojo.utils.isNone(this._options.forceMemberListOptions) == false) {
                $.extend(true, forceMemberListOptions, this._options.forceMemberListOptions);
            }
            if (this._index == 0 && this.forceMemberList == undefined) {
                this.forceMemberList = new Mojo.com.ForceMemberList(undefined, forceMemberListOptions);
                if (Mojo.utils.isNone(this._options.showSearch) || this._options.showSearch)
                    this._createSearchForm(this.forceMemberList._header, "");
                this.forceMemberList.element().appendTo(this._ForceMemberPanel);
            } else if (this.forceHelperMemberList == undefined) {
                this.forceHelperMemberList = new Mojo.com.ForceMemberList(undefined, forceMemberListOptions);
                this.forceHelperMemberList.element().appendTo(this._ForceHelperMemberPanel);
            }
        },
        _createSearchForm: function (p, defaultv) {
            var self = this;
            var search = '<div id="friend-search-area" class="search-area">\
     <div class="search-input">\
      <form id="friend-search-form" name="form" action="" method="get">\
       <input id="friend-search-condition" name="cc" type="text" value="' + defaultv + '" maxlength="10" />\
      </form>\
     </div>\
    </div>';
            self._searchBtn = new Mojo.ui.Button('search-btn', {
                text: Mojo.utils.locale('common', 'search'),
                click: function () {
                    $.each(self.forceMemberList.children(), function (i, child) {
                        child.element().remove();
                    });
                    self._searchBtn.disable(true);
                    self.forceMemberList._hasLoaded = false;
                    self.forceMemberList._children = [];
                    self.forceMemberList._load(self);
                }
            });
            var s = $(search);
            s.appendTo(p);
            self._searchBtn.element().appendTo(s);
            setTimeout(function () {
                $("#friend-search-condition").click(function () {
                    this.selectionStart = 0;
                    this.selectionEnd = this.value.length;
                });
            }, 100)
        },
        _refreshFilter: function () {
            var filter = Mojo.cache.get('forceFiter');
            if (filter != undefined) {
                for (var p in filter) {
                    this._param[p] = filter[p];
                }
            }
        },
        _addButton: function () {
            var self = this;
            this._backBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'back'),
                click: function () {
                    if (self._options.backCallback instanceof Function) {
                        self._options.backCallback(self);
                    }
                },
                classes: ['force-back-btn'],
            });
            this._backBtn.element().appendTo(this._tabs.element());
            if (Mojo.utils.isNone(this._options.showSearch) == false && this._options.showSearch == false) {
                return;
            }
            self.orderBtn = new Mojo.ui.Button('order-btn', {
                classes: ['order_btn'],
                text: Mojo.utils.locale('force', 'order_force'),
                click: function () {
                    var forceFilterDialog = new Mojo.com.ForceFilterDialog({
                        typeId: self._param.typeId,
                        type: self._param.type,
                        showAll: true,
                        orderId: self._param.orderId,
                        callback: function (tid, oid) {
                            if (self._param.typeId == tid && self._param.orderId == oid)
                                return;
                            self._param.typeId = tid;
                            self._param.orderId = oid;
                            if (self._getTabsId() == 0) {
                                self.forceMemberList._options.params = self._param;
                                Mojo.cache.set('forceFiter', {
                                    typeId: tid,
                                    orderId: oid
                                });
                                $.each(self.forceMemberList.children(), function (i, child) {
                                    child.element().remove();
                                });
                                self.forceMemberList._hasLoaded = false;
                                self.forceMemberList._children = [];
                                self.forceMemberList._load(self._param);
                            } else if (self._getTabsId() == 1) {
                                self.forceHelperMemberList._options.params = self._param;
                                Mojo.cache.set('forceFiter', {
                                    typeId: tid,
                                    orderId: oid
                                });
                                $.each(self.forceHelperMemberList.children(), function (i, child) {
                                    child.element().remove();
                                });
                                self.forceHelperMemberList._hasLoaded = false;
                                self.forceHelperMemberList._children = [];
                                self.forceHelperMemberList._load(self._param);
                            }
                        }
                    });
                    forceFilterDialog.open();
                },
            });
            self.orderBtn.element().appendTo(this._tabs.element());
        },
        refresh: function () {
            var self = this;
            this._options.getController().sync(function () {
                self._profileUpdate();
            });
        },
        _profileUpdate: function () {
            this._forceProfile = this._options.getController().getForceProfile();
            this.forceMemberList.element().remove();
            this.forceMemberList = undefined;
            this._createList();
        },
        _addBackToBtn: function () {
            var self = this;
            this._backToBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'back'),
                click: function () {
                    self._forceInviteTabs.element().remove();
                    self._tabs.element().show();
                },
                classes: ['force-back-btn'],
            });
            this._backToBtn.element().appendTo(this._forceInviteTabs.element());
        },
        _addForceInviteTabs: function () {
            var self = this;
            this._forceInviteTabs = new Mojo.ui.Tabs('tabs-member', {
                selectionChange: function (index) {
                    self._refreshForceInviteList();
                }
            });
            this._forceInviteTabs.addTab(this.locale('invite_member'));
            this.element().append(this._forceInviteTabs.element());
            this._ForceInvitePanel = this._forceInviteTabs.element().find('.panel').eq(0).addClass('box-outter');
            this._forceInviteTabs._select(0);
            this._addBackToBtn();
        },
        _ForceInviteDataAjax: function (start, count) {
            var self = this;
            Mojo.ajax('/force/ForceInvitePlayer', {
                count: count
            }, function (result) {
                if (result.errorCode == 0) {
                    self._forceInviteList.appendData(result.data);
                    if (start == 0 && Mojo.utils.isNone(result.data)) {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'no_suitable_player'));
                    }
                    self._forceInviteList.resize();
                } else {
                    self._forceInviteList.appendData(null);
                }
            }, function () {
                self._forceInviteList.appendData(null);
            });
        },
        _refreshForceInviteList: function () {
            var self = this;
            this._forceInviteList = new Mojo.ui.ListPanel(undefined, {
                pageSize: 10,
                scrollable: true,
                alwaysMore: true,
                refreshable: true,
                showMore: true,
                moreLabel: Mojo.utils.locale('friend', 'refresh'),
                emptyLabel: Mojo.utils.locale('force', 'no_suitable_player'),
                loadFunc: function (start, count) {
                    self._ForceInviteDataAjax(start, count);
                },
                drawFunc: function (data) {
                    return new Mojo.com.ForceInviteElement(data, {
                        button1: Mojo.utils.locale('force', 'invite_member'),
                        classButton1: 'go-communicate-btn',
                        clickButton1: function (data, element) {
                            var dlg = new Mojo.com.MsgInputDialog({
                                title: Mojo.utils.locale('force', 'force_invite'),
                                defaultText: Mojo.utils.locale('friend', 'default_text'),
                                maxlen: 100,
                                leftBtnText: Mojo.utils.locale('force', 'send_apply'),
                                leftBtnClick: function (value) {
                                    Mojo.ajax('/message/messageForceRequest', {
                                        receiverId: data.id,
                                        content: value
                                    }, function (response) {
                                        if (response.errorCode == 0) {
                                            dlg.close();
                                            element.element().remove();
                                            Mojo.app.toast.show(self.getL('force', 'send_already'));
                                        }
                                    });
                                }
                            });
                            dlg.open();
                        },
                    });
                },
            });
            this._forceInviteList.element().appendTo(this._ForceInvitePanel);
        },
        _getDefaultOptions: function () {
            var self = this;
            return {
                backCallback: function () {
                    self.element().hide();
                    self._options.getController().switchToHome();
                },
                forceMemberElementOptions: {
                    showOfficial: true,
                },
                forceMemberListOptions: undefined,
            };
        },
        localeCat: function () {
            return 'force';
        },
        _setResponseData: function (data) {
            if (Mojo.utils.isNone(this._ownmember) == true) {
                this._ownmember = data;
            } else {
                this._assitmemeber = data;
            }
            return;
        },
        _getResponseData: function () {
            return this._ownmember;
        },
        _getTabsId: function () {
            return this._tabs.selected();
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceMemberList = w.Mojo.ui.ListPanel.extend({
        clsname: function () {
            return "com.ForceMemberList";
        },
        init: function (id, options) {
            this._super(id, options);
            this.element().addClass('mojo-com-forcememberlist');
            this._player = Mojo.page.Force.getController().getPlayerProfile();
            this._force = Mojo.page.Force.getController().getForceProfile();
        },
        _addInviteBtn: function () {
            var self = this;
            this._inviteBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('force', 'invite_member'),
                click: function () {
                    self._options.refreshForceInviteList();
                }
            });
            this._inviteBtn.element().appendTo(this._list).addClass('button-big-red').addClass("footer-btn");
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                pageSize: 10,
                moreLabel: Mojo.utils.locale('force', 'member_more'),
                showMore: true,
                alwaysMore: true,
                onLoaded: function (list) {
                    self._more.element().removeClass('more').addClass("more-btn footer-btn");
                },
                loadFunc: function (start, count, params) {
                    if (params != undefined) {
                        self._flag = true;
                    } else {
                        self._flag = false;
                    }
                    Mojo.ajax('/force/playerList', {
                        start: start,
                        count: count,
                        type_id: self._flag ? params.typeId : self._options.params.typeId,
                        order_id: self._flag ? params.orderId : self._options.params.orderId,
                        search: $("#friend-search-condition").val(),
                    }, function (result) {
                        if (result.errorCode == 0) {
                            if (result.data.list != undefined && result.data.list.length == self._options.pageSize) {} else {
                                self._options.emptyLabel = Mojo.utils.locale('force', 'not_this_member');
                                if (self._flag) {
                                    setTimeout(function () {
                                        if (params._searchBtn) {
                                            params._searchBtn.disable(false);
                                        }
                                    }, 1000);
                                }
                            }
                            setTimeout(function () {
                                if (result.data.list != undefined && result.data.list.length == self._options.pageSize) {
                                    self._more.disable(false);
                                } else {
                                    self._more.disable(true);
                                    self._more._options.disableClick = function () {
                                        Mojo.app.toast.show(Mojo.utils.locale('force', 'no_more_member'));
                                    };
                                }
                            }, 100);
                            self.appendData(result.data.list, true);
                            self._options.updateCallback(result.data);
                            self.resize();
                            if (self._flag) {
                                self._scroll.scrollTo(0, 0);
                            }
                            if (self._inviteBtn == undefined) {
                                self._addInviteBtn();
                            }
                        }
                    });
                },
                drawFunc: function (data) {
                    return new Mojo.com.ForceMemberElement(data, self._options.forceMemberElementOptions);
                },
                scrollable: true,
                emptyLabel: Mojo.utils.locale('force', 'member_empty'),
                forceMemberElementOptions: {
                    showHr: true,
                    clickFunc: function (element) {
                        if (self._player.id == element._data.id) {
                            if (self._player.position_id == 1 && self._force.member_num > 1) {
                                (new Mojo.com.TipsDialog({
                                    message: Mojo.utils.locale('force', 'cannot_abandon_your_brother'),
                                })).open();
                            } else {
                                var dlg = (new Mojo.com.HandleDialog({
                                    title: Mojo.utils.locale('force', 'get_out_of_force'),
                                    message: Mojo.utils.locale('force', 'get_out_of_force_content'),
                                    btn1: Mojo.utils.locale('common', 'ok'),
                                    handle1: function () {
                                        Mojo.ajax('/force/quit', {}, function (result) {
                                            if (result.errorCode == 0) {
                                                Mojo.app.redirect('/home', {});
                                            }
                                        });
                                    }
                                }));
                                Mojo.ajax('/force/getCoolingTimeIfLeave', undefined, function (response) {
                                    if (response && response.errorCode === 0) {
                                        var str = Mojo.utils.locale('force', 'after_leave');
                                        if (response.data.cooling_time_if_leave) {
                                            str += Mojo.utils.locale('force', 'alert_cooling_time_if_leave', {
                                                cooling: response.data.cooling_time_if_leave
                                            });
                                        }
                                        str += Mojo.utils.locale('force', 'alert_cooling_time_battle');
                                        str += Mojo.utils.locale('force', 'alert_cooling_time_defence');
                                        dlg.setAlertMessage(str);
                                        Mojo.utils.center(dlg.element());
                                    }
                                    dlg.open();
                                });
                            }
                        } else {
                            var params = {};
                            params.callback = function (op) {
                                self._options.refreshCallback(element, op);
                            };
                            (new Mojo.com.ForceMemberDetailDialog(element._data, params)).open();
                        }
                    },
                    classes: ['box-inner'],
                },
                refreshCallback: $.noop,
                updateCallback: $.noop,
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceMemberElement = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceMemberElement";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-forcememberelement').addClass('box-inner');
            this._player = w.Mojo.page.Force.getController().getPlayerProfile();
            if (this._player.id == data.id && this._options.goBtnText != '') {
                this._options.goBtnText = Mojo.utils.locale('force', 'out');
                this._options.goSpecialClass = 'go-close-btn';
            }
            if (this._options.subClass != '') this.element().addClass(this._options.subClass);
            this._addAttributes();
        },
        _addAttributes: function () {
            var self = this;
            var attack, defence;
            if (parseInt(this._data.is_self) == 1) {
                this.element().addClass('self');
            }
            if (parseInt(this._data.attack_min) > parseInt(this._data.attack_max)) {
                attack = this._data.attack_min;
            } else {
                attack = this._data.attack_min + '-' + this._data.attack_max;
            }
            if (parseInt(this._data.defence_min) > parseInt(this._data.defence_max)) {
                defence = this._data.defence_min;
            } else {
                defence = this._data.defence_min + '-' + this._data.defence_max;
            }
            if (this._options.showLevel == false) {
                this.element().append('<div class="force-member-level">' + Mojo.utils.locale('common', 'lv') + this._data.level + '</div>');
            }
            new Mojo.com.PlayerName(this._data.title_info ? this._data.title_info : {
                player_name: this._data.name
            }).element().appendTo($('<div class="force-member-name"></div>').appendTo(this.element()));
            if (this._options.showHr) {
                $('<hr>').appendTo(this.element());
            }
            if (Mojo.utils.isNone(this._data.force) == false)
                if (Mojo.utils.isNone(this._data.force.name) == false)
                    this.element().append('<div class="force-member-force">' + Mojo.utils.locale('force', 'forcewar_element_force') + this._data.force.name + '</div>');
            if (this._options.showLevel) {
                this.element().append('<div class="force-member-level">' + Mojo.utils.locale('force', 'level') + this._data.level + '</div>');
            }
            var official = undefined;
            if (this._options.showOfficial && this._data.title_info && Mojo.utils.isNone(this._data.title_info.position_id) == false) {
                switch (parseInt(this._data.title_info.position_id)) {
                case 1:
                    official = Mojo.utils.locale('force', 'info_owner');
                    break;
                case 2:
                    official = Mojo.utils.locale('force', 'info_vice_owner');
                    break;
                case 3:
                    official = Mojo.utils.locale('force', 'count_officer_name_1');
                    break;
                case 14:
                    official = Mojo.utils.locale('force', 'count_officer_name_2');
                    break;
                case 15:
                    official = Mojo.utils.locale('force', 'count_officer_name_3');
                    break;
                case 16:
                    official = Mojo.utils.locale('force', 'count_officer_name_4');
                    break;
                case 17:
                    official = Mojo.utils.locale('force', 'count_officer_name_5');
                    break;
                case 18:
                    official = Mojo.utils.locale('force', 'count_officer_name_6');
                    break;
                case 19:
                    official = Mojo.utils.locale('force', 'count_officer_name_7');
                    break;
                default:
                    official = undefined;
                    break;
                }
                if (official != undefined) {
                    this.element().append('<div class="force-member-official">' + Mojo.utils.locale('force', 'official') + official + '</div>');
                }
            }
            if (this._options.showLogin) {
                this.element().append('<div class="force-member-login">' + Mojo.utils.getFromNowTime(this._data.last_login_time) + Mojo.utils.locale('force', 'login2') + '</div>');
            }
            if (this._options.showOffer && official != undefined) {
                this.element().append('<div class="force-member-offer-with-official">' + Mojo.utils.locale('force', 'offer') + this._data.contribute + Mojo.utils.locale('force', 'today_offer', {
                    offer: self._data.today_contribute
                }) + '</div>');
            } else if (this._options.showOffer && official == undefined) {
                this.element().append('<div class="force-member-offer">' + Mojo.utils.locale('force', 'offer') + this._data.contribute + Mojo.utils.locale('force', 'today_offer', {
                    offer: self._data.today_contribute
                }) + '</div>');
            }
            if (this._options.showAttack) {
                this.element().append('<div class="force-member-attack">' + Mojo.utils.locale('common', 'simple_attack') + attack + '</div>');
            }
            if (this._options.showDefence) {
                if (typeof this._options.showDefence == "string") {
                    this.element().append('<div class="force-member-defence">' + Mojo.utils.locale('common', 'simple_defence') + this._options.showDefence + '</div>');
                } else {
                    this.element().append('<div class="force-member-defence">' + Mojo.utils.locale('common', 'simple_defence') + defence + '</div>');
                }
            }
            self._hiddenTxt = $('<div class="hidden-txt"></div>');
            this.element().append(self._hiddenTxt);
            self._btn = new Mojo.ui.Button(null, {
                classes: self._options.goBtnClass,
                text: self._options.goBtnText,
                disabled: self._options.disableNewForcePlayer && (self._data.cold_time != 0),
                disableClick: function () {
                    if (self._options.disableNewForcePlayer && (self._data.cold_time != 0)) {
                        if (self._data.cold_time == -1) {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'cannot_defence'));
                        } else {
                            var cold_time = 86400 - self._data.cold_time;
                            var h = parseInt(cold_time / 3600);
                            var m = parseInt((cold_time % 3600) / 60);
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'cannot_defence_coldtime', {
                                hour: h,
                                minutes: m
                            }));
                        }
                    }
                },
                click: function () {
                    self._options.clickFunc(self);
                },
                special: self._options.goSpecialClass,
            });
            this.element().append(self._btn.element());
        },
        _getDefaultOptions: function () {
            return {
                showAttack: true,
                showDefence: true,
                showOffer: true,
                showLogin: true,
                showLevel: false,
                showHr: false,
                goBtnText: Mojo.utils.locale('force', 'contact'),
                goBtnClass: ['go-button'],
                goSpecialClass: 'go-communicate-btn',
                subClass: '',
                clickFunc: $.noop,
            };
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceMemberDetailDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceMemberDetailDialog";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-forcememberdetaildlg');
            var self = this;
            this._player = Mojo.page.Force.getController().getPlayerProfile();
            this._name = $('<div class="name"></div>').append(Mojo.utils.locale('force', 'do_with_member'));
            this._name.find('.pname').append(new Mojo.com.PlayerName(this._data.title_info ? this._data.title_info : {
                player_name: this._data.name
            }).element());
            this._name.appendTo(this._content);
            if (this._player.position_id == 100 && this._data.is_friend == 1) {
                this._actions = self._footer;
                this._name.css('height', 60);
            } else {
                this._actions = $('<div class="actions"></div>').appendTo(this._content);
            }
            var btn_num = 0;
            if (this._player.position_id == 1 && this._player.state_owner == 1 && self._data.has_sobriquet == 0) {
                this._actions.append((new Mojo.ui.Button('assign-btn', {
                    text: Mojo.utils.locale('common', 'assign_title'),
                    click: function () {
                        self.hide();
                        (new Mojo.com.ForceAssignTitleDialog(self._data, {
                            type: 2,
                            playerId: self._data.id,
                            close: function () {
                                self.close();
                            },
                            callback: function () {
                                self._options.callback();
                            },
                        })).open(true);
                    },
                })).element());
                btn_num++;
            }
            if (this._data.is_friend != 1) {
                this._actions.append((new Mojo.ui.Button('add-btn', {
                    special: 'button-big-red',
                    text: Mojo.utils.locale('common', 'add_friend'),
                    click: function () {
                        self.hide();
                        (new Mojo.com.MessageDialog(null, {
                            title: Mojo.utils.locale('common', 'invite_friend'),
                            id: self._data.id,
                            isFriendRequest: true,
                            close: function () {
                                self.show();
                            },
                        })).open(true);
                    },
                })).element());
                btn_num++;
            } else {
                this._actions.append((new Mojo.ui.Button('msg-btn', {
                    special: 'button-big-red',
                    text: self.getL("force", "to_msg"),
                    click: function () {
                        self.hide();
                        (new Mojo.com.MessageDialog(null, {
                            title: self.getL("force", "to_msg"),
                            id: self._data.id,
                            close: function () {
                                self.show();
                            },
                        })).open(true);
                    },
                })).element());
                btn_num++;
            }
            this._actions.append((new Mojo.ui.Button('view-btn', {
                text: Mojo.utils.locale('friend', 'view'),
                click: function () {
                    self.hide();
                    (new Mojo.com.FriendFormationDialog(null, {
                        title: self._data.name,
                        frd_id: self._data.id,
                        frd_name: self._data.name,
                        close: function () {
                            self.show();
                        },
                    })).open(true);
                },
            })).element());
            btn_num++;
            if (this._player.position_id == 1) {
                this._actions.append((new Mojo.ui.Button('adjust-btn', {
                    text: Mojo.utils.locale('force', 'adjust_official'),
                    click: function () {
                        self.hide();
                        (new Mojo.com.ForceMemberAdjustDialog(self._data, {
                            callback: function () {
                                self._options.callback();
                            },
                            close: function () {
                                self.close();
                            },
                        })).open(true);
                    }
                })).element());
                btn_num++;
            }
            if (this._hasOutForceRight(this._player.position_id, this._data.position_id)) {
                this._actions.append((new Mojo.ui.Button('out-btn', {
                    text: Mojo.utils.locale('force', 'out_force'),
                    click: function () {
                        if (self._player.position_id < parseInt(self._data.position_id)) {
                            self.hide();
                            self._showOutForceDialog();
                        } else {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'out_force_tip'));
                        }
                    }
                })).element());
                btn_num++;
            }
            if (btn_num < 5) {
                this._actions.append((new Mojo.ui.Button('close-btn', {
                    text: Mojo.utils.locale('common', 'close'),
                    click: function () {
                        self.close();
                    },
                })).element());
            }
        },
        _hasOutForceRight: function (positionId1, positionId2) {
            var right = false;
            switch (parseInt(positionId1)) {
            case 1:
                right = true;
                break;
            case 2:
                right = positionId2 != 2;
                break;
            case 16:
                right = positionId2 == 100;
                break;
            }
            return right;
        },
        _showOutForceDialog: function () {
            var self = this;
            var msg = $('<div></div>').append(Mojo.utils.locale('force', 'out_force_message'));
            msg.find('.pname').append(new Mojo.com.PlayerName(this._data.title_info ? this._data.title_info : {
                player_name: this._data.name
            }).element());
            (new Mojo.com.MsgInputDialog({
                title: Mojo.utils.locale('force', 'out_force'),
                warnText: msg,
                defaultText: Mojo.utils.locale('force', 'out_force_default_message'),
                leftBtnText: Mojo.utils.locale('common', 'ok'),
                leftBtnClick: function (value, that) {
                    Mojo.ajax('/force/kickPlayer', {
                        player_id: self._data.id,
                        content: value == "" ? undefined : value,
                    }, function (result) {
                        if (result.errorCode == 0) {
                            Mojo.track.onEvent('24_403');
                            that.close();
                            self._options.callback('outforce');
                        } else {
                            Mojo.app.toast.show(result.errorMsg);
                        }
                    });
                },
                close: function () {
                    self.close();
                },
            })).open(true);
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('force', 'member_contact'),
                callback: $.noop,
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.FriendFormationDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.FriendFormationDialog";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-friendformationdlg');
            this.slotDataArr = [];
            var self = this;
            self.panel = self._pagePanel = new Mojo.ui.PagePanel(null, {
                showWait: false,
                scrollable: true,
                needLoad: false,
                direction: 1,
                selector: (new Mojo.com.BaseSlotList({
                    classes: ['general-list-bg-border'],
                    isMine: false,
                    showUnlock: false,
                    friendId: self._options.frd_id,
                    onSelect: function (that, index) {
                        self.panel.selector(index);
                    },
                    onLoaded: function (base_slot_list) {
                        var len = base_slot_list.slotCount;
                        for (var i = 0; i < len; i++) {
                            self._pagePanel.addData(i, i);
                        }
                        self._pagePanel._panel.css({
                            width: (self._pagePanel.element().find('.pagepanel-scroll > .wrapper').outerWidth()) * (base_slot_list.slotCount),
                            height: self._pagePanel.element().find(".pagepanel-scroll > .wrapper").outerHeight()
                        });
                        self._pagePanel.refreshScroll();
                        self._pagePanel.selector(self._selected);
                    }
                })),
                loadFunc: function (that, current) {
                    var selected = parseInt(Mojo.utils.getSomething("selected"));
                    if (!selected || selected < 0) {
                        selected = 0;
                    }
                    if (current == undefined) {
                        current = selected;
                    } else {
                        selected = current;
                    }
                    self._loadData(current, true);
                },
                drawFunc: function (that, data) {
                    if (typeof data != 'object') {
                        var o = new Mojo.Object();
                        $('<div class="waiting"></div>').appendTo(o.element().addClass("panel-element"));
                        return o;
                    }
                    if (data.is_barracks != 1) {
                        return (new Mojo.com.Package(data, {
                            isMine: false,
                            generalClick: function (general) {
                                self._generalClick(general);
                            },
                            entityClick: function (entity) {
                                self._entityClick(entity);
                            }
                        }));
                    } else {
                        return new Mojo.com.PackageBarrack(data, {
                            pid: self._options.frd_id,
                            is_show_friends: 1
                        });
                    }
                }
            });
            this._content.append(self.panel.element());
        },
        _loadData: function (index, display) {
            var self = this;
            var selected = index;
            if (self.slotDataArr[index] && display) {
                self.panel._options.count = self.slotDataArr[index].total;
                self.panel.addData(self.slotDataArr[index].base_slots, index, true);
                if (index >= self.slotDataArr[index].total) {
                    selected = "_end";
                }
                self.panel.selector(selected);
                if (self.slotDataArr[index + 1] == undefined) {
                    self._loadData(index + 1, false);
                }
                return;
            }
            Mojo.ajax("/embed", {
                pid: self._options.frd_id,
                start: index,
                count: 1
            }, function (result) {
                if (result && result.errorCode === 0) {
                    if (display) {
                        self.panel._options.count = result.data.total;
                        self.panel.addData(result.data.base_slots, index, true);
                        if (self.slotDataArr[index + 1] == undefined) {
                            self._loadData(index + 1, false);
                        }
                    }
                    self.slotDataArr[index] = result.data;
                }
                if (index >= result.data.total && display) {
                    selected = "_end";
                }
                if (display) {
                    self.panel.selector(selected);
                }
            }, function () {
                if (display) {
                    self.panel.selector(0);
                }
            });
        },
        _generalClick: function (general) {
            var self = this;
            var data = general.data();
            if (data.player_entity_id) {
                self.hide();
                var generalDetailDialog = new Mojo.ui.Dialog(undefined, {
                    title: Mojo.utils.locale('package', 'general_detail_title'),
                    content: (new Mojo.com.LargeEntity(data, {
                        showSkill: true
                    }).element()),
                    close: function () {
                        self.show();
                    },
                });
                new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('common', 'ok'),
                    special: "button-big-red",
                    click: function () {
                        generalDetailDialog.close();
                    }
                }).element().appendTo(generalDetailDialog._footer);
                generalDetailDialog.open();
            } else {}
        },
        _entityClick: function (entity) {
            var self = this;
            var data = entity.data();
            var dialogTitle = "";
            if (Mojo.utils.isWhat(data.type_id, 'sword')) {
                dialogTitle = Mojo.utils.locale('package', 'sword_detail_title');
            } else if (Mojo.utils.isWhat(data.type_id, 'shield')) {
                dialogTitle = Mojo.utils.locale('package', 'shield_detail_title');
            } else if (Mojo.utils.isWhat(data.type_id, 'mounts')) {
                dialogTitle = Mojo.utils.locale('package', 'mounts_detail_title');
            } else if (Mojo.utils.isWhat(data.type_id, 'treasure')) {
                dialogTitle = Mojo.utils.locale('package', 'treasure_detail_title');
            }
            if (data.player_entity_id) {
                self.hide();
                var entityDetailDialog = new Mojo.ui.Dialog(undefined, {
                    title: dialogTitle,
                    content: (new Mojo.com.LargeEntity(data).element()),
                    close: function () {
                        self.show();
                    },
                });
                new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('common', 'ok'),
                    special: "button-big-red",
                    click: function () {
                        entityDetailDialog.close();
                    }
                }).element().appendTo(entityDetailDialog._footer);
                entityDetailDialog.open();
            } else {}
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('friend', 'formation'),
                frd_id: '',
                frd_name: '',
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.BaseSlotList = w.Mojo.Object.extend({
        clsname: function () {
            return "com.BaseSlotList";
        },
        init: function (options) {
            this._super('com-baseslot-list', options);
            this._hasLoaded = false;
            this._baseSlots = {};
            this._lastSelected = undefined;
            this._scrollDistX = 0;
            this._max_army = 1;
            this.slotCount = 0;
            var self = this;
            var params = (this._options.isMine ? {} : {
                pid: this._options.friendId
            });
            this._list = new Mojo.ui.ListPanel(undefined, {
                pageSize: 20,
                showMore: false,
                loadFunc: function (start, count, packageId) {
                    Mojo.ajax('/embed/simple', params, function (result) {
                        self._max_army = result.data.max_army;
                        if (result.errorCode == 0) {
                            self.slotCount = Mojo.app.baseSlotsCount = result.data.base_slots.length;
                            Mojo.app.simpleData = result.data;
                            if (result.data.base_slots.length < 4) {
                                for (; result.data.base_slots.length < 4;) {
                                    result.data.base_slots.push(undefined);
                                }
                            } else if (self._options.isMine === true && self._options.showUnlock === true) {
                                result.data.base_slots.push(undefined);
                            }
                            self._list.element().width(result.data.base_slots.length * self._options.unitWidth);
                            self._list.appendData(result.data.base_slots);
                            self._scroll.element().addClass('canswitch');
                            if (self.changeBtn != undefined) {
                                self.changeBtn.element().remove();
                            }
                            self._addPackageSwitchBtn(result.data.army_id, result.data.player_level < result.data.permit_change_leve);
                            self._scroll.refresh();
                        } else {
                            self._list.appendData(null);
                        }
                    }, function () {
                        self._list.appendData(null);
                    });
                },
                drawFunc: function (data) {
                    return self._getBaseSlotEntity(data);
                },
                onLoaded: function (listpanel) {
                    if (Mojo.utils.getSomething("selected")) {
                        if (Mojo.utils.getSomething("selected") == -1) {
                            self.selector(Mojo.app.baseSlotsCount - 1);
                        } else {
                            self.selector(parseInt(Mojo.utils.getSomething("selected")));
                        }
                    }
                    if (self._hasLoaded === false && self._options.onLoaded instanceof Function) {
                        self._options.onLoaded(self);
                    }
                    self._hasLoaded = true;
                }
            });
            this._scroll = new Mojo.ui.Scroll(undefined, this._list, {
                direction: 1,
                classes: ['all-small-card-border'],
                showArrow: true,
                step: self._options.unitWidth,
            });
            this.element().append(this._scroll.element());
        },
        _addPackageSwitchBtn: function (current, disabled) {
            var self = this;
            if (self._options.isMine && self._options.showSwitch) {
                self.changeBtn = new Mojo.ui.Button(undefined, {
                    text: self.getL('package', 'package_switch'),
                    special: 'changePackage-btn',
                    disabled: disabled,
                    disableClick: function () {
                        Mojo.app.toast.show(Mojo.utils.locale('package', 'cannot_swicth_package'));
                    },
                    click: function () {
                        self._showPackageSwitchDialog(current);
                    }
                });
                self.changeBtn.element().appendTo(this.element());
            }
        },
        _showPackageSwitchDialog: function (current) {
            current = parseInt(current);
            var self = this;
            var content = $('<div class="paragraph"></div>');
            var pName = self.getL('package', 'package_num' + current);
            $('<div class="package_tip"></div>').html(self.getL('package', 'package_using', {
                packageName: pName
            })).appendTo(content);
            for (var i = 1; i <= self._max_army; i++) {
                new Mojo.ui.Button(undefined, {
                    text: self.getL('package', 'package_num' + i),
                    special: current == i ? "current" : "",
                    click: (function (i, c) {
                        return function () {
                            if (i != c) {
                                self._switchPackage(i);
                            } else {
                                Mojo.app.toast.show(Mojo.utils.locale('package', 'has_mount'));
                            }
                        };
                    })(i, current)
                }).element().appendTo(content);
            }
            self.dlg = new Mojo.ui.Dialog(undefined, {
                classes: ["change-package"],
                title: self.getL('package', 'package_switch1'),
                content: content
            });
            self.dlg.open();
        },
        _switchPackage: function (index) {
            var self = this;
            Mojo.ajax('/embed/ChangeArmy', {
                army_id: index
            }, function (response) {
                if (response.errorCode == 0) {
                    if (self._options.updateSlotArr instanceof Function) {
                        self._options.updateSlotArr();
                    }
                    self.reLoad();
                    self.dlg.close();
                    self._options.onPackageChange();
                } else {
                    self.dlg.close();
                    Mojo.app.toast.show(response.errorMsg);
                }
            }, function () {}, {
                showWait: true
            });
        },
        reLoad: function (index) {
            this._list.element().find(".mojo-com-baseslotlist-element").remove();
            this._list._hasLoaded = false;
            this._hasLoaded = false;
            this._baseSlots = {};
            this._lastSelected = undefined;
            this._scrollDistX = 0;
            this._list._load();
            if (this._options.onReload instanceof Function) {
                this._options.onReload(this);
            }
        },
        refreshAll: function (data) {
            if (Array.isArray(data.list)) {
                var self = this;
                $.each(data.list, function (i, d) {
                    var baseSlotId = "base_slot_" + d.player_base_slot_id;
                    var slotObj = self._baseSlots[baseSlotId];
                    if (slotObj instanceof Object) {
                        var selected = "";
                        if (slotObj.element().find(".card-border").hasClass("selected") || slotObj.element().find(".card-slot").hasClass("selected")) {
                            selected = "selected";
                        }
                        slotObj.element().children().remove();
                        if (d.player_entity_id == null || d.player_entity_id == "") {
                            slotObj.element().append('<div class="card-slot ' + selected + '"></div>');
                            slotObj.element().removeClass('mojo-com-light');
                        } else {
                            slotObj.element().append('<img src="' + d.small_image + '">');
                            slotObj.element().append('<div class="card-border ' + selected + '"></div>');
                        }
                        if (selected == "selected") {
                            slotObj.element().find('img').addClass('img-class');
                        }
                    }
                });
            }
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(this._super(), {
                unitWidth: self.getR("unitWidth"),
                onLoaded: undefined,
                onSelect: undefined,
                showUnlock: false,
                isMine: true,
                friendId: undefined,
                onPackageChange: $.noop,
                showSwitch: false,
                onReload: undefined
            });
        },
        _getBaseSlotEntity: function (data) {
            var obj = new Mojo.Object(undefined, {
                classes: ['mojo-com-baseslotlist-element', 'image'],
            });
            if (data == undefined) {
                obj.element().append('<div class="locked"></div>');
            } else {
                if (data.is_barracks == 1) {
                    data.player_base_slot_id = data.id;
                    data.player_entity_id = data.id;
                }
                var baseSlotId = "base_slot_" + data.player_base_slot_id;
                this._baseSlots[baseSlotId] = obj;
                if (data.player_entity_id == null || data.player_entity_id == "") {
                    obj.element().append('<div class="card-slot"></div>');
                    if (this._options.isMine) {
                        Mojo.light.showLight('empty-card-border|1');
                    }
                } else {
                    obj.element().append('<img src="' + data.small_image + '">');
                    obj.element().append('<div class="card-border"></div>');
                }
            }
            var self = this;
            if (this._lastSelected === undefined) {
                this._lastSelected = obj.element();
                this._lastSelected.find(".card-border").addClass("selected");
            }
            obj.element().click(function () {
                if (data == undefined) {} else if (data.player_entity_id == null) {
                    obj.element().removeClass('mojo-com-light');
                } else {}
                self._lastSelected.find(".card-border").removeClass("selected");
                self._lastSelected.find(".card-slot").removeClass("selected");
                self._lastSelected.find("img").removeClass("img-class");
                obj.element().find(".card-border").addClass("selected");
                obj.element().find(".card-slot").addClass("selected");
                obj.element().find("img").addClass("img-class");
                self._lastSelected = obj.element();
                if (self._options.onSelect instanceof Function) {
                    self._options.onSelect(self, obj.element().index(), data);
                }
            });
            return obj;
        },
        selector: function (current) {
            var self = this;
            if (Mojo.utils.isNone(self._lastSelected) == false) {
                self._lastSelected.find(".card-border").removeClass("selected");
                self._lastSelected.find(".card-slot").removeClass("selected");
                self._lastSelected.find("img").removeClass("img-class");
            }
            if (this._options.isMine) {
                Mojo.light.showLight('empty-card-border|1');
            }
            $.each(this.element().find(".mojo-com-baseslotlist-element"), function (i, e) {
                if (current == i) {
                    $(e).find(".card-border").addClass("selected");
                    $(e).find(".card-slot").addClass("selected");
                    $(e).find("img").addClass("img-class");
                    self._lastSelected = $(e);
                    if (self._lastSelected.find('.card-slot').hasClass('mojo-com-light')) {
                        self._lastSelected.find('.card-slot').removeClass('mojo-com-light');
                    }
                    var listleft = self._scroll.scrollerLeft();
                    if (self._options.unitWidth > 0) {
                        var r = i - Math.abs(listleft / self._options.unitWidth);
                        if (r > 2 || r < 0) {
                            var l = ((i - 1) * self._options.unitWidth);
                            if (self._scrollDistX != l) {
                                self._scroll.scrollTo(l, 0);
                                self._scrollDistX = l;
                            }
                        }
                    }
                }
            });
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.PackageEgg = w.Mojo.Object.extend({
        init: function (data, options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-packageegg');
            this._data = data;
            this._addContent();
        },
        _addContent: function () {
            var self = this;
            $("<div class='tip'></div>").html(self.getL('package', 'slot_unlock_award')).appendTo(this.element());
            new Mojo.com.LargeEntity(self._options.niudan, {
                showDescription: false,
                showEntityEffect: false
            }).element().appendTo(this.element());
            new Mojo.ui.Button(undefined, {
                text: self.getL('package', 'start_niudan'),
                click: function () {
                    self._options.callback();
                }
            }).element().appendTo(this.element());
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                callback: $.noop,
                niudan: undefined
            });
        }
    });
    w.Mojo.com.Skill = w.Mojo.Object.extend({
        clsname: function () {
            return "com.Package";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('card-skills');
            $('<div class="title"></div>').appendTo(this.element());
            $('<div class="skills"></div>').appendTo(this.element());
            this._addContent();
        },
        _addContent: function () {
            var cardSkills = "";
            if (Array.isArray(this._data.skills) && this._data.skills.length <= 0) {
                cardSkills += '<div class="skill-group"><span class="skill">(' + Mojo.utils.locale('package', 'null_skills') + ')</span></div>';
            } else if (this._data.skills) {
                var sindex = 0;
                for (var index in this._data.skills) {
                    var skill = this._data.skills[index];
                    if (sindex == 0) {
                        cardSkills += '<div class="skill-group">';
                    } else if (sindex > 0 && sindex % 2 == 0) {
                        cardSkills += '</div><div class="skill-group">';
                    }
                    var skillName = (Mojo.utils.isNone(skill.name) ? "skill-" + sindex : skill.name);
                    if (skillName.indexOf('<span') == 0) {
                        skillName = skillName.substring(0, skillName.indexOf('>') + 1) + '&#149 ' + skillName.substring(skillName.indexOf('>') + 1, skillName.length);
                    } else {
                        skillName = '<span>&#149 ' + skillName + '</span>';
                    }
                    cardSkills += '<span class="skill">' + skillName + '</span>';
                    sindex++;
                }
                cardSkills += '</div>';
            }
            this.element().find(".title").html(Mojo.utils.locale('package', 'skill'));
            this.element().find(".skills").html(cardSkills);
            this.element().show();
        },
        refresh: function (data) {
            this._data = data;
            this.element().find(".title").empty();
            this.element().find(".skills").empty();
            this._addContent();
        }
    });
    w.Mojo.com.Package = w.Mojo.Object.extend({
        clsname: function () {
            return "com.Package";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this._general = undefined;
            this._sword = undefined;
            this._shield = undefined;
            this._mounts = undefined;
            this._treasure = undefined;
            this.element().addClass("mojo-com-package");
            this._repaint();
            this.refresh();
        },
        _repaint: function () {
            this.element().empty();
            if (this._options.isNewSlot) {
                this._addEggContent();
            } else {
                this._addContent();
            }
        },
        _addEggContent: function () {
            var self = this;
            var egg = new Mojo.com.PackageEgg(this._data, {
                callback: function () {
                    self._options.niudanClick(self);
                },
                niudan: self._options.niudan
            });
            this.element().append(egg.element());
        },
        _addContent: function () {
            var self = this;
            self._ge = $("<div class='entity-main'></div>").appendTo(this.element());
            self._entity = $('<div class="entities"></div>').appendTo(self._ge);
        },
        refresh: function (data) {
            if (this._options.isNewSlot == true) return;
            if (data instanceof Object) {
                this._data = data;
            }
            var self = this;
            if (this._general === undefined) {
                this._general = new Mojo.com.PackageGeneral(this._data, {
                    isMine: self._options.isMine,
                    click: function (general) {
                        if (self._options.generalClick instanceof Function) {
                            self._options.generalClick(general);
                        }
                    }
                });
                this._general.element().appendTo(self._ge);
                if (self._options.isMine) {
                    this._skills = new Mojo.com.Skill(this._data);
                    this._skills.element().appendTo(this.element());
                }
            } else {
                this._general.refresh(data);
                if (self._options.isMine) {
                    this._skills.refresh(data);
                }
            }
            $.each(this._data.entity_slot_list, function (i, d) {
                var entityId = "_" + Mojo.utils.isWhat(d.type_id);
                if (self[entityId] === undefined) {
                    self[entityId] = new Mojo.com.PackageEntity(d, {
                        isMine: self._options.isMine,
                        click: function (entity) {
                            if (self._options.entityClick instanceof Function) {
                                self._options.entityClick(entity, self._data);
                            }
                        }
                    });
                    self[entityId].element().appendTo(self._entity);
                    if (d.type_id == '' + self._data.light) {
                        self[entityId].element().find('.no-entity').addClass('mojo-com-light');
                    }
                } else {
                    self[entityId].refresh(d);
                }
            });
        },
        getObjectByType: function (type, notEmpty) {
            var o = this['_' + type];
            if (o) {
                if (notEmpty === true && o.isEmpty() === true) {
                    return undefined;
                }
                return o;
            }
            return undefined;
        },
        _getDefaultOptions: function () {
            return {
                isMine: true,
                generalClick: undefined,
                entityClick: undefined,
                isNewSlot: false,
                niudanClick: $.noop,
                niudan: undefined
            };
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.PackageBarrack = w.Mojo.Object.extend({
        clsname: function () {
            return "com.BarrackPackage";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this._MAXLEVEL = 15;
            this.element().addClass('mojo-com-barrackpackage mojo-com-package');
            this.load();
        },
        load: function () {
            var self = this;
            var params = {};
            if (self._options.is_show_friends == 1) {
                params.pid = self._options.pid;
            }
            Mojo.ajax("/barracks", params, function (response) {
                if (response && response.errorCode === 0) {
                    response.data.left.entities.length = 5;
                    response.data.right.entities.length = 5;
                    response.data.center.entities.length = 5;
                    var armyPosition = 0;
                    for (var i = 0; i < self._MAXLEVEL; i++) {
                        var army = i % 3;
                        var entities = null;
                        if (army == 0) {
                            entities = response.data.left.entities;
                        } else if (army == 1) {
                            entities = response.data.right.entities;
                        } else if (army == 2) {
                            entities = response.data.center.entities;
                        }
                        if (!entities[armyPosition]) {
                            entities[armyPosition] = {
                                unlock: 0
                            };
                        }
                        entities[armyPosition].unlock_level = i + 1;
                        if (army == 2) {
                            armyPosition++;
                        }
                    }
                    self.barracksData = response.data;
                    $('<div class="title"></div>').html(Mojo.utils.locale('package', 'barrack_level', {
                        level: response.data.level
                    })).appendTo(self.element());
                    self._addContent(response.data);
                } else {
                    Mojo.app.toast.show(response.errorMsg);
                }
            }, function () {}, {
                showWait: true
            });
        },
        _addContent: function (d) {
            this._addLeftArmy(d);
            this._addRightArmy(d);
            this._addCenterArmy(d);
            if (this._options.is_show_friends == 0) {
                this._addFooter(d);
            }
        },
        _addLeftArmy: function (d) {
            var ld = d.left;
            var topScroll = $('<div class="army left-army"><div class="leftTitle">' + Mojo.utils.locale('package', 'barrack_left_army') + '</div><div class="topScroll general-list-bg-border"></div></div>').appendTo(this.element());
            var bottom = $('<div class="bottom"></div>').html(Mojo.utils.locale('package', 'barrack_attack', {
                min: ld.attack_min,
                max: ld.attack_max
            })).appendTo(topScroll);
            var scroll = this._getArmyScroll(ld, 0);
            $(topScroll).find('.topScroll').append(scroll.element());
        },
        _addRightArmy: function (d) {
            var rd = d.right;
            var topScroll = $('<div class="army right-army"><div class="leftTitle">' + Mojo.utils.locale('package', 'barrack_right_army') + '</div><div class="topScroll general-list-bg-border"></div></div>').appendTo(this.element());
            var bottom = $('<div class="bottom"></div>').html(Mojo.utils.locale('package', 'barrack_fangyu', {
                min: rd.defence_min,
                max: rd.defence_max
            })).appendTo(topScroll);
            var scroll = this._getArmyScroll(rd, 1);
            $(topScroll).find('.topScroll').append(scroll.element());
        },
        _addCenterArmy: function (d) {
            var cd = d.center;
            var topScroll = $('<div class="army center-army"><div class="leftTitle">' + Mojo.utils.locale('package', 'barrack_center_army') + '</div><div class="topScroll general-list-bg-border"></div></div>').appendTo(this.element());
            var bottom = $('<div class="bottom"></div>').html(Mojo.utils.locale('package', 'barrack_kezhi', {
                value: cd.skill_num
            })).appendTo(topScroll);
            var scroll = this._getArmyScroll(cd, 2);
            $(topScroll).find('.topScroll').append(scroll.element());
        },
        _addFooter: function (d) {
            var self = this;
            var footer = $('<div class="foolter"></div>').appendTo(this.element());
            var progress = $('<div class="progress-div">' + Mojo.utils.locale('package', 'barrack_jingyan') + '</div>').appendTo(footer);
            self.jingyanProgress = new Mojo.ui.Progress(undefined, {
                classes: ['xp'],
                labelTemplate: '#{divide}',
            });
            self.jingyanProgress.value({
                value: d.exp,
                max: d.exp_conf
            });
            var upBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('package', 'barrack_up'),
                classes: ['barrack-up-button'],
                special: "button-big-red",
                click: function () {
                    self._upClick();
                }
            });
            progress.append(self.jingyanProgress.element());
            progress.append($('<div class="jingyan-border"></div>'));
            footer.append(upBtn.element());
        },
        _upClick: function () {
            var self = this;
            self.element().hide();
            self._barrackUp = new Mojo.com.BarrackUp(self.barracksData, {
                onLoadCallback: function () {},
                onLoaded: function () {},
                callback: function () {},
                backCallback: function () {
                    self.element().show();
                    if (self.isLevelUp == 1) {
                        self._refreshAll();
                        delete self.isLevelUp;
                    }
                },
                levelUpCallback: function (flag, d) {
                    if (flag == 1) {
                        self.isLevelUp = 1;
                    } else {
                        self.jingyanProgress.value({
                            value: d.exp,
                            max: d.exp_conf
                        });
                    }
                }
            });
        },
        _getArmyScroll: function (d, army) {
            var self = this;
            var _list = new Mojo.ui.ListPanel(undefined, {
                pageSize: 20,
                showMore: false,
                loadFunc: function () {
                    setTimeout(function () {
                        var arr = new Array(5);
                        var array = d.entities;
                        for (var i = 0; i < array.length; i++) {
                            arr[i] = array[i];
                            arr[i].index = i;
                            arr[i].army = army;
                        }
                        _list.element().width(arr.length * self._options.unitWidth);
                        _list.appendData(arr);
                        _scroll.refresh();
                    });
                },
                drawFunc: function (data) {
                    return self._getArmyScrollEle(data);
                },
                onLoaded: function (listpanel) {}
            });
            var _scroll = new Mojo.ui.Scroll(undefined, _list, {
                direction: 1,
                classes: ['all-small-card-border', 'left-army'],
                showArrow: true,
                step: self._options.unitWidth,
                isStopPropagation: true
            });
            return _scroll;
        },
        _getArmyScrollEle: function (data) {
            var self = this;
            var obj = new Mojo.Object(undefined, {
                classes: ['mojo-com-barrack-element', 'image'],
            });
            var ele = obj.element();
            if (data == undefined || data.unlock == 0) {
                ele.append('<div class="locked"></div><div class="lv">' + 'LV' + data.unlock_level + '</div>');
            } else {
                if (data.player_entity_id == null || data.player_entity_id == "") {
                    ele.append('<div class="card-slot"></div>');
                } else {
                    ele.append('<img src="' + data.small_image + '">');
                    ele.append('<div class="card-border"></div>');
                }
            }
            if (self._options.is_show_friends == 0) {
                obj.element().click(function () {
                    self._armyScrollEleClick(data);
                });
            }
            return obj;
        },
        _armyScrollEleClick: function (data) {
            var self = this;
            if (data.unlock == 1) {
                if (!data.player_entity_id) {
                    self._generalClick(data);
                } else {
                    Mojo.ajax("/embed", {
                        army: data.army || 0,
                        is_barracks: 1,
                        start: data.index,
                        count: 1
                    }, function (response) {
                        if (response && response.errorCode === 0) {
                            var _d = {
                                is_barracks: 1,
                                getData: function () {
                                    response.data.base_slots[0].army = data.army;
                                    return response.data.base_slots[0];
                                },
                                refresh: function () {}
                            };
                            self._generalClick(_d);
                        }
                    }, function () {});
                }
            } else if (data.unlock == 0) {
                Mojo.app.toast.show(Mojo.utils.locale('package', 'barrack_unlockLevel', {
                    level: data.unlock_level
                }));
            }
        },
        _generalClick: function (general) {
            var self = this;
            var data = general.getData ? general.getData() : general;
            if (data.player_entity_id) {
                var generalDetailDialog = new Mojo.ui.Dialog(undefined, {
                    title: Mojo.utils.locale('package', 'general_detail_title'),
                    content: (new Mojo.com.LargeEntity((data.isTmp == true ? data.player_entity_id : data), {
                        showSkill: true
                    }).element())
                });
                var goIntensify = new Mojo.ui.Button(undefined, {
                    text: (parseInt(data.is_max_level) == 1 && parseInt(data.rarity_id) <= 3 ? Mojo.utils.locale('common', 'go_rebirth') : Mojo.utils.locale('common', 'go_intensify')),
                    special: "button-big-red",
                    click: function () {
                        if (self._hasTutorial === false && Mojo.utils.getSomething('tutorial')) {
                            Mojo.app.redirect("/intensify", {
                                entity: data.player_entity_id,
                                tutorial: 'yes'
                            });
                        } else {
                            if (parseInt(data.is_max_level) == 1 && parseInt(data.rarity_id) <= 3) {
                                Mojo.app.redirect("/intensify", {
                                    entity: data.player_entity_id,
                                    selected: 1
                                });
                            } else {
                                Mojo.app.redirect("/intensify", {
                                    entity: data.player_entity_id
                                });
                            }
                        }
                    }
                });
                goIntensify.element().appendTo(generalDetailDialog._footer);
                new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('package', 'general_umount'),
                    special: "button-big-blue",
                    click: function () {
                        generalDetailDialog.close();
                        self.element().hide();
                        self._entityPreview = new Mojo.com.EntityPreview({
                            typeId: 1,
                            rarityId: '1,2,3,4,5',
                            orderId: 1,
                            type: "embed",
                            army: data.army || 0,
                            is_barracks: 1,
                            isbarracks_up: 0,
                            changeGeneral: true,
                            onLoadCallback: function () {},
                            callback: function (generalId, chooseGeneral) {
                                self.element().show();
                                self._changeGeneral(general, generalId);
                            },
                            backCallback: function () {
                                self.element().show();
                            }
                        });
                        self._entityPreview.element().appendTo(document.body);
                    }
                }).element().appendTo(generalDetailDialog._footer);
                generalDetailDialog.open();
            } else {
                self.element().hide();
                self._entityPreview = new Mojo.com.EntityPreview({
                    typeId: 1,
                    rarityId: '1,2,3,4,5',
                    orderId: 1,
                    type: "embed",
                    is_barracks: 1,
                    isbarracks_up: 0,
                    changeGeneral: true,
                    army: data.army || 0,
                    onLoadCallback: function () {},
                    onLoaded: function () {},
                    callback: function (generalId, chooseGeneral) {
                        if (!generalId) {
                            return;
                        }
                        self.element().show();
                        self._mountGeneral(general, generalId);
                    },
                    backCallback: function () {
                        self.element().show();
                    }
                });
                self._entityPreview.element().appendTo(document.body);
            }
        },
        _playGeneralSound: function (reserved_1) {
            if (parseInt(reserved_1) === 1) {
                Mojo.gap.soundPlay("03_male_voice");
            } else {
                Mojo.gap.soundPlay("04_female_voice");
            }
        },
        _mountGeneral: function (general, generalId) {
            var url = '/embed/put';
            this._embedChange(general, generalId, url);
        },
        _changeGeneral: function (general, generalId) {
            var url = '/embed/change';
            this._embedChange(general, generalId, url);
        },
        _embedChange: function (general, generalId, url) {
            var self = this;
            var data = general.getData ? general.getData() : general;
            if (data && (data.isTmp == true || data.player_entity_id != generalId)) {
                Mojo.ajax(url, {
                    type: 0,
                    slot_id: data.player_base_slot_id,
                    entity_id: generalId,
                    is_barracks: 1
                }, function (response) {
                    if (response && response.errorCode === 0) {
                        self._playGeneralSound(response.data.entity_info.reserved_1);
                        var data = response.data.player;
                        var d = {};
                        if (data.attack_min != undefined && data.attack_min != null) {
                            d["attack_min"] = data.attack_min;
                        }
                        if (data.attack_max != undefined && data.attack_max != null) {
                            d["attack_max"] = data.attack_max;
                        }
                        if (data.defence_min != undefined && data.defence_min != null) {
                            d["defence_min"] = data.defence_min;
                        }
                        if (data.defence_max != undefined && data.defence_max != null) {
                            d["defence_max"] = data.defence_max;
                        }
                        self._options.corpsProfile.data(d);
                        self._refreshAll(response.data, data);
                    } else {
                        Mojo.app.toast.show(response.errorMsg);
                    }
                }, function () {}, {
                    showWait: true
                });
            }
        },
        _refreshData: function (d) {
            var info = d.barracks_info;
            var attackMax = info.attack_max;
            var attackMin = info.attack_min;
            var defenceMax = info.defence_max;
            var defenceMin = info.defence_min;
            var skillsNum = info.skills_num;
            this.element().find('.left-army .attack').html(attackMin + ' - ' + attackMax);
            this.element().find('.right-army .attack').html(defenceMin + ' - ' + defenceMax);
            this.element().find('.center-army .attack').html(skillsNum);
        },
        _refreshAll: function () {
            this.element().empty();
            this.load();
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(this._super(), {
                unitWidth: self.getR("unitWidth"),
                corpsProfile: undefined,
                is_show_friends: 0
            });
        },
    });
    w.Mojo.com.BarrackUp = w.Mojo.Object.extend({
        clsname: function () {
            return "com.BarrackPackage";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-barrackup');
            this.element().appendTo(document.body);
            this.jisiGeneralIds = new Array(5);
            this.intensifyPreviewDatas = new Array(5);
            this._isMaxLevel = false;
            this._MAXLEVEL = 15;
            this._MAXCOUNT = 5;
            this._addTabs();
            this._addBtns();
            this._load();
        },
        _load: function () {
            this._addContent();
            this._setTopInfo();
            this._refresh();
        },
        _refresh: function (preview) {
            var self = this;
            var ids = self._getIds();
            if (ids.length <= 0) {
                self._jisiBtn.disable(true);
                self._resetBtn.disable(true);
            } else {
                self._jisiBtn.disable(false);
                self._resetBtn.disable(false);
            }
            Mojo.ajax('/barracks/intensify', {
                ids: ids.join(','),
                preview: preview
            }, function (response) {
                if (response.errorCode == 0) {
                    self.intensifyPreviewDatas = new Array(5);
                    for (var i = 0; i < self.jisiGeneralIds.length; i++) {
                        if (self.jisiGeneralIds[i]) {
                            self.intensifyPreviewDatas[i] = response.data.entities[self.jisiGeneralIds[i]];
                        }
                    }
                    self.intensifyPreviewData = response.data;
                    if (self._data.level >= self._MAXLEVEL) {
                        self._isMaxLevel = true;
                        self._jisiBtn.disable(true);
                    }
                    self._setBottomInfo();
                    self._addScrollContent();
                } else {
                    Mojo.app.toast.show(response.errorMsg);
                }
            }, function () {}, {
                showWait: true
            });
        },
        _addTabs: function () {
            this._tabs = new Mojo.ui.Tabs();
            this.element().append(this._tabs.element());
            this._tabs.addTab(Mojo.utils.locale("package", "barrack_army"));
            this._panel = this._tabs.element().find('.panel').addClass('box-outter');
        },
        _addBtns: function () {
            var self = this;
            this._backButton = new Mojo.ui.Button('confirm-button', {
                text: Mojo.utils.locale('common', 'back'),
                click: function () {
                    self.element().remove();
                    self._options.backCallback();
                },
            });
            this._backButton.element().addClass('confirm-button').appendTo(this.element());
        },
        _addContent: function () {
            var self = this;
            var topContent = $('<div class="topContent"></div>').appendTo(this._panel);
            var left = $('<div class="left"></div>').appendTo(topContent);
            $('<div class="level">-</div><div class="rightIcon"></div><div><div class="label">' + Mojo.utils.locale("package", "barrack_army") + '</div><div class="barDiv"></div></div>').appendTo(left);
            this._armyGuideButton = $('<div class="army-guide-btn">' + Mojo.utils.locale("package", "barrack_guid") + '</div>').bind('click', function () {
                self._armyGuideClick();
            });
            var right = $('<div class="right"></div>').appendTo(topContent);
            this._armyGuideButton.appendTo(right);
            var centerContent = $('<div class="centerContent"></div>').appendTo(this._panel);
            var scrollTitle = $('<div class="scrollTitle">' + Mojo.utils.locale("package", "barrack_select_jisiCard") + '</div>').appendTo(centerContent);
            this._addScrollContent();
            $('<div class="exp"><span class="label">' + Mojo.utils.locale("package", "barrack_getJingyan") + '</span><span class="value">-</span></div><div class="exp exp_ok" style="display: none"><span class="label">' + Mojo.utils.locale("package", "barrack_jisiOk") + '</span><span class="value">-</span></div>').appendTo(centerContent);
            $('<div class="robCount"><span class="label">' + Mojo.utils.locale("package", "barrack_jisiBaowu_num") + '</span><span class="value">-</span></div>').appendTo(centerContent);
            $('<div class="explain"><div class="l"><span class="icon">*</span><span class="text">' + Mojo.utils.locale("package", "barrack_jihuojineng") + '</span></div><div class="r"><span class="icon">*</span><span class="text">' + Mojo.utils.locale("package", "barrack_jihuojiangli") + '</span></div></div>').appendTo(centerContent);
            var bottomContent = $('<div class="bottomContent"></div>').appendTo(centerContent);
            this._jisiBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale("package", "barrack_jisi"),
                classes: ['jisi'],
                special: "button-big-red",
                disabled: true,
                click: function () {
                    self._jisiClick();
                },
                disableClick: function () {
                    if (!self._isMaxLevel) {
                        Mojo.app.toast.show(Mojo.utils.locale('package', 'barrack_disabled_jisi_btn'));
                    } else {
                        Mojo.app.toast.show(Mojo.utils.locale('package', 'barrack_level_max_guid'));
                    }
                }
            });
            this._jisiBtn.element().appendTo(bottomContent);
            this._resetBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale("package", "barrack_reset"),
                classes: ['reset'],
                click: function () {
                    self._resetClick();
                },
                disableClick: function () {
                    Mojo.app.toast.show(Mojo.utils.locale('package', 'barrack_disabled_jisi_btn'));
                }
            });
            this._resetBtn.element().appendTo(bottomContent);
        },
        _addScrollContent: function () {
            var self = this;
            var p = self._panel.find('.centerContent');
            var scrollContent = p.find('.scrollContent');
            if (scrollContent.length == 0) {
                scrollContent = $('<div class="scrollContent"></div>');
                scrollContent.appendTo(p);
            } else {
                scrollContent.empty();
            }
            for (var i = 0; i < 5; i++) {
                var scrollEle = this.intensifyPreviewDatas[i];
                var entity = new Mojo.com.BarrackUpEntity(scrollEle, {
                    _idx: i,
                    _scrollEleClick: function (d, idx) {
                        self._scrollEleClick(d, idx);
                    }
                });
                scrollContent.append(entity.element());
            }
        },
        _setTopInfo: function () {
            var level = this._data.level;
            var exp = this._data.exp;
            var exp_conf = this._data.exp_conf;
            this._panel.find('.topContent .level').html(level);
            if (this.barrackArmyProgress) {
                this.barrackArmyProgress.value(exp);
            } else {
                this.barrackArmyProgress = new Mojo.ui.Progress(undefined, {
                    classes: ['xp'],
                    labelTemplate: '#{divide}',
                    max: exp_conf,
                    min: 0,
                    value: exp
                });
                this.barrackArmyProgress.element().appendTo(this._panel.find('.topContent .barDiv'));
            }
            this.barrackArmyProgress.value({
                value: exp,
                max: exp_conf
            });
        },
        _setBottomInfo: function () {
            var exp = 0;
            var treasure_num = 0;
            if (this.intensifyPreviewData) {
                var exp_max = "" + this.intensifyPreviewData.exp_max;
                var exp_min = "" + this.intensifyPreviewData.exp_min;
                if (exp_max == 'undefined' || exp_min == 'undefined') {
                    exp = 0;
                } else {
                    exp = exp_min + '-' + exp_max;
                }
                treasure_num = this.intensifyPreviewData.treasure_num;
            }
            this._panel.find('.centerContent .robCount .value').html(treasure_num);
            this._panel.find('.centerContent .exp .value').html(exp);
        },
        _armyGuideClick: function () {
            var content = $('<div class="paragraph"></div>').html(Mojo.utils.locale('package', 'barrack_armyguide_content'));
            new Mojo.com.CommonDialog(undefined, {
                title: Mojo.utils.locale('package', 'barrack_armyguide_title'),
                content: content,
                leftBtnText: Mojo.utils.locale('ui', 'Close'),
                leftBtnClick: function (that) {
                    that.close();
                },
            }).open();
        },
        _getIds: function () {
            var self = this;
            var ids = [];
            for (var i = 0; i < self.jisiGeneralIds.length; i++) {
                if (self.jisiGeneralIds[i]) {
                    ids.push(self.jisiGeneralIds[i]);
                }
            }
            return ids;
        },
        _jisiClick: function () {
            var self = this;
            var ids = self._getIds();
            var exp = 0;
            var exp_max = "" + this.intensifyPreviewData.exp_max;
            var exp_min = "" + this.intensifyPreviewData.exp_min;
            if (exp_max == 'undefined' || exp_min == 'undefined') {
                exp = 0;
            } else {
                exp = exp_min + '-' + exp_max;
            }
            var generals = {};
            for (var j = 0; j < ids.length; j++) {
                var id = ids[j];
                var entity = this.intensifyPreviewData.entities[id];
                var gId = entity.id;
                if (generals[gId]) {
                    ++generals[gId].num;
                } else {
                    generals[gId] = {
                        name: entity.name,
                        num: 1
                    };
                }
            }
            var jisiCard = [];
            for (var key in generals) {
                var g = generals[key];
                jisiCard.push(g.name + '×' + g.num);
            }
            var content = $('<div class="paragraph"></div>').html(Mojo.utils.locale('package', 'barrack_jisiok_content', {
                jisiCard: jisiCard.join(','),
                exp: exp
            }));
            new Mojo.com.CommonDialog(undefined, {
                title: Mojo.utils.locale('package', 'barrack_jisiok_title'),
                content: content,
                leftBtnText: Mojo.utils.locale('common', 'ok'),
                leftBtnClick: function (that) {
                    Mojo.ajax("/barracks/intensify", {
                        ids: ids.join(','),
                        preview: 0
                    }, function (response) {
                        that.close();
                        Mojo.gap.intensifyAnimationPlay();
                        if (response && response.errorCode === 0) {
                            var d = response.data;
                            self.element().find('.exp').hide();
                            self.element().find('.exp_ok').show();
                            self.jisiGeneralIds = new Array(5);
                            self.intensifyPreviewDatas = new Array(5);
                            self.intensifyPreviewData = d;
                            self._data.level = d.level;
                            self._data.exp = d.exp;
                            self._data.exp_conf = d.exp_conf;
                            self._setTopInfo();
                            self._setBottomInfo();
                            self._addScrollContent();
                            self._panel.find('.centerContent .exp .value').html(d.add_exp);
                            self._jisiBtn.disable(true);
                            self._resetBtn.disable(true);
                            if (d.level_up == 1) {
                                self._options.levelUpCallback(1);
                                self._showUpSuccessDlg();
                            } else {
                                self._options.levelUpCallback(0, d);
                            }
                            if (d.level >= self._MAXLEVEL) {
                                self._isMaxLevel = true;
                                self._jisiBtn.disable(true);
                            }
                            var p = self._panel.find('.centerContent');
                            p.removeClass('specialContent');
                        } else {
                            Mojo.app.toast.show(response.errorMsg);
                        }
                    }, function () {}, {
                        showWait: true
                    });
                },
                rightBtnText: Mojo.utils.locale('ui', 'Close'),
                rightBtnClick: function (that) {
                    that.close();
                },
            }).open();
        },
        _showUpSuccessDlg: function () {
            var barrack_level_up = new Mojo.com.CommonDialog(undefined, {
                title: Mojo.utils.locale('package', 'barrack_up_ok'),
                classes: ['army-up-dlg'],
                leftBtnText: Mojo.utils.locale('ui', 'Close'),
                leftBtnClick: function (that) {
                    that.close();
                },
            });
            var content1 = $('<div class="paragraph barrack-armyup-content1"></div>').html(Mojo.utils.locale('package', 'barrack_armyup_content1')).appendTo(barrack_level_up._content);
            var content2 = $('<div class="barrack-level-' + this._data.level + '"></div>').appendTo(barrack_level_up._content);
            var content3 = $('<div class="paragraph barrack-armyup-content2"></div>').html(Mojo.utils.locale('package', 'barrack_armyup_content2')).appendTo(barrack_level_up._content);
            barrack_level_up.open();
        },
        _resetClick: function () {
            var self = this;
            self.intensifyPreviewDatas = new Array(5);
            self.intensifyPreviewData = null;
            self.element().find('.exp .value').html('0');
            self.element().find('.exp_ok .value').html('0');
            self.element().find('.exp').show();
            self.element().find('.exp_ok').hide();
            if (self._getIds().length > 0) {
                self.jisiGeneralIds = new Array(5);
                self._refresh(0);
            }
            self.jisiGeneralIds = new Array(5);
            self._jisiBtn.disable(true);
            self._resetBtn.disable(true);
            var p = self._panel.find('.centerContent');
            p.removeClass('specialContent');
        },
        _scrollEleClick: function (general, idx) {
            var self = this;
            self.currentIdx = idx;
            if (general) {
                var generalDetailDialog = new Mojo.ui.Dialog(undefined, {
                    title: Mojo.utils.locale('package', 'barrack_card_detail_title'),
                    content: (new Mojo.com.LargeEntity((general.isTmp == true ? general.player_entity_id : general), {
                        showSkill: true
                    }).element())
                });
                new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('package', 'general_umount'),
                    special: "button-big-blue",
                    click: function () {
                        generalDetailDialog.close();
                        self._createEntityPreview(2);
                    }
                }).element().appendTo(generalDetailDialog._footer);
                var downGeneral = new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('package', 'barrack_down'),
                    special: "button-big-red",
                    click: function () {
                        generalDetailDialog.close();
                        self._downGeneral();
                    }
                });
                downGeneral.element().appendTo(generalDetailDialog._footer);
                generalDetailDialog.open();
            } else {
                self._createEntityPreview(1);
            }
        },
        _createEntityPreview: function (type) {
            var self = this;
            var entityPreview = new Mojo.com.EntityPreview({
                typeId: '1,2,3,4,5',
                rarityId: '1,2',
                orderId: 1,
                type: type == 2 ? "change_barracks" : "up_barracks",
                is_barracks: 1,
                isbarracks_up: 1,
                treasure_num: !self.intensifyPreviewData ? 0 : self.intensifyPreviewData.treasure_num,
                barrack_num: self._MAXCOUNT - self._getIds().length,
                excludeIds: type == 2 ? self._getIds().join(',') : '',
                entityIds: type == 2 ? '' : self._getIds().join(','),
                eids: self._getGeneralId().join(','),
                onLoadCallback: function () {},
                onLoaded: function () {},
                callback: function (chooseGenerals, generalIds) {
                    if (!chooseGenerals || generalIds.length <= 0) {
                        return;
                    }
                    if (type == 1) {
                        self.element().find('.exp').show();
                        self.element().find('.exp_ok').hide();
                        for (var i = 0; i < self._MAXCOUNT; i++) {
                            if ($.inArray(self.jisiGeneralIds[i], generalIds) < 0) {
                                self.jisiGeneralIds[i] = null;
                            }
                        }
                        for (var e in chooseGenerals) {
                            if (chooseGenerals[e].id != -1 && chooseGenerals[e].id != undefined) {
                                self._upGeneral(chooseGenerals[e].id, chooseGenerals[e], generalIds);
                                var p = self._panel.find('.centerContent');
                                p.addClass('specialContent');
                            }
                        }
                        self._refresh(1);
                    } else if (type == 2) {
                        for (var e in chooseGenerals) {
                            if (chooseGenerals[e].id != -1 && chooseGenerals[e].id != undefined) {
                                self._changeGeneral(chooseGenerals[e].id, chooseGenerals[e]);
                                break;
                            }
                        }
                    }
                },
                backCallback: function () {}
            });
            entityPreview.element().appendTo(document.body);
        },
        _upGeneral: function (generalId, chooseGeneral, generalIds) {
            var index = this.currentIdx;
            if ($.inArray(generalId, this.jisiGeneralIds) >= 0) {
                return;
            }
            do {
                if (this.jisiGeneralIds[this.currentIdx] != null) {
                    this.currentIdx = (this.currentIdx + 1) % 5;
                } else {
                    break;
                }
            } while (index != this.currentIdx);
            if (index == this.currentIdx && this.jisiGeneralIds[this.currentIdx] != null) {
                return;
            }
            this.jisiGeneralIds[this.currentIdx] = generalId;
            this.currentIdx = (this.currentIdx + 1) % 5;
        },
        _downGeneral: function (generalId, chooseGeneral) {
            this.jisiGeneralIds[this.currentIdx] = null;
            this._refresh(1);
        },
        _changeGeneral: function (generalId, chooseGeneral) {
            this.jisiGeneralIds[this.currentIdx] = generalId;
            this._refresh(1);
        },
        _getGeneralId: function () {
            var self = this;
            var generalId = [];
            for (var i = 0; i < self.jisiGeneralIds.length; i++) {
                if (self.jisiGeneralIds[i]) {
                    generalId.push(self.intensifyPreviewDatas[i].id);
                }
            }
            return generalId;
        },
        _getDefaultOptions: function () {
            return $.extend(this._super(), {
                backCallback: undefined,
                levelUpCallback: undefined
            });
        },
    });
    w.Mojo.com.BarrackUpEntity = w.Mojo.Object.extend({
        clsname: function () {
            return "com.BarrackUpEntity";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-barrackupentity');
            this._addContent();
            this._bindEvent();
        },
        _bindEvent: function () {
            var self = this;
            this.element().find('.icon').click(function (e) {
                self._clickEvent(e);
            });
        },
        _clickEvent: function () {
            this._options._scrollEleClick(this._data, this._options._idx);
        },
        _addContent: function () {
            var d = this._data;
            if (d) {
                var name = d.name;
                var icon = d.small_image;
                var activeSkillNum = d.num;
                var activeRewardVal = d.val;
                $('<div class="icon"><img src="' + icon + '"></div><div class="name">' + name + '</div><div class="activeSkill"><span class="l">*</span><span class="r">' + activeSkillNum + '</span></div><div class="reward"><span class="l">*</span><span class="r">' + activeRewardVal + '%</span></div>').appendTo(this.element());
            } else {
                $('<div class="icon">祭祀卡牌</div>').appendTo(this.element());
            }
        },
        _getDefaultOptions: function () {
            return $.extend(this._super(), {
                _scrollEleClick: undefined,
                _idx: 0,
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.PackageGeneral = w.Mojo.Object.extend({
        clsname: function () {
            return "com.PackageGeneral";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass("mojo-com-package-general");
            this.element().append('<div class="head"></div>');
            this.element().append('<div class="card"></div>');
            this.element().append('<div class="card-default"><div class="text"></div></div>');
            this.refresh();
            this._initEvent();
        },
        refresh: function (data, isTmp) {
            var self = this;
            if (data) {
                this._data = data;
            }
            if (isTmp == true) {
                this._data.isTmp = true;
            }
            this.element().find(".head").html((this._options.isMine ? Mojo.utils.locale('package', 'my_head_title') : Mojo.utils.locale('package', 'friend_head_title')));
            this.element().find(".head").hide();
            if (this._data.player_entity_id) {
                this.element().find(".card-default").hide();
                new Mojo.com.LargeEntity((this._data.isTmp == true ? this._data.player_entity_id : this._data), {
                    showSkill: false,
                    showDescription: false,
                    callback: function (card) {
                        self.element().find(".card").children().remove();
                        card.element().appendTo(self.element().find(".card").show());
                    }
                });
            } else {
                this.clear();
            }
        },
        clear: function () {
            this._data.player_entity_id = undefined;
            this.element().find(".card").hide();
            this.element().find(".card-default > .text").html(Mojo.utils.locale('package', 'install_general'));
            this.element().find(".card-default").show();
        },
        getData: function (d) {
            if (Mojo.utils.isNone(d) == false) {
                $.extend(true, this._data, d);
            }
            return this._data;
        },
        isEmpty: function () {
            return (this._data.player_entity_id ? false : true);
        },
        _initEvent: function () {
            var self = this;
            this.element().find(".card").bind("click", function () {
                if (self._options.click instanceof Function) {
                    self._options.click(self);
                }
            });
            this.element().find(".card-default").bind("click", function () {
                if (self._options.click instanceof Function) {
                    self._options.click(self);
                }
            });
        },
        _getDefaultOptions: function () {
            return {
                click: undefined
            };
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.PackageEntity = w.Mojo.Object.extend({
        clsname: function () {
            return "com.PackageEntity";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass("mojo-com-package-entity").addClass("entity_" + this._data.type_id);
            this.element().append('<div class="card"></div>');
            this.element().append('<div class="name"></div>');
            this.element().append('<div class="no-entity no-entity-' + Mojo.utils.isWhat(this._data.type_id) + '"><div class="text"></div></div>');
            this.refresh();
            this._initEvent();
        },
        refresh: function (data, isTmp) {
            if (data) {
                this._data = data;
            }
            if (isTmp === true) {
                this._data.isTmp = true;
            }
            var self = this;
            if (this._data.player_entity_id) {
                this.element().find(".no-entity").hide();
                self.element().find(".card").children().remove();
                this.smallEntity = new Mojo.com.SmallEntity(this._data, {
                    callback: function (card) {
                        self.element().find(".card").show().append(card.element());
                    }
                });
                this.setLevel();
                var index1 = this._data.name.indexOf("·");
                var aname = this._data.name.substring(index1 + 1);
                if (this._data.rebirth_sum == 4) {
                    this.element().find(".name").addClass("rebirth-4").html(aname).show();
                } else if (this._data.rebirth_sum == 5) {
                    this.element().find(".name").addClass("rebirth-5").html(aname).show();
                } else if (this._data.rebirth_sum >= 6) {
                    this.element().find(".name").addClass("rebirth-6").html(aname).show();
                } else {
                    this.element().find(".name").html(this._data.name).show();
                }
            } else {
                this.clear();
            }
        },
        setLevel: function (level) {
            if (this._options.isMine) {
                level = level || this._data.level;
                if (this.smallEntity && this._data && this._data.level) {
                    var levelEle = this.smallEntity.element().find('.level');
                    if (levelEle.length > 0) {
                        levelEle.html(level);
                    } else {
                        levelEle = $('<div class="level"></div>').html(level);
                        levelEle.appendTo(this.smallEntity.element());
                    }
                }
            }
        },
        getData: function (d) {
            if (Mojo.utils.isNone(d) == false) {
                $.extend(true, this._data, d);
            }
            return this._data;
        },
        isEmpty: function () {
            return (this._data.player_entity_id ? false : true);
        },
        clear: function () {
            this._data.player_entity_id = undefined;
            var noEntityText = "";
            if (Mojo.utils.isWhat(this._data.type_id, 'sword')) {
                noEntityText = Mojo.utils.locale('package', 'install_sword');
            } else if (Mojo.utils.isWhat(this._data.type_id, 'shield')) {
                noEntityText = Mojo.utils.locale('package', 'install_shield');
            } else if (Mojo.utils.isWhat(this._data.type_id, 'mounts')) {
                noEntityText = Mojo.utils.locale('package', 'install_mounts');
            } else if (Mojo.utils.isWhat(this._data.type_id, 'treasure')) {
                noEntityText = Mojo.utils.locale('package', 'install_treasure');
            }
            this.element().find(".card").hide();
            this.element().find(".name").hide();
            this.element().find(".no-entity > .text").html(noEntityText);
            this.element().find(".no-entity").show();
            this.element().find(".name").removeClass("rebirth-4").removeClass("rebirth-5").removeClass("rebirth-6");
        },
        _initEvent: function () {
            var self = this;
            this.element().bind("click", function () {
                if (self._options.click instanceof Function) {
                    self._options.click(self);
                }
            });
        },
        _getDefaultOptions: function () {
            return {
                isMine: true,
                click: undefined
            };
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.MessageDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.MessageDialog";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-messagedlg');
            if (this._options.isSuggestion == true) {
                this._options.hintText = Mojo.utils.locale('settings', 'suggestion_default_text');
            }
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            var self = this;
            var paragraph = $('<div class="paragraph"></div>');
            self._tip = $('<div class="words-tip"></div>').html(self._options.maxlength).appendTo(paragraph);
            self._border = $('<div class="border"></div>').appendTo(paragraph);
            self._postcontent = $('<form name="form" method="post" action=""><textarea name="textarea" maxlength="' + self._options.maxlength + '" id="message-content" cols="45" rows="5">' + self._options.hintText + '</textarea></form>').appendTo(self._border);
            paragraph.appendTo(this._content);
            this._textarea = this._content.find('textarea').click(function () {
                if (this.value == self._options.hintText) {
                    this.value = '';
                } else {
                    this.selectionStart = 0;
                    this.selectionEnd = this.value.length;
                }
            });
            this._textarea.bind("change paste keyup input", function () {
                var v = parseInt(this.value.length);
                if (v <= self._options.maxlength) {
                    self._tip.html(self._options.maxlength - v);
                }
            });
        },
        _addHandleButtons: function () {
            var self = this;
            this._footer.append((new Mojo.ui.Button(undefined, {
                special: 'button-big-red',
                text: Mojo.utils.locale('ui', 'Send'),
                click: function () {
                    var content = self._textarea.attr('value');
                    if (content == self._options.hintText) {
                        content = '';
                    }
                    if (self._options.isFriendRequest == true) {
                        Mojo.track.onEvent('09_032');
                        Mojo.ajax('/friend/Add', {
                            friend_id: self._options.id,
                            content: content,
                        }, function (result) {
                            if (result.errorCode == 0) {
                                Mojo.app.toast.show(Mojo.utils.locale('friend', 'has invited'));
                                self._options.callback();
                            } else {
                                Mojo.app.toast.show(result.errorMsg);
                            }
                        });
                        self.close();
                    } else if (self._options.isSuggestion == true) {
                        if (Mojo.utils.trim(content) == '') {
                            Mojo.app.toast.show(Mojo.utils.locale('common', 'no content'));
                            return;
                        }
                        Mojo.app.toast.show(Mojo.utils.locale('common', 'suggestion_has_send'));
                        Mojo.ajax('/suggestion/Add', {
                            content: content,
                        }, function (result) {
                            if (result.errorCode == 0) {} else {}
                        });
                        self.close();
                    } else if (self._options.isForceDiplomacy == true) {
                        if (Mojo.utils.trim(content) == '') {
                            Mojo.app.toast.show(Mojo.utils.locale('common', 'no content'));
                            return;
                        }
                        var params = {
                            receiveForceId: self._options.receiveForceId,
                            content: content,
                        }
                        if (false === Mojo.utils.isNone(self._options.forceDiplomacyMessageId)) {
                            params['messageId'] = self._options.forceDiplomacyMessageId;
                        }
                        Mojo.ajax('/forceCrazy/diplomacy', params, function (result) {
                            if (result.errorCode == 0) {
                                Mojo.app.toast.show(Mojo.utils.locale('ui', 'send_diplomacy_success'));
                            } else {
                                Mojo.app.toast.show(result.errorMsg);
                            }
                        });
                        self.close();
                    } else {
                        if (Mojo.utils.trim(content) == '') {
                            Mojo.app.toast.show(Mojo.utils.locale('friend', 'no content'));
                            return;
                        }
                        Mojo.app.toast.show(Mojo.utils.locale('friend', 'has sended'));
                        Mojo.ajax('/friend/Message', {
                            friend_id: self._options.id,
                            content: content,
                        }, function (result) {
                            if (result.errorCode == 0) {} else {}
                        });
                        self.close();
                    }
                },
            })).element());
            this._footer.append((new Mojo.ui.Button('close-btn', {
                text: Mojo.utils.locale('ui', 'Close'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('ui', 'Leave Message'),
                maxlength: 100,
                hintText: Mojo.utils.locale('common', 'default_text'),
                id: '',
                callback: $.noop,
                isFriendRequest: false,
                isSuggestion: false,
                isForceDiplomacy: false,
                receiveForceId: undefined,
                forceDiplomacyMessageId: undefined,
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.BattleDetailDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.BattleDetailDialog";
        },
        init: function (data, options) {
            var self = this;
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-battledetaildlg');
            this._attackerStatistics = {
                'is_res': 0,
                'is_anti_res': 0,
                'weapon_add_attack': 0
            };
            this._defenderStatistics = {
                'is_res': 0,
                'is_anti_res': 0,
                'armor_add_defence': 0
            };
            this._addContent();
            this._showResult();
            this._addButtons();
        },
        _addContent: function () {
            var self = this;
            this._content.append(this._templateLeft);
            this._content.append(this._templateRight);
            this._content.after($('<div class="center_line"></div>'));
        },
        _showResult: function () {
            var self = this;
            this._content.find('.top-left > .player_name').html(self._data.attacker.player.name);
            this._content.find('.top-left > .player_level').html(Mojo.utils.locale('common', 'level') + self._data.attacker.player.level);
            this._content.find('.top-left > .player_sum').html(Mojo.utils.locale('battle', 'sum attack') + self._data.attacker.player.sum_attack);
            this._content.find('.top-left > .player_base').html(Mojo.utils.locale('battle', 'base attack') + self._data.attacker.player.base_attack);
            if (self._options.showBgTire && self._data.attacker.player.tire && parseInt(self._data.attacker.player.tire) > 0) {
                var playerTireValue = $('<div class = "player_tire"></div>').appendTo(this._content.find('.top-left'));
                var text = Mojo.utils.locale('battleground', 'tire_value') + self._data.attacker.player.tire;
                if (self._data.attacker.player.tire_percent && parseInt(self._data.attacker.player.tire_percent) < 0) {
                    text = Mojo.utils.locale('battleground', 'detail_tire', {
                        tirevalue: self._data.attacker.player.tire,
                        percent: self._data.attacker.player.tire_percent
                    });
                }
                playerTireValue.html(text);
                var opponentTireValue = $('<div class = "opponent_tire"></div>').appendTo(this._content.find('.top-right'));
            }
            this._content.find('.top-right > .player_name').html(self._data.defender.player.name);
            if (self._options.non_show_def_lever == undefined || self._options.non_show_def_lever == false) {
                this._content.find('.top-right > .player_level').html(Mojo.utils.locale('common', 'level') + self._data.defender.player.level);
            }
            this._content.find('.top-right > .player_sum').html(Mojo.utils.locale('battle', 'sum defence') + self._data.defender.player.sum_defence);
            if ((self._options.non_show_base_def == undefined || self._options.non_show_base_def == false) && self._data.defender.player.base_defence) {
                this._content.find('.top-right > .player_base').html(Mojo.utils.locale('battle', 'base defence') + self._data.defender.player.base_defence);
            }
            this._army = $('<div class="army"></div>').appendTo(this._content);
            var _blankScroll = $('<div></div>');
            var _playerArmy = $('<div class="con_left"></div>').appendTo(_blankScroll);
            if (self._data.attacker.army != undefined && self._data.attacker.army.length > 0) {
                for (var index in self._data.attacker.army) {
                    var army = self._data.attacker.army[index];
                    var attacker = $('<div></div>').addClass("player_attacker").appendTo(_playerArmy);
                    var image = $('<div class="small-card"></div>');
                    $('<img></img>').attr('src', army.small_image).appendTo(image);
                    image.appendTo(attacker);
                    var attackerRestraint = $('<div class="attacker-restraint"></div>').appendTo(attacker);
                    if (army.is_res == 1) {
                        self._attackerStatistics.is_res += 1;
                        var res = new Mojo.ui.Label(undefined, {
                            text: Mojo.utils.locale('battle', 'restraint'),
                            classes: ['restraint'],
                        });
                        res.element().appendTo(attackerRestraint);
                    }
                    if (army.is_be_res == 1) {
                        var be_res = undefined;
                        if (army.is_anti_res == 1) {
                            self._attackerStatistics.is_anti_res += 1;
                            be_res = new Mojo.ui.Label(undefined, {
                                text: Mojo.utils.locale('battle', 'resist'),
                                classes: ['resist'],
                            });
                        } else {
                            be_res = new Mojo.ui.Label(undefined, {
                                text: Mojo.utils.locale('battle', 'be_restraint'),
                                classes: ['be-restraint'],
                            });
                        }
                        be_res.element().appendTo(attackerRestraint);
                    }
                    if (army.weapon_add_attack > 0) {
                        self._attackerStatistics.weapon_add_attack += 1;
                        var res = new Mojo.ui.Label(undefined, {
                            text: Mojo.utils.locale('battle', 'weapon_hit'),
                            classes: ['weapon_hit'],
                        });
                        res.element().appendTo(attackerRestraint);
                    }
                    var attackerName = $('<div></div>').addClass("attacker_name").addClass('rebirth-' + (army.rebirth_sum > 6 ? 6 : army.rebirth_sum)).appendTo(attacker).html(army.name);
                    var attackerAttack = $('<div></div>').addClass("attacker_attack").appendTo(attacker).html(Mojo.utils.locale('common', 'simple_attack') + army.attack);
                }
                var playerArmyStatistics = $('<div class="army-statistics"></div>').prependTo(_playerArmy);
                (new Mojo.ui.Label(undefined, {
                    text: Mojo.utils.locale('battle', 'restraint') + "：" + "<span class = 'small_font'>" + self._attackerStatistics.is_res + "</span>",
                    classes: ['restraint']
                })).element().appendTo(playerArmyStatistics);
                (new Mojo.ui.Label(undefined, {
                    text: Mojo.utils.locale('battle', 'resist') + "：" + "<span class = 'small_font'>" + self._attackerStatistics.is_anti_res + "</span>",
                    classes: ['resist']
                })).element().appendTo(playerArmyStatistics);
                (new Mojo.ui.Label(undefined, {
                    text: Mojo.utils.locale('battle', 'weapon_hit') + "：" + "<span class = 'small_font'>" + self._attackerStatistics.weapon_add_attack + "</span>",
                    classes: ['weapon_hit']
                })).element().appendTo(playerArmyStatistics);
            }
            var _opponentArmy = $('<div class="con_right"></div>').appendTo(_blankScroll);
            if (self._data.defender.army != undefined && self._data.defender.army.length > 0) {
                for (var index in self._data.defender.army) {
                    var army = self._data.defender.army[index];
                    var defender = $('<div></div>').addClass("opponent_defender").appendTo(_opponentArmy);
                    var image = $('<div class="small-card"></div>');
                    $('<img></img>').attr('src', army.small_image).appendTo(image);
                    image.appendTo(defender);
                    var defenderRestraint = $('<div class="defender-restraint"></div>').appendTo(defender);
                    if (army.is_res == 1) {
                        self._defenderStatistics.is_res += 1;
                        var res = new Mojo.ui.Label(undefined, {
                            text: Mojo.utils.locale('battle', 'restraint'),
                            classes: ['restraint'],
                        });
                        res.element().appendTo(defenderRestraint);
                    }
                    if (army.is_be_res == 1) {
                        var be_res = undefined;
                        if (army.is_anti_res == 1) {
                            self._defenderStatistics.is_anti_res += 1;
                            be_res = new Mojo.ui.Label(undefined, {
                                text: Mojo.utils.locale('battle', 'resist'),
                                classes: ['resist'],
                            });
                        } else {
                            be_res = new Mojo.ui.Label(undefined, {
                                text: Mojo.utils.locale('battle', 'be_restraint'),
                                classes: ['be-restraint'],
                            });
                        }
                        be_res.element().appendTo(defenderRestraint);
                    }
                    if (army.armor_add_defence > 0) {
                        self._defenderStatistics.armor_add_defence += 1;
                        var res = new Mojo.ui.Label(undefined, {
                            text: Mojo.utils.locale('battle', 'armor_protect'),
                            classes: ['armor_protect'],
                        });
                        res.element().appendTo(defenderRestraint);
                    }
                    var defenderName = $('<div></div>').addClass("defender_name").addClass('rebirth-' + (army.rebirth_sum > 6 ? 6 : army.rebirth_sum)).appendTo(defender).html(army.name);
                    var defenderDefence = $('<div></div>').addClass("defender_defence").appendTo(defender).html(Mojo.utils.locale('common', 'simple_defence') + army.defence);
                }
                var opponentArmyStatistics = $('<div class="army-statistics"></div>').prependTo(_opponentArmy);
                (new Mojo.ui.Label(undefined, {
                    text: Mojo.utils.locale('battle', 'restraint') + "：" + "<span class = 'small_font'>" + self._defenderStatistics.is_res + "</span>",
                    classes: ['restraint']
                })).element().appendTo(opponentArmyStatistics);
                (new Mojo.ui.Label(undefined, {
                    text: Mojo.utils.locale('battle', 'resist') + "：" + "<span class = 'small_font'>" + self._defenderStatistics.is_anti_res + "</span>",
                    classes: ['resist']
                })).element().appendTo(opponentArmyStatistics);
                (new Mojo.ui.Label(undefined, {
                    text: Mojo.utils.locale('battle', 'armor_protect') + "：" + "<span class = 'small_font'>" + self._defenderStatistics.armor_add_defence + "</span>",
                    classes: ['armor_protect']
                })).element().appendTo(opponentArmyStatistics);
            }
            self._scroll = new Mojo.ui.Scroll(undefined, _blankScroll, {
                direction: 2
            });
            self._scroll.element().css('height', self.getR("height"));
            this._army.append(self._scroll.element());
            if (self._data.win == true) {
                Mojo.gap.soundPlay('19_battle_win,mp3');
            } else {
                Mojo.gap.soundPlay('20_battle_lose,mp3');
            }
        },
        _onDialogAppend: function () {
            var self = this;
            self._scroll.refresh();
        },
        _addButtons: function () {
            var self = this;
            var btn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('battle', 'formation'),
                click: function () {
                    Mojo.app.redirect('/package');
                },
                special: 'button-big-red',
            });
            if (self._options.show_detail_first == true) {
                btn = new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('common', 'ok'),
                    click: function () {
                        self.close();
                    },
                    special: 'button-big-red',
                });
            }
            this._footer.append(btn.element());
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('battle', 'formation detail'),
                opponent_id: '',
                opponent_name: '',
                entity_id: '',
                pk_mode: false,
                zIndex: 1005,
                backCallback: $.noop,
                xp: '',
                vm: '',
                gold: '',
                entity: null,
            });
        },
        _templateLeft: '<div class="top-left">\
    <div class="player_name"></div>\
    <div class="player_level"></div>\
    <div class="player_sum"></div>\
    <div class="player_base"></div>\
   </div>',
        _templateRight: '<div class="top-right">\
    <div class="player_name"></div>\
    <div class="player_level"></div>\
    <div class="player_sum"></div>\
    <div class="player_base"></div>\
   </div>',
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceMemberAdjustDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceMemberAdjustDialog";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-forcememberadjustdlg');
            this._force = Mojo.page.Force.getController().getForceProfile();
            this._defaultOfficial = {};
            this._official = {};
            this._addHeader();
            this._addContent();
            this._addButtons();
        },
        _addHeader: function () {
            this._paragraph = $('<div class="paragraph"></div>').appendTo(this._content);
            this._header = $('<div class="header"></div>').append(Mojo.utils.locale('force', 'how_to_adjust_official'));
            this._header.find('.pname').append(new Mojo.com.PlayerName(this._data.title_info ? this._data.title_info : {
                player_name: this._data.name
            }).element());
            this._header.appendTo(this._paragraph);
        },
        _addContent: function () {
            var self = this;
            var officials = [{
                type: 100,
                name: Mojo.utils.locale('force', 'official100')
            }, {
                type: 19,
                name: Mojo.utils.locale('force', 'count_officer_name_7'),
                cur: this._force.position_19_num,
                total: this._force.position_19_num_limit
            }, {
                type: 18,
                name: Mojo.utils.locale('force', 'count_officer_name_6'),
                cur: this._force.position_18_num,
                total: this._force.position_18_num_limit
            }, {
                type: 17,
                name: Mojo.utils.locale('force', 'count_officer_name_5'),
                cur: this._force.position_17_num,
                total: this._force.position_17_num_limit
            }, {
                type: 16,
                name: Mojo.utils.locale('force', 'count_officer_name_4'),
                cur: this._force.position_16_num,
                total: this._force.position_16_num_limit
            }, {
                type: 15,
                name: Mojo.utils.locale('force', 'count_officer_name_3'),
                cur: this._force.position_15_num,
                total: this._force.position_15_num_limit
            }, {
                type: 14,
                name: Mojo.utils.locale('force', 'count_officer_name_2'),
                cur: this._force.position_14_num,
                total: this._force.position_14_num_limit
            }, {
                type: 3,
                name: Mojo.utils.locale('force', 'count_officer_name_1'),
                cur: this._force.position_3_num,
                total: this._force.position_3_num_limit
            }, {
                type: 2,
                name: Mojo.utils.locale('force', 'official2'),
                cur: (this._force.vice_owner == null) ? 0 : 1,
                total: 1
            }, {
                type: 1,
                name: Mojo.utils.locale('force', 'official1')
            }];
            this._officials = $('<div class="officials"></div>');
            for (var i = 0; i < officials.length; i++) {
                var o = officials[i];
                var so = $('<div class="sub-official"></div>').appendTo(this._officials);
                $('<div class="name"></div>').html(o.name).appendTo(so);
                if (o.cur != undefined) {
                    $('<div class="official-count"></div>').html('(' + o.cur + '/' + o.total + ')').appendTo(so);
                }
                var btn = $('<div class="radio"></div>').data({
                    official: o
                }).click(function () {
                    if ($(this).data('official').type == self._official.type) return;
                    if ($(this).data('official').cur != undefined && $(this).data('official').cur >= $(this).data('official').total) {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'cannot_adjust_more_official', {
                            official: Mojo.utils.locale('force', 'official' + $(this).data('official').type)
                        }));
                        return;
                    }
                    if ($(this).hasClass('radio-selected-class')) {} else {
                        self._officials.find('.radio').removeClass('radio-selected-class');
                        $(this).addClass('radio-selected-class');
                        self._official = $(this).data('official');
                    }
                }).appendTo(so);
                if (o.cur != undefined && o.cur >= o.total) {
                    btn.addClass('radio-disable-class');
                }
                if (o.type == parseInt(self._data.position_id)) {
                    btn.addClass('radio-selected-class');
                    self._official = o;
                }
            }
            var s = new Mojo.ui.Scroll(undefined, this._officials, {
                direction: 2
            });
            s.element().appendTo(this._paragraph);
            setTimeout(function () {
                s.refresh();
            });
        },
        _addButtons: function () {
            var self = this;
            (new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'ok'),
                click: function () {
                    if (self._official.type != parseInt(self._data.position_id)) {
                        if (self._official.type == 1 && parseInt(self._data.level) < 50) {
                            self.hide();
                            (new Mojo.com.HandleDialog({
                                title: Mojo.utils.locale('force', 'fail_to_do'),
                                message: Mojo.utils.locale('force', 'cannot_adjust_owner'),
                                close: function () {
                                    self.show();
                                }
                            })).open(true);
                            return;
                        }
                        Mojo.ajax('/force/appointOfficer', {
                            player_id: self._data.id,
                            position_id: self._official.type
                        }, function (result) {
                            if (result.errorCode == 0) {
                                self._options.callback();
                            } else {
                                Mojo.app.toast.show(result.errorMsg);
                            }
                        });
                    }
                    self.close();
                },
                special: 'button-big-red'
            })).element().appendTo(this._footer);
            (new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('force', 'quanxian_yilan'),
                click: function () {
                    self._quanxianDlg();
                }
            })).element().appendTo(this._footer);
        },
        _quanxianDlg: function () {
            var self = this;
            self.hide();
            var quanxianCon = $("<div class='quanxianCon'></div>");
            $('<div class="info"></div>').html(Mojo.utils.locale('force', 'qx_1')).appendTo(quanxianCon);
            $('<div class="info"></div>').html(Mojo.utils.locale('force', 'qx_2')).appendTo(quanxianCon);
            $('<div class="info"></div>').html(Mojo.utils.locale('force', 'qx_3')).appendTo(quanxianCon);
            $('<div class="info"></div>').html(Mojo.utils.locale('force', 'qx_4')).appendTo(quanxianCon);
            $('<div class="info"></div>').html(Mojo.utils.locale('force', 'qx_5')).appendTo(quanxianCon);
            $('<div class="info"></div>').html(Mojo.utils.locale('force', 'qx_6')).appendTo(quanxianCon);
            $('<div class="info"></div>').html(Mojo.utils.locale('force', 'qx_7')).appendTo(quanxianCon);
            var args = Mojo.utils.showScrollDialog({
                'dlgID': 'quanxian_yilan',
                'scrollContent': quanxianCon,
                'dlgParams': {
                    title: Mojo.utils.locale('force', 'quanxian_yilan'),
                    rightBtnText: Mojo.utils.locale('common', 'close'),
                    rightBtnClick: function (that) {
                        that.close();
                    },
                    close: function () {
                        self.show();
                    }
                }
            });
            args.dialog.open(true);
            args.scroll.refresh();
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('force', 'adjust_official'),
                callback: $.noop
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceEvent = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceEvent";
        },
        init: function (options) {
            this._super('com-force-event', options);
            this._selected = undefined;
            this.element().addClass('mojo-com-forceevent');
            this._playerProfile = this._options.getController().getPlayerProfile();
            this._addTabs();
            this._addButton();
        },
        _addTabs: function () {
            var self = this;
            this._panels = [{
                type: 'war',
                label: 'foreign'
            }, {
                type: 'member',
                label: 'member'
            }, {
                type: 'other',
                label: 'other'
            }, ];
            this._tabs = new Mojo.ui.Tabs('tabs-event', {
                selectionChange: function (i) {
                    self._createList(i);
                },
            });
            $.each(this._panels, function (i, p) {
                self._tabs.addTab(self.locale(p.label));
            });
            this.element().append(this._tabs.element());
            this._tabs.element().find('.panel').addClass('box-outter');
            if (Mojo.app.request('index') == 5)
                this._selected = Mojo.app.request('selected');
            if (Mojo.utils.isNone(this._selected) == true) {
                this._selected = 0;
            } else {
                this._selected = parseInt(this._selected);
            }
            this._createList(this._selected);
            this._tabs._select(this._selected);
        },
        _createList: function (index) {
            var self = this;
            var p = this._panels[index];
            if (p.list == undefined || p.list == null) {
                p.list = new Mojo.com.ForceEventList('evt-' + p.type, {
                    type: p.type,
                    positionId: self._playerProfile.position_id,
                    refreshCallback: function () {
                        self._options.getController().syncForce();
                    },
                    getController: function () {
                        return self._options.getController();
                    },
                });
                if (index == 1) {
                    var isOn = parseInt(self._options.getController().getForceProfile().auto_agree_apply);
                    var auto_agree_apply = $("<div  class = 'auto-agree-apply'></div>");
                    $("<div class = 'label'></div>").html(Mojo.utils.locale('force', 'force_entry_without_permission_lebel')).appendTo(auto_agree_apply);
                    var btn = new Mojo.ui.Button(undefined, {
                        classes: ['auto-agree-apply-btn'],
                        text: isOn == 1 ? Mojo.utils.locale('force', 'On') : Mojo.utils.locale('force', 'Off'),
                        click: function () {
                            Mojo.ajax("/force/autoAgreeApply", {
                                forceId: self._options.getController().getForceProfile().id,
                                isOpen: isOn == 1 ? 0 : 1
                            }, function (response) {
                                if (response.errorCode == 0) {
                                    if (isOn == 1) {
                                        self._options.getController().updateForceProfile({
                                            auto_agree_apply: 0
                                        });
                                        isOn = parseInt(self._options.getController().getForceProfile().auto_agree_apply);
                                        btn.text(Mojo.utils.locale('force', 'Off'));
                                        btn.element().removeClass('button-big-red');
                                    } else {
                                        self._options.getController().updateForceProfile({
                                            auto_agree_apply: 1
                                        });
                                        isOn = parseInt(self._options.getController().getForceProfile().auto_agree_apply);
                                        btn.text(Mojo.utils.locale('force', 'On'));
                                        btn.element().addClass('button-big-red');
                                    }
                                }
                            });
                        },
                        disableClick: function () {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'force_entry_without_permission_owner_perform'));
                        }
                    });
                    if (isOn == 1) {
                        btn.element().addClass('button-big-red');
                    } else {
                        btn.element().removeClass('button-big-red');
                    }
                    var positionId = parseInt(self._options.getController().getPlayerProfile().position_id);
                    if (positionId != 1 && positionId != 2) {
                        btn.disable(true);
                    }
                    btn.element().appendTo(auto_agree_apply);
                    auto_agree_apply.appendTo(p.list._header);
                }
                this._tabs.setPanel(index, p.list);
            }
        },
        _addButton: function () {
            var self = this;
            this._backBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'back'),
                click: function () {
                    self.element().hide();
                    self._options.getController().switchToHome();
                },
                classes: ['force-back-btn'],
            });
            this._backBtn.element().appendTo(this.element());
        },
        _getDefaultOptions: function () {
            return {
                backCallback: $.noop,
            };
        },
        localeCat: function () {
            return 'force';
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceEventList = w.Mojo.ui.ListPanel.extend({
        clsname: function () {
            return "com.ForceEventList";
        },
        init: function (id, options) {
            this._total = 0;
            this._readedStart = 0;
            this._super(id, options);
            this.element().addClass('mojo-com-msglist');
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                type: 'war',
                positionId: null,
                moreLabel: Mojo.utils.locale('ui', 'More Messages'),
                loadFunc: function (start, count) {
                    self._retrieveMessages(start, count);
                },
                drawFunc: function (data) {
                    return new Mojo.com.ForceEventElement(data, {
                        positionId: self._options.positionId,
                        handle: function (msg, handle, that) {
                            if (handle == 1) {
                                self._msgHandle1(msg, that);
                            } else if (handle == 2) {
                                self._msgHandle2(msg, that);
                            }
                        },
                        classes: ['box-inner'],
                    });
                },
                scrollable: true,
                emptyLabel: Mojo.utils.locale('message', 'No Message!'),
                refreshCallback: $.noop,
                getController: $.noop
            });
        },
        _retrieveMessages: function (start, count) {
            var self = this;
            var params = {
                force_id: 1,
                start: start,
                count: count,
                total: self._total + count,
                type: this._options.type
            };
            Mojo.ajax('/force/messageList', params, function (result) {
                if (result.errorCode == 0) {
                    self.appendData(result.data.messages);
                    $.each(self.children(), function (i, child) {
                        if (i >= start) {
                            if (Mojo.utils.isNone(child.data.status) == false && (parseInt(child.data.status) == 1 || parseInt(child.data.status) == 2)) {
                                self._hasHandledThisMsg(child);
                                self._readedStart += 1;
                            }
                        }
                    });
                    if (result.data.messages != undefined && result.data.messages.length == self._options.pageSize) {
                        self._more.show();
                    } else {
                        self._more.hide();
                    }
                    if (result.data.messages != undefined) {
                        self._total += result.data.messages.length;
                    }
                    self.resize();
                }
            });
        },
        _msgHandle1: function (msg, msgcom) {
            var tit = undefined;
            var dlgmsg = undefined;
            var lBtnTxt = undefined;
            var lBtnClkFun = undefined;
            var self = this;
            var type = parseInt(msg.type);
            switch (type) {
            case 0:
                Mojo.ajax('/force/messageHandler', {
                    id: msg.id,
                    handle: 1,
                }, function (result) {
                    if (result.errorCode == 0) {
                        Mojo.track.onEvent('24_402');
                        msg.status = 1;
                        self._hasHandledThisMsg(msgcom);
                        self._options.refreshCallback();
                        if (result.data != undefined && result.data.inForce == 1) {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'has_in_force'));
                        }
                    } else if (result.errorCode == 130068) {
                        msg.status = 2;
                        self._hasHandledThisMsg(msgcom);
                        var dlg = new Mojo.ui.Dialog(undefined, {
                            title: Mojo.utils.locale('force', 'applicant_cd_time_not_enough', {
                                '__default__': '未能加入势力'
                            }),
                            content: $('<div class="paragraph"></div>').html(result.errorMsg)
                        });
                        (new Mojo.ui.Button(undefined, {
                            text: Mojo.utils.locale('common', 'close'),
                            click: function () {
                                dlg.close();
                            }
                        })).element().appendTo(dlg._footer);
                        dlg.open();
                    } else if (result.errorCode == 130006) {
                        msg.status = 0;
                        Mojo.app.toast.show(result.errorMsg);
                    } else {
                        msg.status = 2;
                        self._hasHandledThisMsg(msgcom);
                        Mojo.app.toast.show(result.errorMsg);
                    }
                });
                break;
            case 9:
                Mojo.app.redirect('/force', {
                    index: 1,
                    refresh: 1
                });
                break;
            case 10:
                Mojo.app.redirect('/force', {
                    index: 2,
                    refresh: 1
                });
                break;
            case 13:
            case 14:
                Mojo.ajax('/force/messageHandler', {
                    id: msg.id,
                    handle: 1,
                }, function (result) {
                    if (result.errorCode == 0) {
                        Mojo.app.redirect('/force', {
                            index: 2,
                            refresh: 1,
                            target_force_id: msg.int_data
                        });
                    } else {
                        new Mojo.com.TipsDialog({
                            message: result.errorMsg,
                        }).open();
                    }
                });
                break;
            case 51:
            case 52:
                var opponent_id = (type == 52 ? msg.sender_id : msg.int_data);
                Mojo.ajax('/battle/preview', {
                    opponent_id: opponent_id,
                }, function (result) {
                    if (result.errorCode == 0) {
                        (new Mojo.com.BattlePreviewDialog(result.data, {
                            title: Mojo.utils.locale('force', 'revenge result preview'),
                            opponent_id: opponent_id,
                            opponent_name: msg.str_data,
                            message_id: self._options.message_id,
                            forceProfile: self._options.getController(),
                            type: 'fight',
                            isForceEnemy: true,
                            from: 'force'
                        })).open();
                    } else if (result.errorCode == 10003) {
                        (new Mojo.com.SpDialog(result.data, {
                            title: Mojo.utils.locale('common', 'no enough stamina'),
                            message: result.errorMsg,
                            forceProfile: self._options.getController(),
                            isForceEnemy: true,
                        })).open();
                    } else if (result.errorCode == 30007) {
                        (new Mojo.com.AvoidWarDialog({
                            message: Mojo.utils.locale('common', 'avoid_war_content', {
                                avoid_war_time: Mojo.utils.formatTime(result.data)
                            }),
                            avoid_war_time: result.data,
                            callback: function () {
                                self._options.callback();
                            },
                        })).open();
                    } else if (result.errorCode == 160003) {
                        var dlg = new Mojo.com.CommonDialog(undefined, {
                            title: Mojo.utils.locale('common', 'capacify_lack'),
                            content: $('<div class="paragraph"></div>').html(Mojo.utils.locale('common', 'capacify_lack_tip')),
                            leftBtnText: Mojo.utils.locale('common', 'go_intensify'),
                            leftBtnClick: function () {
                                Mojo.app.redirect('/intensify');
                            },
                            rightBtnText: Mojo.utils.locale('common', 'go_sale'),
                            rightBtnClick: function () {
                                Mojo.app.redirect('/entity', {
                                    selected: 3
                                });
                            },
                            close: function () {
                                Mojo.app.redirect('/home');
                            }
                        });
                        dlg.open();
                    } else {
                        (new Mojo.com.TipsDialog({
                            title: Mojo.utils.locale('common', 'tips'),
                            message: result.errorMsg,
                        })).open();
                    }
                }, function () {}, {
                    showWait: true
                });
                break;
            case 101:
            case 203:
                Mojo.app.redirect('/relation', {
                    index: 2,
                    refresh: 1
                });
                break;
            case 102:
            case 103:
                msg.status = 2;
                self._hasHandledThisMsg(msgcom);
                new Mojo.com.CrazyForceWar({
                    inBattle: false,
                    action: 'capture',
                    targetForceId: msg.int_data,
                    parent: self,
                    backBtnClick: function () {
                        Mojo.app.redirect('/relation');
                    },
                });
                break;
            case 104:
                var res = undefined;
                if (self.reserved == true) {
                    res = 1;
                }
                Mojo.ajax('/force/messageHandler', {
                    id: msg.id,
                    handle: 1,
                    reserved: res,
                }, function (result) {
                    var tit = undefined;
                    var dlgmsg = undefined;
                    var lBtnTxt = undefined;
                    var lBtnClkFun = undefined;
                    if (result.errorCode == 0) {
                        Mojo.page.Force.getController().getPlayerProfile().messageRemindCount.task += 1;
                        Mojo.page.Force.getController().sync();
                        msg.status = 1;
                        tit = Mojo.utils.locale('force', 'submission_succ');
                        Mojo.page.Force.getController().syncForce();
                        if (self.reserved == true) {
                            if (result.data != undefined && result.data.forceName != undefined && result.data.forceName2 != undefined)
                                dlgmsg = '<div class="paragraph">' + Mojo.utils.locale('force', 'force_become_slave_seize_lose', {
                                    name: result.data.forceName,
                                    name2: result.data.forceName2
                                }) + '</div>';
                            self.reserved = undefined;
                        } else {
                            if (result.data != undefined && result.data.forceName != undefined)
                                dlgmsg = '<div class="paragraph">' + Mojo.utils.locale('force', 'force_become_slave', {
                                    name: result.data.forceName
                                }) + '</div>';
                        }
                    } else {
                        if (result.data != undefined && result.data.title != undefined) {
                            tit = result.data.title;
                        } else {
                            tit = Mojo.utils.locale('force', 'can_not_submission');
                        }
                        dlgmsg = '<div class="paragraph">' + result.errorMsg + '</div>';
                        switch (result.errorCode) {
                        case 194002:
                        case 194004:
                            lBtnTxt = Mojo.utils.locale('force', 'relationship');
                            lBtnClkFun = function () {
                                msg.status = 3;
                                Mojo.app.redirect('/relation');
                            };
                            break;
                        case 194005:
                            lBtnTxt = Mojo.utils.locale('force', 'forcewar_defense');
                            lBtnClkFun = function () {
                                msg.status = 0;
                                Mojo.app.redirect('/force', {
                                    index: 2,
                                    refresh: 1,
                                    selected: 1
                                });
                            };
                            break;
                        case 194010:
                            tit = Mojo.utils.locale('force', 'is_submission');
                            lBtnTxt = Mojo.utils.locale('force', 'ok_submission');
                            lBtnClkFun = function (that) {
                                msg.status = 1;
                                self.reserved = true;
                                that.close();
                                self._msgHandle1(msg, msgcom);
                            };
                            break;
                        case 130010:
                            dlgmsg = '<div class="tip">' + result.errorMsg + '</div>';
                        }
                    }
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        title: tit,
                        content: dlgmsg,
                        leftBtnText: lBtnTxt,
                        leftBtnClick: function (that) {
                            lBtnClkFun(that);
                            self._hasHandledThisMsg(msgcom);
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                            self._hasHandledThisMsg(msgcom);
                        },
                    }).open();
                });
                break;
            case 114:
                Mojo.ajax('/force/messageHandler', {
                    id: msg.id,
                    handle: 1,
                }, function (result) {
                    var tit = undefined;
                    var dlgmsg = undefined;
                    var lBtnTxt = undefined;
                    var lBtnClkFun = undefined;
                    if (result.errorCode == 0) {
                        msg.status = 1;
                        tit = Mojo.utils.locale('force', 'resign');
                        Mojo.page.Force.getController().syncForce();
                        if (result.data != undefined && result.data.forceName != undefined)
                            dlgmsg = Mojo.utils.locale('force', 'pass_resign_apply', {
                                name: result.data.forceName
                            });
                    } else {
                        if (result.data != undefined && result.data.title != undefined) {
                            tit = result.data.title;
                        } else if (result.errorCode == 3) {
                            tit = Mojo.utils.locale('force', 'appellate_resign_apply');
                        } else {
                            tit = Mojo.utils.locale('force', 'not_resign_apply');
                        }
                        dlgmsg = result.errorMsg;
                    }
                    self._hasHandledThisMsg(msgcom);
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        title: tit,
                        content: $('<div class="paragraph"></div>').html(dlgmsg),
                        leftBtnText: lBtnTxt,
                        leftBtnClick: function (that) {
                            lBtnClkFun(that);
                            self._hasHandledThisMsg(msgcom);
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                            self._hasHandledThisMsg(msgcom);
                        },
                    }).open();
                });
                break;
            case 109:
            case 110:
            case 111:
            case 113:
            case 115:
            case 116:
            case 200:
            case 201:
            case 202:
            case 300:
            case 302:
            case 303:
            case 314:
            case 316:
            case 321:
            case 322:
            case 327:
            case 328:
            case 382:
            case 393:
                Mojo.app.redirect('/force', {
                    index: 2,
                    refresh: 1
                });
                break;
            case 107:
            case 108:
            case 129:
            case 134:
            case 210:
            case 211:
            case 212:
            case 301:
            case 307:
            case 309:
            case 310:
            case 326:
            case 331:
            case 332:
            case 414:
            case 415:
                msg.status = 1;
                self._hasHandledThisMsg(msgcom);
                Mojo.app.redirect('/force', {
                    index: 2,
                    refresh: 1,
                    selected: 1
                });
                break;
            case 105:
            case 112:
            case 150:
            case 217:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 311:
            case 312:
            case 334:
            case 384:
            case 418:
            case 430:
            case 601:
            case 602:
                Mojo.app.redirect('/relation');
                break;
            case 124:
            case 125:
            case 136:
                Mojo.app.redirect('/relation', {
                    index: 17,
                    target_force_id: msg.int_data
                });
                break;
            case 127:
            case 130:
            case 140:
            case 141:
                Mojo.ajax('/force/messageHandler', {
                    id: msg.id,
                    handle: 1,
                }, function (result) {
                    var tit = undefined;
                    var dlgmsg = undefined;
                    var lBtnTxt = undefined;
                    var lBtnClkFun = undefined;
                    if (result.errorCode == 0) {
                        msg.status = 1;
                        switch (result.data.type) {
                        case 129:
                        case 134:
                            tit = Mojo.utils.locale('force', 'ally_succ');
                            lBtnTxt = Mojo.utils.locale('force', 'forcewar_defense');
                            lBtnClkFun = function () {
                                Mojo.app.redirect('/force', {
                                    index: 2,
                                    refresh: 1,
                                    selected: 1
                                });
                            };
                            break;
                        case 133:
                            tit = Mojo.utils.locale('force', 'ally');
                            break;
                        }
                        dlgmsg = result.data.desc;
                    } else {
                        if (result.data != undefined && result.data.title != undefined) {
                            tit = result.data.title;
                        } else {
                            tit = Mojo.utils.locale('force', 'can_not_ally');
                        }
                        dlgmsg = result.errorMsg;
                    }
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        title: tit,
                        content: $('<div class="paragraph"></div>').html(dlgmsg),
                        leftBtnText: lBtnTxt,
                        leftBtnClick: function () {
                            lBtnClkFun();
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        },
                    }).open();
                    self._hasHandledThisMsg(msgcom);
                });
                break;
            case 81:
                Mojo.app.redirect('/force', {
                    index: 7
                });
                break;
            case 82:
                Mojo.app.redirect('/force', {
                    index: 3,
                    selected: 1
                });
                break;
            case 93:
                if (parseInt(self._options.positionId) <= 2) {
                    Mojo.app.redirect('/force', {
                        index: 2,
                        refresh: 1,
                        target_city_id: 'xxx'
                    });
                }
                break;
            case 336:
            case 380:
                Mojo.ajax('/force/messageHandler', {
                    id: msg.id,
                    handle: 1,
                }, function (result) {
                    var tit = undefined;
                    var dlgmsg = undefined;
                    var lBtnTxt = undefined;
                    var lBtnClkFun = undefined;
                    msg.status = 1;
                    self._hasHandledThisMsg(msgcom);
                    if (result.errorCode == 0) {
                        tit = Mojo.utils.locale('force', 'uniterebel');
                        if (result.data != undefined && result.data.forceName != undefined)
                            dlgmsg = Mojo.utils.locale('force', 'responsedandsummon', {
                                name: result.data.forceName
                            });
                        lBtnTxt = Mojo.utils.locale('force', 'summon');
                        lBtnClkFun = function (that) {
                            that.close();
                            new Mojo.com.ForceNoticeDialog({}, {
                                title: tit,
                                maxlength: 100,
                                okBtnText: Mojo.utils.locale('force', 'summon'),
                                hintText: Mojo.utils.locale('force', 'input_message_call_toge'),
                                okBtnClick: function (that) {
                                    that.close();
                                    Mojo.ajax("/force/sendWarToMember", {
                                        content: that.getContent(),
                                        type: 'reuniterebel',
                                    }, function (response) {
                                        Mojo.app.toast.show(Mojo.utils.locale('common', 'suggestion_has_send'));
                                    });
                                }
                            }).open();
                        };
                    } else {
                        if (result.data != undefined && result.data.title != undefined) {
                            tit = result.data.title;
                        } else {
                            tit = Mojo.utils.locale('force', 'can_not_boycott');
                        }
                        dlgmsg = result.errorMsg;
                    }
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        title: tit,
                        content: $('<div class="paragraph"></div>').html(dlgmsg),
                        leftBtnText: lBtnTxt,
                        leftBtnClick: function (that) {
                            lBtnClkFun(that);
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        },
                    }).open();
                });
                break;
            }
        },
        _msgHandle2: function (msg, msgcom) {
            var self = this;
            var type = parseInt(msg.type);
            switch (type) {
            case 0:
                Mojo.ajax('/force/messageHandler', {
                    id: msg.id,
                    handle: 2,
                }, function (result) {
                    if (result.errorCode == 0) {
                        msg.status = 2;
                        self._hasHandledThisMsg(msgcom);
                    } else if (result.errorCode == 130006) {
                        msg.status = 0;
                        Mojo.app.toast.show(result.errorMsg);
                    } else {
                        msg.status = 2;
                        self._hasHandledThisMsg(msgcom);
                        Mojo.app.toast.show(result.errorMsg);
                    }
                });
                break;
            case 80:
                this._showCustomGrainMsg(msg);
                break;
            case 93:
            case 13:
                if (parseInt(msg.force_war_id) && parseInt(msg.int_data)) {
                    self._showForceBattleDetail(msg, msgcom);
                } else {
                    self._doRevenge(msg, msgcom);
                }
                break;
            case 52:
                Mojo.app.redirect('/force', {
                    index: 2,
                    refresh: 1,
                    target_force_id: msg.int_data
                });
                break;
            case 102:
            case 103:
                msg.status = 2;
                self._hasHandledThisMsg(msgcom);
                new Mojo.com.CrazyForceWar({
                    inBattle: false,
                    action: 'usurp',
                    targetForceId: msg.int_data,
                    parent: self,
                    backBtnClick: function () {
                        Mojo.app.redirect('/relation');
                    },
                });
                break;
            case 114:
                Mojo.ajax('/force/messageHandler', {
                    id: msg.id,
                    handle: 2,
                }, function (result) {
                    var tit = undefined;
                    var dlgmsg = undefined;
                    var lBtnTxt = undefined;
                    var lBtnClkFun = undefined;
                    if (result.errorCode == 0) {
                        tit = Mojo.utils.locale('force', 'resign');
                        if (result.data != undefined && result.data.forceName != undefined)
                            dlgmsg = Mojo.utils.locale('force', 'deny_resign_apply', {
                                name: result.data.forceName
                            });
                    } else {
                        if (result.data != undefined && result.data.title != undefined) {
                            tit = result.data.title;
                        } else if (result.errorCode == 3) {
                            tit = Mojo.utils.locale('force', 'appellate_resign_apply');
                        } else {
                            tit = Mojo.utils.locale('force', 'not_resign_apply');
                        }
                        dlgmsg = result.errorMsg;
                    }
                    self._hasHandledThisMsg(msgcom);
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        title: tit,
                        content: $('<div class="paragraph"></div>').html(dlgmsg),
                        leftBtnText: lBtnTxt,
                        leftBtnClick: function (that) {
                            lBtnClkFun(that);
                            self._hasHandledThisMsg(msgcom);
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                            self._hasHandledThisMsg(msgcom);
                        },
                    }).open();
                });
                break;
            case 104:
            case 336:
            case 380:
                var tit = undefined;
                var dlgmsg = undefined;
                var lBtnTxt = undefined;
                var lBtnClkFun = undefined;
                Mojo.ajax('/force/messageHandler', {
                    id: msg.id,
                    handle: 2,
                }, function (result) {
                    msg.status = 2;
                    if (result.errorCode == 0) {
                        switch (type) {
                        case 104:
                            tit = Mojo.utils.locale('force', 'capture');
                            if (result.data != undefined && result.data.forceName != undefined)
                                dlgmsg = '<div class="paragraph">' + Mojo.utils.locale('force', 'deny_capture', {
                                    name: result.data.forceName
                                }) + '</div>';
                            break;
                        case 380:
                            tit = Mojo.utils.locale('force', 'uniterebel');
                            if (result.data != undefined && result.data.forceName != undefined)
                                dlgmsg = '<div class="paragraph">' + Mojo.utils.locale('force', 'deny_boycott', {
                                    name: result.data.forceName
                                }) + '</div>';
                            break;
                        }
                    } else {
                        if (result.data != undefined && result.data.title != undefined) {
                            tit = result.data.title;
                        } else {
                            tit = Mojo.utils.locale('common', 'tips');
                        }
                        dlgmsg = '<div class="paragraph">' + result.errorMsg + '</div>';
                        if (type == 104 && result.errorCode == 130010) {
                            tit = Mojo.utils.locale('force', 'can_not_submission');
                            dlgmsg = '<div class="tip">' + result.errorMsg + '</div>';
                        }
                    }
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        title: tit,
                        content: dlgmsg,
                        leftBtnText: lBtnTxt,
                        leftBtnClick: function (that) {
                            lBtnClkFun(that);
                            self._hasHandledThisMsg(msgcom);
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                            self._hasHandledThisMsg(msgcom);
                        },
                    }).open();
                });
                break;
            case 127:
            case 130:
            case 140:
            case 141:
                Mojo.ajax('/force/messageHandler', {
                    id: msg.id,
                    handle: 2,
                }, function (result) {
                    var tit = undefined;
                    var dlgmsg = undefined;
                    var lBtnTxt = undefined;
                    var lBtnClkFun = undefined;
                    msg.status = 2;
                    self._hasHandledThisMsg(msgcom);
                    if (result.errorCode == 0) {
                        tit = Mojo.utils.locale('force', 'alliance');
                        dlgmsg = result.data.desc;
                    } else {
                        if (result.data != undefined && result.data.title != undefined) {
                            tit = result.data.title;
                        } else {
                            tit = Mojo.utils.locale('common', 'tips');
                        }
                        dlgmsg = result.data.desc;
                    }
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        title: tit,
                        content: $('<div class="paragraph"></div>').html(dlgmsg),
                        leftBtnText: lBtnTxt,
                        leftBtnClick: function (that) {
                            lBtnClkFun(that);
                            self._hasHandledThisMsg(msgcom);
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                            self._hasHandledThisMsg(msgcom);
                        },
                    }).open();
                });
                break;
            case 134:
                Mojo.app.redirect('/relation');
                break;
            case 217:
                self._showForceBattleDetail(msg, msgcom);
                break;
            }
        },
        _showForceBattleDetail: function (msg, msgcom) {
            var self = this;
            var dlg = new Mojo.ui.Dialog('force-battle-detail-dlg', {
                title: Mojo.utils.locale('force', 'force_battle_detail', {
                    '__default__': '战斗统计'
                }),
            });
            var list = new Mojo.ui.ListPanel(undefined, {
                showMore: false,
                scrollable: true,
                loadFunc: function (l, s, p, that) {
                    var params = {
                        force_id: msg.int_data,
                        fb_id: msg.force_war_id
                    };
                    if (93 == msg.type) {
                        params['fb_type'] = 'forcecity';
                    }
                    if (217 == msg.type) {
                        params['fb_id'] = msg.str_data;
                        params['fb_type'] = 'forcecrazy';
                    }
                    Mojo.ajax("/force/forceBattleDetail", params, function (response) {
                        if (response && response.errorCode === 0) {
                            if (217 == msg.type) {
                                msg.__str_data__ = "";
                                for (var i in response.data) {
                                    var d = response.data[i];
                                    if (d && d.attacker && d.attacker.player_id) {
                                        msg.__str_data__ += d.attacker.player_id + ',';
                                    }
                                }
                            }
                            that.appendData(response.data);
                        } else {
                            that.appendData(null);
                        }
                    }, function () {
                        that.appendData(null);
                    });
                },
                drawFunc: function (data) {
                    var obj = new Mojo.Object();
                    var bg = $('<div class="force-battle-detail"></div>').appendTo(obj.element());
                    $('<div class="lodgment-name"></div>').html(data.name).appendTo(bg);
                    $('<div class="attack-count"></div>').html(data.count).appendTo(bg);
                    if (0 == data.count || !data.status || !data.attacker) {
                        $('<div class="attacker no-attacker"></div>').html(Mojo.utils.locale('force', 'force_battle_detail_attack_lose', {
                            '__default__': '未被攻破'
                        })).appendTo(bg);
                    } else {
                        var attacker = $('<div class="attacker"></div>').appendTo(bg);
                        (new Mojo.com.PlayerName(data.attacker, {
                            showIcon: false,
                            maxNameLength: 6
                        })).element().appendTo(attacker);
                    }
                    return obj;
                },
            });
            var header = $('<div class="force-battle-detail-header"></div>').appendTo(list._header);
            $('<div class="lodgment-name"></div>').html(Mojo.utils.locale('force', 'force_battle_detail_lodgment', {
                '__default__': '据点'
            })).appendTo(header);
            $('<div class="attack-count"></div>').html(Mojo.utils.locale('force', 'force_battle_detail_attack_count', {
                '__default__': '被攻击次数'
            })).appendTo(header);
            $('<div class="attacker no-attacker"></div>').html(Mojo.utils.locale('force', 'force_battle_detail_attacker', {
                '__default__': '攻击者'
            })).appendTo(header);
            list.element().appendTo(dlg._content);
            (new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('ui', 'revenge', {
                    '__default__': '寻仇'
                }),
                special: "button-big-red",
                click: function () {
                    dlg.close();
                    self._doRevenge(msg, msgcom);
                }
            })).element().appendTo(dlg._footer);
            (new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    dlg.close();
                }
            })).element().appendTo(dlg._footer);
            dlg.open();
        },
        _doRevenge: function (msg, msgcom) {
            var self = this;
            var forceMember = new Mojo.com.ForceEnemyMember({
                title: Mojo.utils.locale('force', 'enemy_figthters', {
                    '__default__': '攻占据点的人员'
                }),
                getController: function () {
                    return self._options.getController();
                },
                forceMemberListOptions: {
                    loadFunc: function (l, s, p, that) {
                        var params = {
                            ids: msg.str_data
                        };
                        if (217 == msg.type && false === Mojo.utils.isNone(msg.__str_data__)) {
                            params = {
                                ids: msg.__str_data__
                            };
                        }
                        Mojo.ajax("/force/enemyFighters", params, function (response) {
                            if (response && response.errorCode === 0) {
                                that.appendData(response.data.list);
                                if (response.data != undefined && response.data.list.length == that._options.pageSize) {
                                    that._more.show();
                                } else {
                                    that._more.hide();
                                }
                                that.resize();
                            } else {
                                (new Mojo.com.TipsDialog({
                                    title: Mojo.utils.locale('common', 'tips'),
                                    message: response.errorMsg,
                                })).open();
                                forceMember.close();
                            }
                        }, function () {});
                    }
                },
                backCallback: function () {
                    forceMember.close();
                },
                forceMemberElementOptions: {
                    showAttack: true,
                    showDefence: "?",
                    showOffer: false,
                    showLogin: false,
                    showLevel: false,
                    showHr: true,
                    goBtnClass: ['go-button', 'go-attack-btn'],
                    goSpecialClass: '',
                    subClass: '',
                    goBtnText: Mojo.utils.locale('force', 'revenge'),
                    clickFunc: function (forceMemberElement) {
                        Mojo.ajax('/battle/preview', {
                            opponent_id: forceMemberElement._data.id,
                        }, function (result) {
                            forceMember.close();
                            if (result.errorCode == 0) {
                                (new Mojo.com.BattlePreviewDialog(result.data, {
                                    title: Mojo.utils.locale('force', 'revenge result preview'),
                                    opponent_id: forceMemberElement._data.id,
                                    opponent_name: forceMemberElement._data.name,
                                    message_id: self._options.message_id,
                                    forceProfile: self._options.getController(),
                                    type: 'fight',
                                    isForceEnemy: true,
                                    from: 'force'
                                })).open();
                            } else if (result.errorCode == 10003) {
                                (new Mojo.com.SpDialog(result.data, {
                                    title: Mojo.utils.locale('common', 'no enough stamina'),
                                    message: result.errorMsg,
                                    forceProfile: self._options.getController(),
                                    isForceEnemy: true,
                                })).open();
                            } else if (result.errorCode == 30007) {
                                (new Mojo.com.AvoidWarDialog({
                                    message: Mojo.utils.locale('common', 'avoid_war_content', {
                                        avoid_war_time: Mojo.utils.formatTime(result.data)
                                    }),
                                    avoid_war_time: result.data,
                                    callback: function () {
                                        self._options.callback();
                                    },
                                })).open();
                            } else if (result.errorCode == 160003) {
                                var dlg = new Mojo.com.CommonDialog(undefined, {
                                    title: Mojo.utils.locale('common', 'capacify_lack'),
                                    content: $('<div class="paragraph"></div>').html(Mojo.utils.locale('common', 'capacify_lack_tip')),
                                    leftBtnText: Mojo.utils.locale('common', 'go_intensify'),
                                    leftBtnClick: function () {
                                        Mojo.app.redirect('/intensify');
                                    },
                                    rightBtnText: Mojo.utils.locale('common', 'go_sale'),
                                    rightBtnClick: function () {
                                        Mojo.app.redirect('/entity', {
                                            selected: 3
                                        });
                                    },
                                    close: function () {
                                        Mojo.app.redirect('/home');
                                    }
                                });
                                dlg.open();
                            } else {
                                (new Mojo.com.TipsDialog({
                                    title: Mojo.utils.locale('common', 'tips'),
                                    message: result.errorMsg,
                                })).open();
                            }
                        }, function () {}, {
                            showWait: true
                        });
                    }
                }
            });
            forceMember.open();
        },
        _hasHandledThisMsg: function (msgcom) {
            if (msgcom.hasHandledShadow() == true) {
                return;
            }
            var msgtime = msgcom.element().find('.left > .time');
            msgtime.html(msgtime.html() + Mojo.utils.locale('message', 'readed'));
        },
        _showCustomGrainMsg: function (msg) {
            Mojo.utils.ajaxUtil({
                url: '/force/assignGrainDetail',
                params: {
                    forceId: msg.force_id,
                    messageId: msg.id
                },
                callback: function (result) {
                    var d = result.data
                    var sender = d.sender;
                    var senderPN = Mojo.utils.playerNameHtmlStr(sender);
                    var totalGrain = d.totalGrain;
                    var dlg = new Mojo.com.CommonDialog('com-profile-base-dialog', {
                        title: Mojo.utils.locale('force', 'g_faliang_t'),
                        classes: ['g_faliang_detail_dlg'],
                        content: paragraph,
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function () {
                            dlg.close();
                        }
                    })
                    var content = dlg._content;
                    var paragraph = $("<div class='paragraph'></div>").appendTo(content);
                    var s = new Mojo.ui.Scroll(undefined, content, {
                        direction: 2
                    });
                    s.element().appendTo(dlg.element());
                    var senderHtml = Mojo.utils.locale('force', 'g_faliang_sender', {
                        sender: senderPN,
                        grain: totalGrain
                    });
                    paragraph.append(senderHtml);
                    var list = d.list;
                    for (var i = 1; i <= 5; i++) {
                        var item = list[i];
                        if (item.count > 0) {
                            var level = Mojo.utils.locale('force', 'level' + i);
                            var dang = $('<div class="dang"></div>').appendTo(paragraph);
                            var t = $('<div class="dang-t"></div>').html(Mojo.utils.locale('force', 'g_faliang_detail_t', {
                                level: level,
                                grain: item.grain,
                                num: item.count
                            })).appendTo(dang);
                            var titles = item.titles;
                            for (var j = 0; j <= titles.length; j++) {
                                var titleInfo = titles[j];
                                var pn = Mojo.utils.playerNameHtmlStr(titleInfo);
                                dang.append(pn);
                            }
                        }
                    }
                    dlg.open();
                    s.refresh();
                }
            });
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceEventElement = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceEventElement";
        },
        init: function (data, options) {
            this.data = data;
            this._hasHandledShadow = false;
            this._super(undefined, options);
            var self = this;
            this.element().addClass('mojo-com-message');
            if (this.data.status == 0) {
                this.element().addClass('mojo-com-message-unread');
            }
            this.element().append('<div class="left"><div class="content"></div><div class="time"></div></div>');
            this.element().find('.left > .content').append(this.data.content);
            this.element().find('.left > .time').append(this._getMsgTime());
            this._btnGo = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('message', 'Handle'),
                click: function () {
                    var dlg = new Mojo.com.ForceEventDialog(data, {
                        positionId: self._options.positionId,
                        handle: function (handle) {
                            self._onHandleMessage(handle);
                        },
                    });
                    if (data.type == 104 || data.type == 100) {
                        dlg.element().addClass('special-event-letter');
                        var dlgScroll = new Mojo.ui.Scroll(undefined, dlg._content, {
                            direction: 2,
                        });
                        dlg.element().append(dlgScroll.element());
                        dlg.open();
                        dlgScroll.refresh();
                    } else {
                        dlg.open();
                    }
                },
                classes: ['go-button'],
                special: 'go-message-btn',
            });
            this.element().append(this._btnGo.element());
        },
        _onHandleMessage: function (handle) {
            this._options.handle(this.data, handle, this);
            this.element().removeClass('mojo-com-message-unread');
        },
        _getMsgTime: function () {
            var date = new Date();
            var now = date.getTime() / 1000;
            var send = parseInt(this.data.create_time);
            var t = parseInt(now - send);
            if (t < 1) {
                t = 1;
            }
            var day = parseInt(t / (3600 * 24));
            var hour = parseInt((t % (3600 * 24)) / 3600);
            var minute = parseInt((t % 3600) / 60);
            var second = t % 60;
            return (((day > 0 ? day + Mojo.utils.locale('ui', 'days') : "") || (hour > 0 ? hour + Mojo.utils.locale('ui', 'hours') : "") || (minute > 0 ? minute + Mojo.utils.locale('ui', 'minutes') : "") || (second > 0 ? second + Mojo.utils.locale('ui', 'seconds') : "")) +
                Mojo.utils.locale('ui', 'ago'));
        },
        _getDefaultOptions: function () {
            return {
                handle: $.noop,
                data: {
                    id: '',
                    sender_id: '',
                    receiver_id: '',
                    type: 0,
                    content: '',
                    status: 0,
                    intData: 0,
                    strData: '',
                    create_time: 0,
                    positionId: null,
                }
            };
        },
        hasHandledShadow: function (value) {
            if (value === true || value === false) {
                this._hasHandledShadow = value;
            }
            return this._hasHandledShadow;
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceEventDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceEventDialog";
        },
        init: function (data, options) {
            this.data = data;
            this.data.type = parseInt(this.data.type);
            this._super('event_message', options);
            this.element().addClass('mojo-com-msgdlg');
            this._player = Mojo.page.Force.getController().getPlayerProfile();
            var self = this;
            this._addContent();
            this._addHandleButtons();
            window.evtDialog = this;
        },
        _getTitle: function () {
            var t = 'force_message';
            switch (this.data.type) {
            case 0:
                t = 'force_apply';
                break;
            case 9:
                t = 'refresh_internal_mission';
                break;
            case 10:
                t = 'force_war';
                break;
            case 100:
            case 102:
            case 103:
                t = 'capitulate';
                break;
            case 101:
                t = 'capitulate_succ';
                break;
            case 104:
                t = 'be_capitulate';
                break;
            case 105:
                t = 'submission_succ';
                break;
            case 106:
                t = 'deny_capitulate';
                break;
            case 107:
            case 108:
            case 109:
            case 110:
                t = 'help_defense_member_change';
                break;
            case 111:
            case 114:
                t = 'defense_resign';
                break;
            case 112:
            case 113:
            case 115:
            case 116:
                t = 'resign';
                break;
            case 119:
            case 132:
            case 150:
            case 151:
                t = 'ally_apply_expire';
                break;
            case 120:
            case 126:
            case 129:
            case 134:
            case 135:
                t = 'ally_succ';
                break;
            case 118:
            case 121:
            case 122:
            case 123:
            case 124:
            case 125:
            case 127:
            case 128:
            case 130:
            case 131:
            case 133:
            case 136:
            case 138:
            case 139:
            case 140:
            case 141:
                t = 'ally';
                break;
            case 144:
            case 601:
            case 602:
                t = 'relation_disband';
                break;
            case 200:
            case 201:
            case 202:
                t = 'seize';
                break;
            case 203:
                t = 'seize_succ';
                break;
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 218:
                t = 'seize_lose';
                break;
            case 210:
            case 211:
            case 212:
            case 220:
            case 222:
                t = 'be_seized';
                break;
            case 209:
            case 213:
            case 214:
            case 215:
            case 216:
            case 219:
            case 312:
            case 313:
            case 334:
            case 360:
            case 385:
                t = 'defence_succ';
                break;
            case 217:
            case 311:
            case 333:
            case 393:
                t = 'defence_lose';
                break;
            case 221:
                t = 'ally_cancel';
                break;
            case 224:
            case 225:
                t = 'prefect_message';
                break;
            case 223:
                t = 'prince_message';
                break;
            case 300:
            case 302:
            case 303:
            case 304:
                t = 'revolt';
                break;
            case 301:
                t = 'prefect_revolt';
                break;
            case 384:
                t = 'revolt_succ';
                break;
            case 305:
            case 306:
            case 361:
                t = 'revolt_lose';
                break;
            case 307:
            case 308:
            case 309:
            case 310:
                t = 'be_revolted';
                break;
            case 314:
            case 315:
            case 316:
            case 317:
            case 318:
            case 319:
            case 320:
            case 321:
            case 322:
            case 326:
            case 327:
            case 328:
            case 329:
            case 330:
            case 331:
            case 332:
            case 336:
            case 355:
            case 380:
            case 382:
            case 383:
            case 605:
            case 606:
                t = 'boycott';
                break;
            case 335:
                t = 'force_disband';
                break;
            case 323:
                t = 'boycott_succ';
                break;
            case 324:
            case 325:
            case 381:
                t = 'boycott_lose';
                break;
            case 386:
                t = 'title';
                break;
            case 400:
            case 402:
                t = 'grain_contribute';
                break;
            case 401:
            case 403:
                t = 'grain_donate';
                break;
            case 404:
            case 405:
                t = 'tax_rate_adjust';
                break;
            case 406:
            case 408:
            case 410:
            case 27:
                t = 'assign_title';
                break;
            case 407:
            case 409:
            case 411:
            case 26:
                t = 'get_title';
                break;
            case 412:
            case 413:
                t = 'depose';
                break;
            case 414:
            case 415:
                t = 'cancel_ally';
                break;
            case 416:
            case 417:
            case 422:
            case 426:
                t = 'electioneer_officer';
                break;
            case 418:
                t = 'electioneer_officer_succ';
                break;
            case 419:
                t = 'electioneer_officer_lose';
                break;
            case 420:
            case 421:
                t = 'lose_officer';
                break;
            case 423:
            case 424:
            case 425:
            case 427:
            case 428:
            case 429:
                t = 'lose_title';
                break;
            case 430:
                t = 'get_officer';
                break;
            case 440:
                t = 'collect_tax';
                break;
            case 441:
                t = 'sum_tax';
                break;
            case 603:
            case 604:
                t = 'rebel_over';
                break;
            case 81:
                t = 'force_boss_challenge_start';
                break;
            case 82:
                t = 'force_boss_challenge_final_win2';
                break;
            case 83:
                t = 'force_boss_challenge_final_lose';
                break;
            }
            return Mojo.utils.locale('force', t);
        },
        _addContent: function () {
            var self = this;
            this._paragraph = $('<div class="paragraph"></div>').html(this.data.content);
            this.element().children('.content').append(this._paragraph);
            if (Mojo.utils.isNone(self.data.forces)) {
                return;
            }
            switch (this.data.type) {
            case 127:
            case 130:
            case 336:
            case 138:
            case 139:
            case 140:
            case 141:
                this._list = new Mojo.com.ForceList("force-list", {
                    type: 'forceinfo',
                    showBtn: false,
                    refreshable: true,
                    pageSize: 2,
                    scrollable: true,
                    ids: this.data.str_data,
                    onLoaded: function () {
                        if (self._options.open) {
                            self.open();
                        }
                    },
                    loadFunc: function (start, count, orderParams) {
                        if (Mojo.utils.isNone(self.data.forces) == false) {
                            setTimeout(function () {
                                self._list.appendData(self.data.forces);
                            }, 0);
                        } else {
                            self._list.appendData(null);
                        }
                    },
                });
                this._paragraph.append($('<hr>'));
                this._paragraph.prependTo(this._list._list);
                this.element().addClass('special-event-list');
                this._list.element().appendTo(this._content);
                break;
            }
        },
        _addHandleButtons: function () {
            var self = this;
            var l1 = this._getBtn1Label();
            var l2 = this._getBtn2Label();
            if (this.data.type != 200 && this.data.type != 201 && this.data.type != 202 && this.data.type != 210 && this.data.type != 211 && this.data.type != 212 && this.data.type != 220 && this.data.type != 222 && this.data.type != 217 && this.data.type != 223 && this.data.type != 224 && this.data.type != 225 && this.data.type != 300 && this.data.type != 301 && this.data.type != 302 && this.data.type != 303 && this.data.type != 304 && this.data.type != 307 && this.data.type != 308 && this.data.type != 309 && this.data.type != 310 && this.data.type != 311 && this.data.type != 312 && this.data.type != 384 && this.data.type != 314 && this.data.type != 316 && this.data.type != 319 && this.data.type != 320 && this.data.type != 321 && this.data.type != 326 && this.data.type != 327 && this.data.type != 328 && this.data.type != 330 && this.data.type != 331 && this.data.type != 332 && this.data.type != 336 && this.data.type != 382 && this.data.type != 334 && this.data.type != 393 && this.data.type != 51 && this.data.type != 52 && this.data.type != 13 && this.data.type != 10 && this.data.type != 80 && this.data.type != 81 && this.data.type != 82 && this.data.type != 93 && !(self._player.force_rights.__all__ || self._player.force_rights.process_join_apply) || this.data.status == 3) {
                l1 = null;
                l2 = null;
                if (this.data.type == 0 && !(self._player.force_rights.__all__ || self._player.force_rights.process_join_apply)) {
                    Mojo.app.toast.show(self.getL('force', 'join_event_privilege'));
                }
            } else if (52 == this.data.type && this._options.positionId != null && parseInt(this._options.positionId) > 2) {
                l2 = null;
            } else if (51 == this.data.type && Mojo.cache.get('userId') == this.data.sender_id) {
                l1 = null;
            } else if (103 == this.data.type && this._options.positionId != null && parseInt(this._options.positionId) > 2) {
                l1 = null;
                l2 = null;
            }
            switch (this.data.type) {
            case 101:
            case 102:
            case 203:
            case 104:
            case 107:
            case 108:
            case 109:
            case 110:
            case 114:
            case 124:
            case 125:
            case 127:
            case 130:
            case 140:
            case 141:
            case 336:
            case 380:
                if (this._options.positionId != null && parseInt(this._options.positionId) > 1) {
                    l1 = null;
                    l2 = null;
                }
                break;
            }
            if (l1 != null) {
                this._btn1 = new Mojo.ui.Button(undefined, {
                    text: l1,
                    classes: ['btn-handle-1'],
                    click: function () {
                        self.close();
                        self._options.handle(1);
                    },
                    disableClick: function () {
                        if (self.data != undefined && (self.data.type == 13 || self.data.type == 14) && parseInt(self._options.positionId) > 2) {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'forcewar_only_owner_fanji', {
                                '__default__': '只有势力主和副势力主才能反击哦~'
                            }));
                        } else if (self.data.type == 14 && parseInt(self._options.positionId) > 2) {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'forcewar_only_owner_start'));
                        } else if (self.data.type == 93 && parseInt(self._options.positionId) > 2) {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'siege_only_owner_start'));
                        }
                    },
                    special: 'button-big-red',
                });
                this.element().children('.footer').append(this._btn1.element());
                if ((this.data.type == 13 || this.data.type == 14) && parseInt(this._options.positionId) > 2) {
                    this._btn1.disable(true);
                }
                if (this.data.type == 93 && parseInt(this._options.positionId) > 2) {
                    this._btn1.disable(true);
                }
            }
            if (l2 != null) {
                this._btn2 = new Mojo.ui.Button(undefined, {
                    text: l2,
                    classes: ['btn-handle-2'],
                    click: function () {
                        self.close();
                        self._options.handle(2);
                    },
                    disableClick: function () {
                        if (self.data.type == 52 && parseInt(self._options.positionId) > 2) {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'forcewar_only_owner_qiangliang', {
                                '__default__': '只有势力主和副势力主才能抢粮哦~'
                            }));
                        }
                    }
                });
                this.element().children('.footer').append(this._btn2.element());
                if (52 == this.data.type && parseInt(this._options.positionId) > 2) {
                    this._btn2.disable(true);
                }
            }
            if (l1 == null || l2 == null) {
                this._closeBtn = new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('ui', 'Close'),
                    classes: ['btn-close'],
                    click: function () {
                        self.close();
                    },
                });
                this.element().children('.footer').append(this._closeBtn.element());
            }
            if (this.data.type == 0) {
                if (this.data.status == 1) {
                    this._btn1.disable(true);
                    this._btn2.hide();
                } else if (this.data.status == 2) {
                    this._btn2.disable(true);
                    this._btn1.hide();
                }
            }
            if (this.data.status == 1) {
                this._btn1.disable(true);
                this._btn2.hide();
            } else if (this.data.status == 2) {
                this._btn2.disable(true);
                this._btn1.hide();
            }
        },
        _getBtn1Label: function () {
            switch (this.data.type) {
            case 0:
            case 114:
                return Mojo.utils.locale('ui', 'Agree');
            case 9:
                return Mojo.utils.locale('force', 'go');
            case 10:
                return Mojo.utils.locale('force', 'in_war');
            case 93:
            case 13:
            case 14:
                return Mojo.utils.locale('ui', 'Retaliate');
            case 51:
                return Mojo.utils.locale('force', 'help_attack', {
                    '__default__': '帮助征讨'
                });
            case 52:
                return Mojo.utils.locale('force', 'to_attack', {
                    '__default__': '征讨'
                });
            case 101:
            case 203:
                return Mojo.utils.locale('force', 'adjust_tax_rate');
            case 102:
            case 103:
                if (this.data.status == 1) return Mojo.utils.locale('force', 'capitulate');
                return Mojo.utils.locale('force', 'con_capitulate');
            case 104:
                return Mojo.utils.locale('force', 'submission');
            case 109:
            case 110:
            case 316:
            case 327:
            case 328:
            case 393:
                return Mojo.utils.locale('force', 'foreign');
            case 124:
            case 125:
            case 127:
            case 130:
            case 140:
            case 141:
                return Mojo.utils.locale('force', 'ally');
            case 200:
            case 201:
            case 202:
            case 300:
            case 302:
            case 303:
            case 314:
            case 321:
            case 322:
                return Mojo.utils.locale('force', 'fight');
            case 107:
            case 108:
            case 129:
            case 134:
            case 210:
            case 211:
            case 212:
            case 301:
            case 307:
            case 309:
            case 310:
            case 326:
            case 331:
            case 332:
            case 414:
            case 415:
                return Mojo.utils.locale('force', 'forcewar_defense');
            case 105:
            case 112:
            case 150:
            case 217:
            case 220:
            case 221:
            case 222:
            case 223:
            case 224:
            case 225:
            case 311:
            case 312:
            case 334:
            case 384:
            case 418:
            case 430:
            case 601:
            case 602:
                return Mojo.utils.locale('force', 'relationship');
            case 336:
            case 380:
                return Mojo.utils.locale('force', 'response');
            case 382:
                return Mojo.utils.locale('force', 'in_war');
            case 81:
                return Mojo.utils.locale('ui', 'In War2');
            case 82:
                return Mojo.utils.locale('force', 'force_boss_challenge_final_goexchange2');
            }
            return null;
        },
        _getBtn2Label: function () {
            switch (this.data.type) {
            case 0:
            case 104:
            case 114:
            case 127:
            case 130:
            case 140:
            case 141:
            case 336:
            case 380:
                return Mojo.utils.locale('ui', 'Deny');
            case 134:
                return Mojo.utils.locale('force', 'relationship');
            case 102:
            case 103:
                return Mojo.utils.locale('force', 'seize');
            case 93:
            case 13:
                if (parseInt(this.data.force_war_id) && parseInt(this.data.int_data)) {
                    return Mojo.utils.locale('ui', 'look_statistics', {
                        '__default__': '查看统计'
                    });
                }
                return Mojo.utils.locale('ui', 'revenge', {
                    '__default__': '寻仇'
                });
            case 217:
                if (parseInt(this.data.int_data) && parseInt(this.data.str_data)) {
                    return Mojo.utils.locale('ui', 'look_statistics', {
                        '__default__': '查看统计'
                    });
                }
                return null;
            case 52:
                return Mojo.utils.locale('force', 'start_grain_war', {
                    '__default__': '发起抢粮战'
                });
            case 80:
                return Mojo.utils.locale('force', 'show_detail');
            }
            return null;
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: this._getTitle(),
                handle: $.noop,
                positionId: null,
                deviceaware: true
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceRanking = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceRanking";
        },
        init: function (options) {
            this._super('com-force-ranking', options);
            this.element().addClass('mojo-com-forceranking');
            this._addTabs();
            this._addButton();
        },
        _addTabs: function () {
            var self = this;
            this._panels = [{
                type: 'ranking',
                label: 'ranking'
            }, ];
            this._tabs = new Mojo.ui.Tabs('tabs-ranking', {
                selectionChange: function (i) {
                    self._createList(i);
                },
                selected: 0
            });
            $.each(this._panels, function (i, p) {
                self._tabs.addTab(self.locale(p.label));
            });
            this.element().append(this._tabs.element());
            this._tabs.element().find('.panel').addClass('box-outter');
            self._createList();
        },
        _createList: function () {
            var self = this;
            var p = this._panels[0];
            if (p.list == undefined || p.list == null) {
                p.list = new Mojo.com.ForceList(undefined, {
                    type: 'rank',
                    showBtn: true,
                    btnText: Mojo.utils.locale('common', 'view'),
                    specialClass: 'go-view-btn',
                    onBtnClick: self._viewBtnClick,
                    showMore: true,
                    moreLabel: Mojo.utils.locale('force', 'more'),
                    refreshable: false
                });
                this._tabs.setPanel(0, p.list);
            }
            this._addSearch();
        },
        _addSearch: function () {
            var self = this;
            var p = self._panels[0];
            var search = new Mojo.com.ForceFind(undefined, {
                onSearch: function (data) {
                    self._refreshList(data);
                },
                noinput: function () {
                    self._panels[0].list.element().remove();
                    self._panels[0].list = undefined;
                    self._createList();
                    return false;
                }
            }).element().appendTo(p.list._header);
        },
        _refreshList: function (response) {
            this._panels[0].list._scroll.scrollTo(0, 0);
            this._panels[0].list._list.empty();
            this._panels[0].list._options.type = 'search';
            this._panels[0].list._options.showMore = false;
            this._panels[0].list._children = [];
            this._panels[0].list._options.emptyLabel = Mojo.utils.locale('force', 'force_search_noresult');
            this._panels[0].list.appendData(response.data.list, false);
        },
        _viewBtnClick: function (data) {
            new Mojo.com.ForceInfoDialog(data, {}, {
                showApplyBtn: false
            }).open();
        },
        _addButton: function () {
            var self = this;
            this._backBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'back'),
                click: function () {
                    self.element().hide();
                    self._options.getController().switchToHome();
                },
                classes: ['force-back-btn'],
            });
            this._backBtn.element().appendTo(this.element());
        },
        _getDefaultOptions: function () {
            return {
                backCallback: $.noop,
            };
        },
        localeCat: function () {
            return 'force';
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceWar = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceWar";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass("mojo-com-forcewar");
            var self = this;
            this._tabs = undefined;
            this._selected = undefined;
            this._forceDefenseListPanel = undefined;
            this._forceBattlePanel = undefined;
            this._forceBattleStatus = undefined;
            this._forceBattleTime = undefined;
            this._forceBattleHandle = undefined;
            this._forceLodgmentsCount = undefined;
            this._forceCapturedCount = undefined;
            this._forceOpponentForceName = undefined;
            this._forceSiegeCityName = undefined;
            this._helping = undefined;
            this._crazyForceWar = undefined;
            this._hasCaptureLodgment = undefined;
            this._canAttack = undefined;
            this._forceWarNoticeDiv = undefined;
            this._hasInit = false;
            this._forceProfile = Mojo.page.Force.getController().getForceProfile();
            this._playerProfile = Mojo.page.Force.getController().getPlayerProfile();
            Mojo.page.Force.getController().getProfile().addSyncHandle(function (data) {
                self._updateChallange(self, data);
            });
            if ((this._selected = this._getUrlParam("selected")) == null)
                this._selected = 0;
            if (options.selected) this._selected = options.selected;
            this.actionType = Mojo.utils.getSomething("type", true);
            if (this.actionType == 'assistSlave' || this.actionType == 'assistAlliance') {
                this._isAssist = true;
            }
            this.targetForceId = Mojo.utils.getSomething("target_force_id", true);
            this.targetCityId = Mojo.utils.getSomething("target_city_id", true);
            if (this.actionType == 'capture' || this.actionType == 'usurp') {
                (new Mojo.com.CrazyForceWar({
                    inBattle: false,
                    action: this.actionType,
                    targetForceId: this.targetForceId,
                    parent: this,
                    backBtnClick: function () {
                        Mojo.app.redirect('/relation');
                    },
                }));
            } else {
                this.refresh();
            }
        },
        _updateChallange: function (that, data) {
            if (that._forceWarNoticeDiv != undefined) {
                var force = data.force_info;
                that._forceWarNoticeDiv.html(Mojo.utils.locale('force', 'forcewar_no_battle', {
                    challenge: force.challenge,
                    challenge_limit: force.challenge_limit
                }));
                if (force.challenge >= force.challenge_limit) {
                    that._forceWarNoticeDiv.removeClass('add-challenge');
                }
            }
        },
        refresh: function () {
            this._createTabs();
            this._createBackButton();
        },
        _getDefaultOptions: function () {
            return {
                backCallback: $.noop,
                interval: 10
            };
        },
        pause: function () {
            var self = this;
            clearTimeout(self._forceBattleHandle);
            if (self._crazyForceWar) {
                self._crazyForceWar.pause();
            }
            if (self._crazyForceDefWar) {
                self._crazyForceDefWar.pause();
            }
        },
        _createTabs: function () {
            var self = this;
            if (Mojo.utils.isNone(this._tabs) == false) {
                return;
            }
            this._tabs = new Mojo.ui.Tabs("forcewar-tabs", {
                selectionChange: function (index) {
                    self._forceBattleTime = undefined;
                    self.pause();
                    if (index == 0) {
                        self._createForceBattle(index);
                    } else if (index == 1) {
                        var partnerIds = Mojo.utils.getSomething("partnerId", false);
                        Mojo.ajax('/force/battleDefence', {}, function (response) {
                            if (response.errorCode == 198708 || Mojo.utils.isNone(partnerIds) == false) {
                                if (self.actionType == undefined) self.actionType = 'usurp';
                                if (self._crazyForceDefWar) {
                                    self._crazyForceDefWar._refreshForceBattleStatus();
                                } else {
                                    self._tabs.element().find('ul > li').eq(1).append($("<div class='battleStatus'></div>"));
                                    self._crazyForceDefWar = new Mojo.com.CrazyForceWar({
                                        inBattle: true,
                                        battleType: 'defence',
                                        parent: self,
                                        partnerIds: partnerIds,
                                        action: self.actionType,
                                    });
                                }
                            } else {
                                self._createForceDefense(index, response.data);
                            }
                        });
                    } else if (index == 2) {
                        self._createEnemy(index);
                    }
                    self._tabs.element().find(".panel").addClass("box-outter");
                }
            });
            this._tabs.addTab(Mojo.utils.locale("force", "foreign"));
            this._tabs.addTab(Mojo.utils.locale("force", "forcewar_defense"));
            this._tabs.addTab(Mojo.utils.locale("force", "forcewar_enemy"));
            this.element().append(this._tabs.element());
            this._tabs._select(this._selected);
        },
        _isForceOwner: function (isViceOwner, callback) {
            var isOwner = false;
            var player = Mojo.page.Force.getController().getPlayerProfile();
            if (Mojo.utils.isNone(player)) {
                var self = this;
                this._options.getController().sync(function () {
                    player = self._options.getController().getPlayerProfile();
                    if (player && player.position_id == 1) {
                        isOwner = true;
                    } else if (isViceOwner == true && player && player.position_id == 2) {
                        isOwner = true;
                    }
                    if (callback instanceof Function) {
                        callback(isOwner);
                    }
                });
            } else {
                if (player.position_id == 1) {
                    isOwner = true;
                }
                if (isViceOwner == true && player.position_id == 2) {
                    isOwner = true;
                }
                if (callback instanceof Function) {
                    callback(isOwner);
                }
            }
            return isOwner;
        },
        _forceWarAjax: function (url, params, success, fail) {
            var self = this;
            Mojo.ajax(url, params, function (response) {
                if (response && response.errorCode === 0) {
                    if (response.data.last_battle != undefined) {
                        clearTimeout(self._forceBattleHandle);
                        self._showForceWarResultDialog(response.data.last_battle, function () {
                            Mojo.app.redirect('/force', {
                                index: 2
                            });
                        });
                    } else if (response.data.result != undefined) {
                        clearTimeout(self._forceBattleHandle);
                        self._showForceWarResultDialog(response.data.result, function () {
                            Mojo.app.redirect('/force', {
                                index: 2
                            });
                        });
                    } else if (response.data != undefined && success instanceof Function) {
                        success(response);
                    }
                } else {
                    if (success instanceof Function) {
                        success(response);
                    }
                }
            }, function () {
                if (fail instanceof Function) {
                    fail();
                }
            });
        },
        _showForceWarResultDialog: function (result, callback) {
            var title = undefined;
            var content = undefined;
            if (result.status == 1 || result.status == 4) {
                title = Mojo.utils.locale('force', 'forcewar_win');
                content = $('<div class="tip"></div>');
                if (result.status == 1) {
                    $('<div></div>').html(Mojo.utils.locale('force', 'forcewar_win_content', {
                        'forcename': result.defender
                    })).appendTo(content);
                    (new Mojo.ui.Label(undefined, {
                        text: '+' + result.att_grain
                    })).element().addClass("fgrain").appendTo(content);
                    $('<div></div>').html(Mojo.utils.locale('force', 'forcewar_win_commend')).appendTo(content);
                    var commend = "";
                    var icount = 1;
                    for (var index in result.contribute) {
                        var commendplayer = result.contribute[index];
                        if (icount == result.contribute.length) {
                            commend += Mojo.utils.formatPlayerName(commendplayer);
                        } else if (icount % 2 == 0) {
                            commend += Mojo.utils.formatPlayerName(commendplayer) + ",";
                        } else {
                            commend += Mojo.utils.formatPlayerName(commendplayer) + ",";
                        }
                        icount += 1;
                    }
                    $('<div></div>').html(commend).appendTo(content);
                } else if (result.status == 4) {
                    $('<div></div>').html(Mojo.utils.locale('force', 'forcewar_disband_content')).appendTo(content);
                    (new Mojo.ui.Label(undefined, {
                        text: '+' + result.att_grain
                    })).element().addClass("fgrain").appendTo(content);
                }
            } else if (result.status == 2) {
                title = Mojo.utils.locale('force', 'forcewar_lose');
                content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'forcewar_lose_content', {
                    'forcename': result.defender
                }));
            } else if (result.status == 3) {
                title = Mojo.utils.locale('force', 'forcewar_retreat');
                content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'forcewar_retreat_content', {
                    'forcename': result.defender
                }));
            }
            (new Mojo.com.CommonDialog(undefined, {
                classes: ['forcewar-win-dlg'],
                title: title,
                content: content,
                leftBtnText: Mojo.utils.locale('common', 'ok'),
                leftBtnClick: function (that) {
                    that.close();
                },
                close: function () {
                    if (callback instanceof Function) {
                        callback();
                    }
                }
            })).open();
            this._options.getController().getProfile().sync();
        },
        _createForceBattleWithBattle: function () {
            this._forceBattlePanel.element().children().remove();
            var self = this;
            var needShowMore = false;
            if (self._playerProfile.force_rights.__all__ || self._playerProfile.force_rights.declare_war) {
                needShowMore = true;
            }
            this._forceOpponentListPanel = new Mojo.ui.ListPanel("forcewar-opponent-listpanel", {
                scrollable: true,
                showMore: needShowMore,
                alwaysMore: needShowMore,
                pageSize: 20,
                moreLabel: Mojo.utils.locale('force', 'forcewar_retreat'),
                moreClick: function (that) {
                    if (!needShowMore) {
                        return;
                    }
                    (new Mojo.com.CommonDialog(undefined, {
                        title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                        content: $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'forcewar_retreat_question')),
                        leftBtnText: Mojo.utils.locale('common', 'ok'),
                        leftBtnClick: function (that) {
                            that.close();
                            self._forceWarAjax("/force/battleFightingSurrender", {}, function (response) {
                                if (response && response.errorCode === 0) {
                                    self._createForceBattle(0);
                                }
                            });
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        }
                    })).open();
                },
                loadFunc: function (s, l, p, that) {
                    self._forceWarAjax("/force/battleFighting", {}, function (response) {
                        var current = response.data.current;
                        if (Mojo.utils.isNone(current) == false) {
                            self._forceBattleTime = current.timeout;
                            self._forceBattleAttackLimit = current.time;
                            self._forceOpponentForceName = current.defender.name;
                            self._forceLodgmentsCount = current.lodgments.length;
                            self._forceCapturedCount = current.captured;
                            that.element().find(".mojo-com-forcewarelement").remove();
                            that._children = [];
                            that.appendData(current.lodgments);
                            self._forceOpponentListPanel._scroll.element().height($(window).height() - 162);
                        }
                    });
                },
                drawFunc: function (data) {
                    var btnDisabled = false;
                    if (data.captured) {
                        btnDisabled = true;
                    }
                    var fwe = (new Mojo.com.ForceWarElement(data, {
                        showForce: true,
                        showDefence: false,
                        btnText: Mojo.utils.locale('force', 'forcewar_battle_action'),
                        btnSpecial: "go-attack-btn",
                        btnAttackLimit: self._forceBattleAttackLimit,
                        btnDisabled: btnDisabled,
                        disableClickCallback: function (that) {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'force_city_attack_cd_notice'));
                        },
                        clickCallback: function (forceWarElement) {
                            var capturedPreviewDialog = new Mojo.com.ForceWarPreviewDialog(undefined, {
                                attackBtnText: Mojo.utils.locale('force', 'forcewar_battle_action'),
                                title: Mojo.utils.locale('force', 'forcewar_battle_preview'),
                                attackerName: self._options.getController().getPlayerProfile().name,
                                defenderName: (data.defender ? data.defender.name : "?"),
                                tips: Mojo.utils.locale('force', 'city_attack_btn_limit2', {
                                    rest: self._forceBattleAttackLimit.rest,
                                    total: self._forceBattleAttackLimit.total
                                }),
                                actionCallback: function (that) {
                                    that.close();
                                    self._forceWarAjax("/force/battleFightingAttack", {
                                        lodgment_id: data.id
                                    }, function (response) {
                                        if (response && response.errorCode === 0) {
                                            var playerLevel = self._options.getController().getPlayerProfile().level;
                                            var resultTitle = "";
                                            var resultTip = "";
                                            var leftBtnDisabled = false;
                                            var leftBtnText = undefined;
                                            var leftBtnFunc = undefined;
                                            var rightBtnDisabled = false;
                                            var rightBtnText = undefined;
                                            var rightBtnFunc = undefined;
                                            var current = response.data.current;
                                            if (current.player) {
                                                if (parseInt(current.player.sp) == NaN) {
                                                    current.player.sp = 0;
                                                }
                                                Mojo.page.Force.getController().updatePlayerProfile({
                                                    sp: current.player.sp
                                                });
                                                Mojo.page.Force.getController().diffPlayer({
                                                    grain: current.grain
                                                });
                                            }
                                            if (current != undefined) {
                                                if (current.status == 1) {
                                                    forceWarElement.element().addClass("has-captured");
                                                    forceWarElement._elementButton.disable(true);
                                                    resultTitle = Mojo.utils.locale('force', 'capture_win');
                                                    leftBtnDisabled = false;
                                                    rightBtnDisabled = false;
                                                    leftBtnText = Mojo.utils.locale('package', 'package_switch');
                                                    rightBtnText = Mojo.utils.locale('common', 'close');
                                                    if (data.defender == undefined) {
                                                        if (playerLevel < 105) {
                                                            leftBtnDisabled = true;
                                                            leftBtnText = undefined;
                                                        }
                                                        resultTip = Mojo.utils.locale('force', 'win_lodgment_without_defender', {
                                                            'lodgment': data.name
                                                        });
                                                    } else {
                                                        if (playerLevel < 105) {
                                                            leftBtnText = Mojo.utils.locale('battle', 'formation detail');
                                                        } else {
                                                            rightBtnText = Mojo.utils.locale('battle', 'formation detail');
                                                        }
                                                        var defendername = Mojo.utils.formatPlayerName(data.defender);
                                                        resultTip = Mojo.utils.locale('force', 'win_lodgment_with_defender', {
                                                            'defendername': defendername,
                                                            'lodgment': data.name
                                                        });
                                                    }
                                                } else {
                                                    forceWarElement.element().removeClass("has-captured");
                                                    forceWarElement._elementButton.disable(false);
                                                    resultTitle = Mojo.utils.locale('force', 'capture_lose');
                                                    leftBtnDisabled = false;
                                                    rightBtnDisabled = false;
                                                    leftBtnText = Mojo.utils.locale('force', 'capture_again');
                                                    rightBtnText = Mojo.utils.locale('battle', 'formation detail');
                                                    if (data.defender == undefined) {
                                                        rightBtnText = Mojo.utils.locale('common', 'close');
                                                    }
                                                    var defendername = Mojo.utils.formatPlayerName(data.defender);
                                                    resultTip = Mojo.utils.locale('force', 'lose_lodgment_defender', {
                                                        'defendername': defendername,
                                                        'lodgment': data.name
                                                    });
                                                    self._btnAttackCd = new Mojo.Object(undefined, {
                                                        classes: ['com-force-city-war-reattack-cd']
                                                    });
                                                    self._btnAttackCd.element().html(Mojo.utils.locale('force', 'city_attack_btn_limit2', {
                                                        rest: current.time.rest,
                                                        total: current.time.total
                                                    }));
                                                    if (current.time != undefined && current.time.rest == 0) {
                                                        leftBtnDisabled = true;
                                                    }
                                                }
                                                var dlgContent = $('<div class="tip"><div class="fight-result">' + resultTip + '</div></div>');
                                                var offer = $('<div class="fight-offer"></div>');
                                                new Mojo.ui.Label(undefined, {
                                                    classes: ['grain'],
                                                    text: "+" + current.grain
                                                }).element().appendTo(offer);
                                                new Mojo.ui.Label(undefined, {
                                                    classes: ['contribute'],
                                                    text: Mojo.utils.locale('force', 'offer1') + "+" + current.contribute
                                                }).element().appendTo(offer);
                                                offer.appendTo(dlgContent);
                                                if (self._btnAttackCd != undefined) {
                                                    self._btnAttackCd.element().appendTo(dlgContent);
                                                }
                                                var onCloseFunc = function (battleDetail) {
                                                    self._refreshForceBattleStatus(true);
                                                    (new Mojo.com.CommonDialog(undefined, {
                                                        classes: ['forcewar-win-dlg'],
                                                        title: resultTitle,
                                                        content: dlgContent,
                                                        leftBtnText: leftBtnText,
                                                        leftBtnDisabled: leftBtnDisabled,
                                                        leftBtnDisabledClick: function (that) {
                                                            Mojo.app.toast.show(Mojo.utils.locale('force', 'force_city_attack_cd_notice'));
                                                        },
                                                        leftBtnClick: function (that) {
                                                            if (current.status == 1) {
                                                                if (playerLevel >= 105) {
                                                                    Mojo.app.redirect('/package');
                                                                } else {
                                                                    that.hide();
                                                                    (new Mojo.com.BattleDetailDialog(battleDetail, {
                                                                        pid: data.defender.id,
                                                                        pkMode: true,
                                                                        vm: '+0',
                                                                        xp: '+0',
                                                                        entity: null,
                                                                        close: function () {
                                                                            that.show();
                                                                        },
                                                                    })).open(true);
                                                                }
                                                            } else {
                                                                that.close();
                                                                forceWarElement.doClick();
                                                            }
                                                        },
                                                        rightBtnText: rightBtnText,
                                                        rightBtnDisabled: rightBtnDisabled,
                                                        rightBtnClick: function (that) {
                                                            if (data.defender == undefined || (current.status == 1 && playerLevel < 105)) {
                                                                that.close();
                                                            } else {
                                                                that.hide();
                                                                (new Mojo.com.BattleDetailDialog(battleDetail, {
                                                                    pid: data.defender.id,
                                                                    pkMode: true,
                                                                    vm: '+0',
                                                                    xp: '+0',
                                                                    entity: null,
                                                                    close: function () {
                                                                        that.show();
                                                                    },
                                                                })).open(true);
                                                            }
                                                        },
                                                    })).open();
                                                };
                                                if (data.defender == undefined) {
                                                    onCloseFunc(undefined);
                                                } else {
                                                    Mojo.ajax('/battle/Detail', {
                                                        type: 'ForceBattleFighting'
                                                    }, function (result) {
                                                        if (result.errorCode == 0) {
                                                            Mojo.ui.BattleAnimation.onclose = function () {
                                                                onCloseFunc(result.data);
                                                            };
                                                            Mojo.ui.BattleAnimation.openBattle(result);
                                                        }
                                                    }, function () {}, {
                                                        showWait: true
                                                    });
                                                }
                                            }
                                        } else {
                                            (new Mojo.com.CommonDialog(undefined, {
                                                title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                                content: $('<div class="tip"></div>').html(response.errorMsg),
                                                leftBtnText: Mojo.utils.locale('common', 'ok'),
                                                leftBtnClick: function (that) {
                                                    that.close();
                                                }
                                            })).open();
                                        }
                                    }, function () {}, {
                                        showWait: true
                                    });
                                    Mojo.track.onEvent('24_703');
                                }
                            });
                            self._forceWarAjax("/force/battleFightingAttackPreview", {
                                lodgment_id: data.id
                            }, function (response) {
                                if (response && response.errorCode === 0) {
                                    var current = response.data.current;
                                    if (current != undefined) {
                                        capturedPreviewDialog.setPlayerName(current.attacker.name);
                                        if (current.defender) {
                                            capturedPreviewDialog.setOpponentName(current.defender.name);
                                        } else {
                                            capturedPreviewDialog.setOpponentName("?");
                                        }
                                        var winContent = $('<div><div class="lodgment-name">' + Mojo.utils.locale('force', 'capture_lodgment', {
                                            'name': data.name
                                        }) + '</div></div>');
                                        var offer = $('<div class="capture-offer"></div>');
                                        new Mojo.ui.Label(undefined, {
                                            classes: ['grain'],
                                            text: "+" + current.result.win.grain
                                        }).element().appendTo(offer);
                                        new Mojo.ui.Label(undefined, {
                                            classes: ['contribute'],
                                            text: Mojo.utils.locale('force', 'offer1') + " +" + current.result.win.contribute
                                        }).element().appendTo(offer);
                                        offer.appendTo(winContent);
                                        capturedPreviewDialog.setWinContents(winContent);
                                        var loseoffer = $('<div class="capture-offer"></div>');
                                        new Mojo.ui.Label(undefined, {
                                            classes: ['grain'],
                                            text: "+" + current.result.lose.grain
                                        }).element().appendTo(loseoffer);
                                        new Mojo.ui.Label(undefined, {
                                            classes: ['contribute'],
                                            text: Mojo.utils.locale('force', 'offer1') + " +" + current.result.lose.contribute
                                        }).element().appendTo(loseoffer);
                                        capturedPreviewDialog.setLoseContents($("<div></div>").append(loseoffer));
                                    }
                                    capturedPreviewDialog.open();
                                } else if (response.errorCode == 130204) {
                                    (new Mojo.com.CommonDialog(undefined, {
                                        title: response.data.title,
                                        content: $('<div class="tip"></div>').html(response.errorMsg + "<br>" + Mojo.utils.locale('force', 'force_contribute_not_enough', {
                                            force_level: Mojo.page.Force.getController().getForceProfile().level,
                                            contribute: response.data.contribute
                                        })),
                                        leftBtnText: Mojo.utils.locale('common', 'go_neizheng'),
                                        leftBtnClick: function (that) {
                                            that.close();
                                            Mojo.app.redirect('/force', {
                                                index: 1
                                            });
                                        },
                                        rightBtnText: Mojo.utils.locale('common', 'close'),
                                        rightBtnClick: function (that) {
                                            that.close();
                                        }
                                    })).open();
                                } else if (response && response.errorCode != 0 && Mojo.utils.isNone(response.data) == false && Mojo.utils.isNone(response.data.props) == false) {
                                    (new Mojo.com.NeedBuyDialog(undefined, {
                                        title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                        goods: response.data.props,
                                        stamina: response.data.stamina,
                                        restoreCount: response.data.sp,
                                        allRestoreText: Mojo.utils.locale('common', 'time for all sp'),
                                        allRestoreTime: response.data.sp_restore_pp,
                                        nextRestoreText: Mojo.utils.locale('common', 'time for next sp'),
                                        nextRestoreTime: response.data.sp_second,
                                        restoreText: response.errorMsg,
                                        needBuyTip: response.errorMsg,
                                        useBtnClick: function (that, result) {
                                            that.close();
                                            if (result && result.errorCode === 0) {
                                                Mojo.page.Force.getController().updatePlayerProfile({
                                                    sp: result.data.player.sp
                                                });
                                                Mojo.app.toast.show(Mojo.utils.locale('common', 'add_sp', {
                                                    name: that._options.goods.goods_name,
                                                    value: result.data.value
                                                }));
                                            }
                                        },
                                        buyBtnClick: function (that, result) {
                                            Mojo.page.Force.getController().updatePlayerProfile({
                                                rm: result.data.player.rm,
                                                vm: result.data.player.vm
                                            });
                                        }
                                    })).open();
                                } else {
                                    var t = Mojo.utils.locale('force', 'forcewar_tip_title');
                                    if (response.data != undefined && response.data.title != undefined) {
                                        t = response.data.title;
                                    }
                                    (new Mojo.com.CommonDialog(undefined, {
                                        title: t,
                                        content: $('<div class="tip"></div>').html(response.errorMsg),
                                        leftBtnText: Mojo.utils.locale('common', 'close'),
                                        leftBtnClick: function (that) {
                                            that.close();
                                        }
                                    })).open();
                                }
                            }, function () {}, {
                                showWait: true
                            });
                        }
                    }));
                    return fwe;
                }
            });
            this._forceOpponentListPanel.element().find('.more').addClass('retreat');
            this._forceOpponentListPanel.element().appendTo(this._forceBattlePanel.element());
            if (this._isForceOwner(true)) {
                this._forceOpponentListPanel._more.show();
            }
            this._forceBattleStatus = $("<div></div>").addClass("page-tips  forcewar-battle-notice").appendTo(this._forceOpponentListPanel._header);
            this._refreshForceBattleStatus();
        },
        _actionForFood: function (forceSearch, data) {
            var self = this;
            var forcePage = self._options.getController();
            var contribute = undefined;
            var forcewarPreviewDialog = new Mojo.com.ForceWarPreviewDialog(undefined, {
                title: Mojo.utils.locale('force', 'forcewar_grain_preview'),
                attackBtnText: Mojo.utils.locale('force', 'forcewar_grain_action'),
                actionCallback: function (that) {
                    that.close();
                    Mojo.ajax("/force/battleChallenge", {
                        defender_id: data.id
                    }, function (response) {
                        if (response && response.errorCode === 0) {
                            forceSearch.element().remove();
                            forcePage.showCurrent();
                            self._createForceBattleWithBattle();
                            new Mojo.com.CommonDialog(undefined, {
                                title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                content: $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'forcewar_tip_content').replace('{{:opponent_force}}', data.name)),
                                leftBtnText: Mojo.utils.locale('force', 'usurp_war_help'),
                                leftBtnClick: function (that) {
                                    that.close();
                                    new Mojo.com.ForceNoticeDialog({}, {
                                        title: Mojo.utils.locale('force', 'forcewar_help_title'),
                                        hintText: Mojo.utils.locale('force', 'forcewar_help_content'),
                                        okBtnClick: function (that) {
                                            that.close();
                                            Mojo.ajax("/force/sendWarToMember", {
                                                content: that.getContent()
                                            }, function (response) {
                                                Mojo.app.toast.show(Mojo.utils.locale('common', 'suggestion_has_send'));
                                            });
                                        }
                                    }).open();
                                },
                                rightBtnText: Mojo.utils.locale('common', 'close'),
                                rightBtnClick: function (that) {
                                    that.close();
                                },
                            }).open();
                            self._options.getController().getProfile().sync();
                            Mojo.track.onEvent('24_702');
                        } else {
                            if (response.errorCode == 130026) {
                                (new Mojo.com.NeedBuyDialog(undefined, {
                                    title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                    goods: response.data.props,
                                    data: response.data,
                                    stamina: response.data.cp_total,
                                    restoreCount: response.data.cp_current,
                                    allRestoreText: Mojo.utils.locale('force', 'all_chanllenge_get'),
                                    allRestoreTime: response.data.cp_restore_pp,
                                    nextRestoreText: Mojo.utils.locale('force', 'next_chanllenge_get'),
                                    nextRestoreTime: response.data.cp_second,
                                    restoreText: response.errorMsg,
                                    needBuyTip: response.errorMsg,
                                    useBtnClick: function (that, result) {
                                        if (result && result.errorCode === 0) {
                                            Mojo.page.Force.getController().diffForce({
                                                challenge: parseInt(result.data.challenge)
                                            });
                                            self._updateChallange(self, Mojo.page.Force.getController().getData());
                                            Mojo.app.toast.show(Mojo.utils.locale('common', 'add_cp', {
                                                name: that._options.goods.goods_name,
                                                value: result.data.challenge
                                            }));
                                        }
                                    },
                                    buyBtnClick: function (that, result) {
                                        Mojo.page.Force.getController().updatePlayerProfile({
                                            rm: result.data.player.rm,
                                            vm: result.data.player.vm
                                        });
                                    }
                                })).open();
                            } else {
                                if (Mojo.utils.isNone(response.errorMsg) || response.errorMsg == '') {
                                    response.errorMsg = Mojo.utils.locale('common', 'action_error');
                                }
                                (new Mojo.com.CommonDialog(undefined, {
                                    title: response.data ? response.data.title : Mojo.utils.locale('force', 'forcewar_tip_title'),
                                    content: $('<div class="tip"></div>').html(response.errorMsg),
                                    leftBtnText: Mojo.utils.locale('common', 'ok'),
                                    leftBtnClick: function (that) {
                                        that.close();
                                    }
                                })).open();
                            }
                        }
                    });
                }
            });
            var winContent = $('<div class="win-content"><div class="force-grain">' + Mojo.utils.locale('force', 'force_grain') + '</div></div>');
            var winGrainLabel = (new Mojo.ui.Label("win-grain", {
                text: "",
                classes: ['fgrain']
            }));
            winGrainLabel.element().appendTo(winContent);
            var loseContent = $('<div class="lose-content"><div class="force-grain">' + Mojo.utils.locale('force', 'force_grain') + '</div></div>');
            var loseGrainLabel = (new Mojo.ui.Label("lose-grain", {
                text: "",
                classes: ['fgrain']
            }));
            loseGrainLabel.element().appendTo(loseContent);
            forcewarPreviewDialog.setWinContents(winContent);
            forcewarPreviewDialog.setLoseContents(loseContent);
            Mojo.ajax("/force/battleChallenge", {
                defender_id: data.id,
                preview: 1
            }, function (response) {
                if (response && response.errorCode === 0) {
                    contribute = response.data.contribute;
                    forcewarPreviewDialog.setPlayerName(response.data.attacker.name);
                    forcewarPreviewDialog.setOpponentName(response.data.defender.name);
                    winGrainLabel.text("+" + response.data.win.attacker.grain);
                    loseGrainLabel.text("-" + response.data.lose.defender.grain);
                    forcewarPreviewDialog.open();
                } else {
                    var leftButton = undefined;
                    var leftButtonClick = undefined;
                    if (response.errorCode == 200003) {
                        leftButton = self.locale('relation');
                        leftButtonClick = function (that) {
                            that.close();
                            Mojo.app.redirect('/relation');
                        };
                    }
                    if (Mojo.utils.isNone(response.errorMsg) || response.errorMsg == '') {
                        response.errorMsg = Mojo.utils.locale('common', 'action_error');
                    }
                    (new Mojo.com.CommonDialog(undefined, {
                        title: response.data ? response.data.title : Mojo.utils.locale('force', 'forcewar_tip_title'),
                        content: $('<div class="tip"></div>').html(response.errorMsg),
                        leftBtnText: leftButton,
                        leftBtnClick: leftButtonClick,
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        }
                    })).open();
                }
                if (parseInt(self._forceProfile.protect_status) == 1) {
                    self._options.getController().getProfile().sync();
                }
            });
        },
        _createForceSearch: function (targetForceId) {
            var self = this;
            var forcePage = self._options.getController();
            forcePage.hideCurrent();
            var forceSearch = new Mojo.com.ForceSearch('forcewar-forcesearch', {
                backCallback: function () {
                    forceSearch.element().remove();
                    Mojo.app.redirect('/force', {
                        index: 2,
                        refresh: 1
                    });
                },
                forceSearchParams: {
                    excludes: forcePage.getForceProfile().id
                },
                forceListOptions: {
                    targetForceId: targetForceId,
                    btnText: Mojo.utils.locale('force', 'forcewar_action'),
                    moreLabel: Mojo.utils.locale('force', 'refresh'),
                    typeOfbattle: 'forcewar',
                    onBtnClick: function (data) {
                        self._actionForFood(forceSearch, data);
                    },
                    erroCallback: function (response) {
                        if (response.errorCode == 130012) {
                            Mojo.app.redirect('/force', {
                                index: 2,
                                refresh: 1
                            });
                        }
                    }
                }
            });
            forceSearch.element().appendTo(forcePage.element());
        },
        _createForceSearchDiplomacy: function (targetForceId) {
            var self = this;
            var forcePage = self._options.getController();
            forcePage.hideCurrent();
            var forceSearch = new Mojo.com.ForceSearch('forcewar-forcesearch-diplomacy', {
                tabText: Mojo.utils.locale('force', 'diplomacy'),
                backCallback: function () {
                    forceSearch.element().remove();
                    forcePage.showCurrent();
                },
                forceSearchParams: {
                    excludes: forcePage.getForceProfile().id,
                    with_for: 'diplomacy'
                },
                forceListOptions: {
                    type: 'diplomacy',
                    targetForceId: targetForceId,
                    btnText: Mojo.utils.locale('force', 'contact'),
                    showMore: false,
                    typeOfbattle: 'forcewar',
                    onBtnClick: function (data) {
                        var dlg = new Mojo.com.MessageDialog(undefined, {
                            title: Mojo.utils.locale('force', 'send_diplomacy_to', {
                                'receiveForceName': data.name
                            }),
                            isForceDiplomacy: true,
                            receiveForceId: data.id
                        });
                        dlg.open();
                    },
                    erroCallback: function (response) {
                        if (response.errorCode == 130012) {
                            Mojo.app.redirect('/force', {
                                index: 2,
                                refresh: 1
                            });
                        }
                    }
                }
            });
            forceSearch.element().appendTo(forcePage.element());
        },
        _createForceBattleWithoutBattle: function () {
            if (this._list) {
                return;
            }
            this._forceBattlePanel.element().children().remove();
            var self = this;
            this._list = new Mojo.com.ScrollPanel(undefined);
            this._list.element().addClass('mojo-com-relation').appendTo(this._forceBattlePanel.element());
            this._forceWarNoticeDiv = this._list._header.addClass('page-tips challenge-tips');
            this._forceWarNoticeDiv.bind("click", function () {
                var f = self._options.getController().getForceProfile();
                if (false == Mojo.utils.isNone(f) && f.challenge < f.challenge_limit) {
                    Mojo.ajax("/force/challenge", {}, function (response) {
                        if (response && response.errorCode === 0 && response.data) {
                            self._forceWarNoticeDiv.html(Mojo.utils.locale('force', 'forcewar_no_battle', {
                                challenge: response.data.cp_current,
                                challenge_limit: response.data.cp_total
                            }));
                            if (response.data.cp_current >= response.data.cp_total) {
                                self._forceWarNoticeDiv.removeClass('add-challenge');
                            }
                        }
                        if (response && response.errorCode === 0 && response.data && response.data.cp_current < response.data.cp_total) {
                            (new Mojo.com.NeedBuyDialog(undefined, {
                                title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                goods: response.data.props,
                                data: response.data,
                                stamina: response.data.cp_total,
                                restoreCount: response.data.cp_current,
                                allRestoreText: Mojo.utils.locale('force', 'all_chanllenge_get'),
                                allRestoreTime: response.data.cp_restore_pp,
                                nextRestoreText: Mojo.utils.locale('force', 'next_chanllenge_get'),
                                nextRestoreTime: response.data.cp_second,
                                restoreText: Mojo.utils.locale('force', 'add_challenge_tip'),
                                needBuyTip: Mojo.utils.locale('force', 'add_challenge_tip'),
                                useBtnClick: function (that, result) {
                                    if (result && result.errorCode === 0) {
                                        Mojo.page.Force.getController().diffForce({
                                            challenge: parseInt(result.data.challenge)
                                        });
                                        self._updateChallange(self, Mojo.page.Force.getController().getData());
                                        Mojo.app.toast.show(Mojo.utils.locale('common', 'add_cp', {
                                            name: that._options.goods.goods_name,
                                            value: result.data.challenge
                                        }));
                                    }
                                },
                                buyBtnClick: function (that, result) {
                                    Mojo.page.Force.getController().updatePlayerProfile({
                                        rm: result.data.player.rm,
                                        vm: result.data.player.vm
                                    });
                                }
                            })).open();
                        }
                    }, function () {}, {
                        showWait: true
                    });
                }
            });
            var force = this._options.getController().getForceProfile();
            if (Mojo.utils.isNone(force)) {
                this._options.getController().sync(function () {
                    force = self._options.getController().getForceProfile();
                    self._forceWarNoticeDiv.html(Mojo.utils.locale('force', 'forcewar_no_battle', {
                        challenge: force.challenge,
                        challenge_limit: force.challenge_limit
                    }));
                    if (force.challenge < force.challenge_limit) {
                        self._forceWarNoticeDiv.addClass("add-challenge");
                    } else {
                        self._forceWarNoticeDiv.removeClass("add-challenge");
                    }
                });
            } else {
                self._forceWarNoticeDiv.html(Mojo.utils.locale('force', 'forcewar_no_battle', {
                    challenge: force.challenge,
                    challenge_limit: force.challenge_limit
                }));
                if (force.challenge < force.challenge_limit) {
                    self._forceWarNoticeDiv.addClass("add-challenge");
                } else {
                    self._forceWarNoticeDiv.removeClass("add-challenge");
                }
            }
            this._funs = [{
                id: 'battle',
                label: 'battle_food',
                name: 'battle_food',
                description: 'food_description',
                dynamicinfo: '',
                index: 1,
                cold_down: 0,
                messageRemindCount: 0,
                coldDownWarning: 'coldDownWarning',
                imgClass: 'food',
                descriptionImgClass: 'food-cartoon',
                hasHr: false,
                hasColdDown: false,
                refresh: 1,
                eventCode: '24_304'
            }, {
                id: 'siege',
                label: 'siege',
                name: 'siege',
                description: 'siege_description',
                dynamicinfo: '',
                index: 2,
                cold_down: 0,
                messageRemindCount: 0,
                coldDownWarning: 'coldDownWarning',
                imgClass: 'siege',
                descriptionImgClass: 'siege-cartoon',
                hasHr: false,
                hasColdDown: false,
                refresh: 1,
                eventCode: '24_304'
            }, {
                id: 'capture',
                label: 'capture',
                name: 'capitulate',
                description: 'capitulate_description',
                dynamicinfo: '',
                index: 3,
                cold_down: 0,
                messageRemindCount: 0,
                coldDownWarning: 'coldDownWarning',
                imgClass: 'surrender',
                descriptionImgClass: 'surrender-cartoon',
                hasHr: false,
                hasColdDown: false,
                refresh: 1,
                eventCode: '24_304'
            }, {
                id: 'usurp',
                label: 'usurp',
                name: 'usurp',
                description: 'usurp_description',
                dynamicinfo: '',
                index: 4,
                cold_down: 0,
                messageRemindCount: 0,
                coldDownWarning: 'coldDownWarning',
                imgClass: 'battle',
                descriptionImgClass: 'battle-cartoon',
                hasHr: false,
                hasColdDown: false,
                refresh: 1,
                eventCode: '24_304'
            }, {
                id: 'alliance',
                label: 'alliance',
                name: 'alliance',
                description: 'alliance_description',
                dynamicinfo: '',
                index: 5,
                cold_down: 0,
                messageRemindCount: 0,
                coldDownWarning: 'coldDownWarning',
                imgClass: 'alliance',
                descriptionImgClass: 'alliance-cartoon',
                hasHr: false,
                hasColdDown: false,
                refresh: 1,
                eventCode: '24_304'
            }, {
                id: 'diplomacy',
                label: 'diplomacy',
                name: 'diplomacy',
                description: 'diplomacy_description',
                dynamicinfo: '',
                index: 6,
                cold_down: 0,
                messageRemindCount: 0,
                coldDownWarning: 'coldDownWarning',
                imgClass: 'diplomacy',
                descriptionImgClass: 'diplomacy-cartoon',
                hasHr: false,
                hasColdDown: false,
                refresh: 1,
                eventCode: ''
            }];
            $.each(this._funs, function (i, b) {
                var element = new Mojo.com.RelationBaseMenuElement({
                    elementId: b.id,
                    buttonLabel: self.locale(b.label),
                    buttonClickFun: function () {
                        if (b.index == 1) {
                            self._createForceSearch();
                        } else if (b.index == 2) {
                            self._createForceSearchSiege();
                        } else if (b.index == 6) {
                            self._createForceSearchDiplomacy();
                        } else {
                            if (self._crazyForceWar) {
                                return;
                            }
                            self._crazyForceWar = new Mojo.com.CrazyForceWar({
                                inBattle: false,
                                action: b.id,
                                parent: self,
                                updateChallange: function () {
                                    self._updateChallange(self, Mojo.page.Force.getController().getData());
                                }
                            });
                        }
                    },
                    elementName: self.locale(b.name) + ((i == 4 && force.type == 2) ? " (" + self.locale('allied') + ")" : ""),
                    elementDescription: self.locale(b.description),
                    elementDynamicInfo: self.locale(b.dynamicinfo),
                    cold_down: b.cold_down,
                    messageRemindCount: b.messageRemindCount,
                    buttonClickInfo: self._buttonClickInfo(b.id),
                    hasColdDown: b.hasColdDown,
                    coldDownWarning: self.locale(b.coldDownWarning),
                    imgClass: b.imgClass,
                    hasHr: b.hasHr,
                    descriptionImgClass: b.descriptionImgClass,
                    playerInfo: self._playerProfile
                });
                self._list.appendData(element);
            });
            if (this.targetForceId) {
                this._createForceSearch(this.targetForceId);
            }
            if (this.targetCityId) {
                this._createForceSearchSiege(this.targetCityId);
            }
        },
        _buttonClickInfo: function (buttonId) {
            var self = this;
            var isViceOwner = true;
            var tip = '';
            var isClickable = false;
            switch (buttonId) {
            case 'battle':
                tip = self.locale('forcewar_only_owner_start');
                if (self._playerProfile.force_rights.__all__ || self._playerProfile.force_rights.declare_war) {
                    isClickable = true;
                }
                return {
                    isClickable: isClickable,
                    warning: tip
                };
                break;
            case 'siege':
                tip = self.locale('siege_only_owner_start');
                if (self._playerProfile.force_rights.__all__ || self._playerProfile.force_rights.city_war) {
                    isClickable = true;
                }
                return {
                    isClickable: isClickable,
                    warning: tip
                };
                break;
            case 'capture':
                tip = self.locale('free_only_ownerorvice_can_ask_surrender');
                break;
            case 'usurp':
                tip = self.locale('free_only_ownerorvice_can_start_battle');
                break;
            case 'alliance':
                tip = self.locale('free_only_owner_can_ask_alliance');
                isViceOwner = false;
                break;
            case 'diplomacy':
                if (self._playerProfile.force_rights.__all__ || self._playerProfile.force_rights.do_diplomacy) {
                    isClickable = true;
                }
                tip = self.locale('free_only_owner_can_ask_diplomacy');
                return {
                    isClickable: isClickable,
                    warning: tip
                };
                break;
            }
            return {
                isClickable: self._isForceOwner(isViceOwner),
                warning: tip
            };
        },
        _createCrazyForceBattle: function () {
            var self = this;
            var needInit = true;
            if (self._crazyForceWar) {
                if (self._crazyForceWar.inbattle == true) {
                    self._crazyForceWar._refreshForceBattleStatus();
                    needInit = false;
                }
            }
            if (needInit) {
                self._tabs.element().find('ul > li').eq(0).append($("<div class='battleStatus'></div>"));
                self._crazyForceWar = new Mojo.com.CrazyForceWar({
                    inBattle: true,
                    battleType: 'attack',
                    parent: self,
                    action: self.actionType,
                });
            }
        },
        _createForceBattle: function (index) {
            if (Mojo.utils.isNone(this._forceBattlePanel)) {
                this._forceBattlePanel = new Mojo.Object();
                this._forceBattlePanel.element().addClass("forcewar-battlepanel");
                this._tabs.setPanel(index, this._forceBattlePanel);
            }
            var self = this;
            self._forceWarAjax("/force/battleFighting", {}, function (response) {
                if (response.data && response.data.kcuf && !self._hasInit) {
                    self._tabs.element().find('ul > li').eq(1).append($("<div class='battleStatus'></div>"));
                }
                if (response && response.errorCode === 0 && response.data.current) {
                    self._createForceBattleWithBattle();
                } else if (response.errorCode == 130032) {
                    self._createForceBattleWithoutBattle();
                } else if (response.errorCode == 198705) {
                    switch (parseInt(response.data.type)) {
                    case 1:
                        self.actionType = 'usurp';
                        break;
                    case 2:
                        self.actionType = 'rebel';
                        break;
                    case 3:
                        self.actionType = 'uniterebel';
                        break;
                    }
                    self._createCrazyForceBattle();
                } else if (response.errorCode == 198708) {
                    if (self._hasInit) {
                        self._createForceBattleWithoutBattle();
                    } else {
                        self._tabs._select(1);
                        self._hasInit = true;
                    }
                } else if (response.errorCode == 240202) {
                    self._createSiegeCityBattleWithBattle();
                }
            }, function () {
                self._createForceBattleWithoutBattle();
            });
        },
        _refreshForceBattleStatus: function (forceUpdate) {
            var self = this;
            if (self._forceBattleTime != undefined) {
                self._forceBattleTime -= 1;
            }
            if (forceUpdate == true || self._forceBattleTime == undefined || self._forceBattleTime % self._options.interval == 0) {
                self._forceWarAjax("/force/battleFighting", {}, function (response) {
                    if (response && response.errorCode === 0) {
                        var current = response.data.current;
                        if (Mojo.utils.isNone(current) == false) {
                            self._forceBattleTime = current.timeout;
                            self._forceBattleAttackLimit = current.time;
                            self._forceOpponentForceName = current.defender.name;
                            self._forceLodgmentsCount = current.lodgments.length;
                            self._forceCapturedCount = current.captured;
                            self._forceCapturedNotice = current.occupy == 1 ? Mojo.utils.locale('force', 'force_city_attack_header_notice1') : Mojo.utils.locale('force', 'force_city_attack_header_notice2', {
                                num: current.time.rest
                            });
                            self._forceOpponentListPanel.element().find(".mojo-com-forcewarelement").remove();
                            self._forceOpponentListPanel._children = [];
                            self._forceOpponentListPanel.appendData(current.lodgments);
                            if (self._isForceOwner(true)) {
                                self._forceOpponentListPanel._more.element().show();
                            }
                            if (self.element().find(".forcewar-battle-notice").length == 0) {
                                self._forceBattleStatus = $("<div></div>").addClass("page-tips").appendTo(self._forceOpponentListPanel._header);
                            }
                            if (self._forceBattleTime != undefined) {
                                var statusHtml = Mojo.utils.locale('force', 'forcewar_battle_notice', {
                                    opponent_force: self._forceOpponentForceName,
                                    battle_schedule: self._forceCapturedCount + '/' + self._forceLodgmentsCount,
                                    battle_time: Mojo.utils.formatTime(self._forceBattleTime).substr(3)
                                });
                                self._forceBattleStatus.html(statusHtml + self._forceCapturedNotice);
                            } else {
                                clearTimeout(self._forceBattleHandle);
                                self._createForceBattle(0);
                            }
                            self._forceOpponentListPanel._scroll.element().height($(window).height() - 162);
                        } else {
                            clearTimeout(self._forceBattleHandle);
                            self._createForceBattle(0);
                        }
                    }
                }, function () {
                    clearTimeout(self._forceBattleHandle);
                    self._createForceBattle(0);
                });
            }
            if (self.element().find(".forcewar-battle-notice").length == 0) {
                self._forceBattleStatus = $("<div></div>").addClass("page-tips").appendTo(self._forceOpponentListPanel._header);
            }
            if (self._forceBattleTime != undefined) {
                var statusHtml = Mojo.utils.locale('force', 'forcewar_battle_notice', {
                    opponent_force: self._forceOpponentForceName,
                    battle_schedule: self._forceCapturedCount + '/' + self._forceLodgmentsCount,
                    battle_time: Mojo.utils.formatTime(self._forceBattleTime).substr(3)
                });
                self._forceBattleStatus.html(statusHtml + self._forceCapturedNotice);
            }
            if (forceUpdate != true) {
                self._forceBattleHandle = setTimeout(function () {
                    self._refreshForceBattleStatus();
                }, 1000);
            }
        },
        _createForceDefense: function (index, data) {
            if (Mojo.utils.isNone(this._forceDefenseListPanel) == false) {
                return;
            }
            var self = this;
            this._forceDefenseListPanel = new Mojo.ui.ListPanel("forcewar-defense-listpanel", {
                scrollable: true,
                showMore: false,
                pageSize: 20,
                loadFunc: function () {},
                drawFunc: function (data) {
                    var btnDisabled = true;
                    if (self._playerProfile.force_rights.__all__ || self._playerProfile.force_rights.set_lodgment) {
                        btnDisabled = false;
                    }
                    return (new Mojo.com.ForceWarElement(data, {
                        showAssistForce: true,
                        showExpireTime: true,
                        showBtn: true,
                        btnText: Mojo.utils.locale('force', 'forcewar_change'),
                        btnDisabled: btnDisabled,
                        getController: function () {
                            return self._options.getController();
                        },
                        disableClickCallback: function () {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'forcewar_only_owner_change_defender'));
                        },
                        resizeDefence: function () {
                            self._forceDefenseListPanel.resize();
                        },
                        clickCallback: function (forceWarElement) {
                            var selectedForceMemberElement = undefined;
                            var forcePage = self._options.getController();
                            forcePage.hideCurrent();
                            var forceMember = new Mojo.com.ForceMember({
                                showAssistTabs: true,
                                showHeader: true,
                                showSearch: false,
                                showOrder: false,
                                getController: function () {
                                    return self._options.getController();
                                },
                                forceMemberListOptions: {
                                    loadFunc: function (l, s, p, that) {
                                        if (p != undefined) {
                                            self._helpflag = true;
                                        } else {
                                            self._helpflag = false;
                                        }
                                        if (Mojo.utils.isNone(forceMember) == true) {
                                            self._helping = 0;
                                        } else {
                                            self._helping = forceMember._getTabsId();
                                        }
                                        Mojo.ajax("/force/battleMembers", {
                                            start: l,
                                            count: s,
                                            helping: (self._helpflag ? p : self._helping)
                                        }, function (response) {
                                            if (response && response.errorCode === 0) {
                                                forceMember._addHelperTabs(response.data);
                                                forceMember._addHeader(response.data);
                                                if (Mojo.utils.isNone(response.data.list) && response.data.desc != undefined) {
                                                    that._options.emptyLabel = response.data.desc;
                                                }
                                                that.appendData(response.data.list);
                                                if (response.data.list != undefined && response.data.list.length == that._options.pageSize) {
                                                    that._more.show();
                                                } else {
                                                    that._more.hide();
                                                }
                                                that.resize();
                                            }
                                        }, function () {});
                                    }
                                },
                                backCallback: function () {
                                    forceMember.element().remove();
                                    forcePage.showCurrent();
                                    if (selectedForceMemberElement != undefined) {
                                        forceWarElement._data.defender = {};
                                        $.extend(true, forceWarElement._data.defender, selectedForceMemberElement._data);
                                        self._helperId = (forceMember._getTabsId()) <= 0 ? 0 : (selectedForceMemberElement._data.force.id);
                                        Mojo.ajax("/force/battleChangeDefender", (self._helperId ? {
                                            lodgment_id: data.id,
                                            defender_id: selectedForceMemberElement._data.id,
                                            helper: self._helperId
                                        } : {
                                            lodgment_id: data.id,
                                            defender_id: selectedForceMemberElement._data.id
                                        }), function (response) {
                                            if (response.errorCode == 0) {
                                                forceWarElement._data.defender = {};
                                                $.extend(true, forceWarElement._data.defender, response.data);
                                                forceWarElement.refresh();
                                                self._forceDefenseListPanel.resize();
                                                Mojo.track.onEvent('24_701');
                                            } else {
                                                var titiletxt = Mojo.utils.locale('force', 'cannot_change');
                                                if (response.data != undefined && response.data.title != undefined)
                                                    titiletxt = response.data.title;
                                                var errDlg = new Mojo.ui.Dialog(undefined, {
                                                    title: titiletxt,
                                                    classes: ['tip-dialog'],
                                                    content: $("<div class='paragraph'></div>").html(response.errorMsg)
                                                });
                                                new Mojo.ui.Button(undefined, {
                                                    text: Mojo.utils.locale('common', 'close'),
                                                    click: function () {
                                                        errDlg.close();
                                                    }
                                                }).element().appendTo(errDlg._footer);
                                                errDlg.open();
                                            }
                                        }, function () {
                                            forceWarElement.refresh();
                                        });
                                    }
                                },
                                forceMemberElementOptions: {
                                    showAttack: false,
                                    showDefence: true,
                                    showOffer: false,
                                    showLogin: false,
                                    showLevel: true,
                                    showHr: false,
                                    goBtnClass: ['choose-button', 'radio'],
                                    goSpecialClass: '',
                                    subClass: 'warClass',
                                    goBtnText: "",
                                    disableNewForcePlayer: true,
                                    clickFunc: function (forceMemberElement) {
                                        forceMember.element().find(".radio-selected-class").removeClass("radio-selected-class");
                                        forceMemberElement.element().find(".choose-button").addClass("radio-selected-class");
                                        selectedForceMemberElement = forceMemberElement;
                                        forceMember._backBtn.text(Mojo.utils.locale('common', 'ok'));
                                    }
                                }
                            });
                            forceMember.element().appendTo(forcePage.element());
                        }
                    }));
                }
            });
            this._tabs.setPanel(index, this._forceDefenseListPanel);
            $("<div></div>").addClass("page-tips").html(Mojo.utils.locale('force', 'forcewar_defence_notice')).appendTo(this._forceDefenseListPanel._header);
            if (parseInt(self._forceProfile.level) >= 5) {
                self._adjustTimeArea = $("<div  class = 'adjust-time'></div>").appendTo(this._forceDefenseListPanel._header);
                var restStartTime = "" + self._forceProfile.avoid_war.from + ":00";
                var restEndTime = undefined;
                if (parseInt(self._forceProfile.avoid_war.to) <= parseInt(self._forceProfile.avoid_war.from)) {
                    restEndTime = Mojo.utils.locale("force", "nextday") + self._forceProfile.avoid_war.to + ":00";
                } else {
                    restEndTime = self._forceProfile.avoid_war.to + ":00";
                }
                self._adjustLabel = $("<div class = 'adjust-time-label'></div>").html(Mojo.utils.locale('force', 'adjust_times', {
                    time1: restStartTime,
                    time2: restEndTime
                })).appendTo(self._adjustTimeArea);
                self._adjustBtn = new Mojo.ui.Button("adjust-time-btn", {
                    text: Mojo.utils.locale("force", "adjust"),
                    disableClick: function () {
                        Mojo.app.toast.show(self.locale('adjust_times_auth'));
                    },
                    click: function () {
                        var adjustRestDlg = new Mojo.com.ForceRestDialog(self._forceProfile.avoid_war, {
                            callBackFunc: function (data) {
                                self._updateRestInfo(data);
                            },
                        });
                        adjustRestDlg.open();
                    }
                });
                self._adjustBtn.element().appendTo(self._adjustTimeArea);
                if (parseInt(self._playerProfile.position_id) != 1) {
                    self._adjustBtn.disable(true);
                }
            }
            self._forceDefenseListPanel.appendData(data);
        },
        _updateRestInfo: function (data) {
            this._forceProfile.avoid_war.next = data.next;
        },
        _createEnemy: function (index) {
            if (Mojo.utils.isNone(this._forceEnemyListPanel) == false) {
                return;
            }
            var self = this;
            this._forceEnemyListPanel = new Mojo.ui.ListPanel("forcewar-defense-listpanel", {
                scrollable: true,
                showMore: true,
                moreLabel: Mojo.utils.locale('common', 'more'),
                pageSize: 10,
                emptyLabel: Mojo.utils.locale('force', 'no enemy force'),
                loadFunc: function (start, count) {
                    Mojo.ajax("/force/enemy", {
                        start: start,
                        count: count,
                    }, function (response) {
                        if (response && response.errorCode === 0) {
                            self._forceEnemyListPanel.appendData(response.data.enemyList);
                            self._canAttack = response.data.can_attack;
                            if (response.data.enemyList != undefined && response.data.enemyList.length == self._forceEnemyListPanel._options.pageSize) {
                                self._forceEnemyListPanel._more.element().show();
                            } else {
                                self._forceEnemyListPanel._more.element().hide();
                            }
                            self._forceEnemyListPanel.resize();
                        } else {
                            self._forceEnemyListPanel.appendData(null);
                            self._forceEnemyListPanel._more.element().hide();
                            self._forceEnemyListPanel.resize();
                        }
                    }, function () {
                        self._forceEnemyListPanel.appendData(null);
                        self._forceEnemyListPanel._more.element().hide();
                        self._forceEnemyListPanel.resize();
                    });
                },
                drawFunc: function (data) {
                    var btnDisabled = true;
                    if (self._isForceOwner() == true) {
                        btnDisabled = false;
                    }
                    return (new Mojo.com.ForceWarElement(data, {
                        btnText: Mojo.utils.locale('common', 'view'),
                        btnDisabled: false,
                        isForceWarEnemy: true,
                        clickCallback: function (forceWarElement) {
                            var dlg = new Mojo.com.ForceInfoDialog(forceWarElement._data, {}, {
                                showApplyBtn: false,
                                showCloseBtn: false,
                                title: Mojo.utils.locale('force', 'enemy force'),
                                leftBtnText: Mojo.utils.locale('force', 'counterattack'),
                                leftBtnDisabled: !self._canAttack,
                                leftBtnDisabledClick: function () {
                                    Mojo.app.toast.show(Mojo.utils.locale('force', 'forcewar_only_owner_fanji', {
                                        '__default__': '只有势力主和副势力主才能反击哦~'
                                    }));
                                },
                                leftBtnClick: function () {
                                    dlg.close();
                                    Mojo.ajax("/force/battleChallenge", {
                                        defender_id: data.id,
                                        preview: 1
                                    }, function (response) {
                                        if (response && response.errorCode === 0) {
                                            var contribute = response.data.contribute;
                                            var forcewarPreviewDialog = new Mojo.com.ForceWarPreviewDialog(undefined, {
                                                title: Mojo.utils.locale('force', 'forcewar_grain_preview'),
                                                attackBtnText: Mojo.utils.locale('force', 'forcewar_grain_action'),
                                                actionCallback: function (that) {
                                                    that.close();
                                                    Mojo.ajax("/force/battleChallenge", {
                                                        defender_id: data.id
                                                    }, function (response) {
                                                        if (response && response.errorCode === 0) {
                                                            self._tabs._select(0);
                                                            new Mojo.com.CommonDialog(undefined, {
                                                                title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                                                content: $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'forcewar_tip_content').replace('{{:opponent_force}}', data.name)),
                                                                leftBtnText: Mojo.utils.locale('force', 'usurp_war_help'),
                                                                leftBtnClick: function (that) {
                                                                    that.close();
                                                                    new Mojo.com.ForceNoticeDialog({}, {
                                                                        title: Mojo.utils.locale('force', 'forcewar_help_title'),
                                                                        hintText: Mojo.utils.locale('force', 'forcewar_help_content'),
                                                                        okBtnClick: function (that) {
                                                                            that.close();
                                                                            Mojo.ajax("/force/sendWarToMember", {
                                                                                content: that.getContent()
                                                                            }, function (response) {
                                                                                Mojo.app.toast.show(Mojo.utils.locale('common', 'suggestion_has_send'));
                                                                            });
                                                                        }
                                                                    }).open();
                                                                },
                                                                rightBtnText: Mojo.utils.locale('common', 'close'),
                                                                rightBtnClick: function (that) {
                                                                    that.close();
                                                                },
                                                            }).open();
                                                            self._options.getController().getProfile().sync();
                                                        } else {
                                                            if (response.errorCode == 130026) {
                                                                (new Mojo.com.NeedBuyDialog(undefined, {
                                                                    title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                                                    goods: response.data.props,
                                                                    data: response.data,
                                                                    stamina: response.data.cp_total,
                                                                    restoreCount: response.data.cp_current,
                                                                    allRestoreText: Mojo.utils.locale('force', 'all_chanllenge_get'),
                                                                    allRestoreTime: response.data.cp_restore_pp,
                                                                    nextRestoreText: Mojo.utils.locale('force', 'next_chanllenge_get'),
                                                                    nextRestoreTime: response.data.cp_second,
                                                                    restoreText: response.errorMsg,
                                                                    needBuyTip: response.errorMsg,
                                                                    useBtnClick: function (that, result) {
                                                                        if (result && result.errorCode === 0) {
                                                                            Mojo.page.Force.getController().diffForce({
                                                                                challenge: parseInt(result.data.challenge)
                                                                            });
                                                                            self._updateChallange(self, Mojo.page.Force.getController().getData());
                                                                            Mojo.app.toast.show(Mojo.utils.locale('common', 'add_cp', {
                                                                                name: that._options.goods.goods_name,
                                                                                value: result.data.challenge
                                                                            }));
                                                                        }
                                                                    },
                                                                    buyBtnClick: function (that, result) {
                                                                        Mojo.page.Force.getController().updatePlayerProfile({
                                                                            rm: result.data.player.rm,
                                                                            vm: result.data.player.vm
                                                                        });
                                                                    }
                                                                })).open();
                                                            } else {
                                                                (new Mojo.com.CommonDialog(undefined, {
                                                                    title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                                                    content: $('<div class="tip"></div>').html(response.errorMsg),
                                                                    leftBtnText: Mojo.utils.locale('common', 'ok'),
                                                                    leftBtnClick: function (that) {
                                                                        that.close();
                                                                    }
                                                                })).open();
                                                            }
                                                        }
                                                    });
                                                }
                                            });
                                            var winContent = $('<div class="win-content"><div class="force-grain">' + Mojo.utils.locale('force', 'force_grain') + '</div></div>');
                                            var winGrainLabel = (new Mojo.ui.Label("win-grain", {
                                                text: "",
                                                classes: ['fgrain']
                                            }));
                                            winGrainLabel.element().appendTo(winContent);
                                            var loseContent = $('<div class="lose-content"><div class="force-grain">' + Mojo.utils.locale('force', 'force_grain') + '</div></div>');
                                            var loseGrainLabel = new Mojo.ui.Label("lose-grain", {
                                                text: "",
                                                classes: ['fgrain']
                                            });
                                            loseGrainLabel.element().appendTo(loseContent);
                                            forcewarPreviewDialog.setWinContents(winContent);
                                            forcewarPreviewDialog.setLoseContents(loseContent);
                                            forcewarPreviewDialog.setPlayerName(response.data.attacker.name);
                                            forcewarPreviewDialog.setOpponentName(response.data.defender.name);
                                            winGrainLabel.text("+" + response.data.win.attacker.grain);
                                            loseGrainLabel.text("-" + response.data.lose.defender.grain);
                                            forcewarPreviewDialog.open();
                                        } else {
                                            (new Mojo.com.CommonDialog(undefined, {
                                                title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                                content: $('<div class="tip"></div>').html(response.errorMsg),
                                                leftBtnText: Mojo.utils.locale('common', 'ok'),
                                                leftBtnClick: function (that) {
                                                    that.close();
                                                }
                                            })).open();
                                        }
                                    });
                                },
                                rightBtnText: Mojo.utils.locale('force', 'view member'),
                                rightBtnClick: function () {
                                    dlg.close();
                                    var forceMember = new Mojo.com.ForceEnemyMember({
                                        title: data.name,
                                        getController: function () {
                                            return self._options.getController();
                                        },
                                        forceMemberListOptions: {
                                            loadFunc: function (l, s, p, that) {
                                                Mojo.ajax("/force/enemyMembers", {
                                                    enemy_id: data.id,
                                                    start: l,
                                                    count: s
                                                }, function (response) {
                                                    if (response && response.errorCode === 0) {
                                                        that.appendData(response.data.list);
                                                        if (response.data != undefined && response.data.list.length == that._options.pageSize) {
                                                            that._more.show();
                                                        } else {
                                                            that._more.hide();
                                                        }
                                                        that.resize();
                                                    } else {
                                                        (new Mojo.com.TipsDialog({
                                                            title: Mojo.utils.locale('common', 'tips'),
                                                            message: response.errorMsg,
                                                        })).open();
                                                        forceMember.close();
                                                    }
                                                }, function () {});
                                            }
                                        },
                                        backCallback: function () {
                                            forceMember.close();
                                        },
                                        forceMemberElementOptions: {
                                            showAttack: true,
                                            showDefence: "?",
                                            showOffer: false,
                                            showLogin: false,
                                            showLevel: false,
                                            showHr: true,
                                            goBtnClass: ['go-button', 'go-attack-btn'],
                                            goSpecialClass: '',
                                            subClass: '',
                                            goBtnText: Mojo.utils.locale('force', 'revenge'),
                                            clickFunc: function (forceMemberElement) {
                                                Mojo.ajax('/battle/preview', {
                                                    opponent_id: forceMemberElement._data.id,
                                                }, function (result) {
                                                    forceMember.close();
                                                    if (result.errorCode == 0) {
                                                        (new Mojo.com.BattlePreviewDialog(result.data, {
                                                            title: Mojo.utils.locale('force', 'revenge result preview'),
                                                            opponent_id: forceMemberElement._data.id,
                                                            opponent_name: forceMemberElement._data.name,
                                                            message_id: self._options.message_id,
                                                            forceProfile: self._options.getController(),
                                                            type: 'fight',
                                                            isForceEnemy: true,
                                                            from: 'force'
                                                        })).open();
                                                    } else if (result.errorCode == 10003) {
                                                        (new Mojo.com.SpDialog(result.data, {
                                                            title: Mojo.utils.locale('common', 'no enough stamina'),
                                                            message: result.errorMsg,
                                                            forceProfile: self._options.getController(),
                                                            isForceEnemy: true,
                                                        })).open();
                                                    } else if (result.errorCode == 30007) {
                                                        (new Mojo.com.AvoidWarDialog({
                                                            message: Mojo.utils.locale('common', 'avoid_war_content', {
                                                                avoid_war_time: Mojo.utils.formatTime(result.data)
                                                            }),
                                                            avoid_war_time: result.data,
                                                            callback: function () {},
                                                        })).open();
                                                    } else if (result.errorCode == 160003) {
                                                        var dlg = new Mojo.com.CommonDialog(undefined, {
                                                            title: Mojo.utils.locale('common', 'capacify_lack'),
                                                            content: $('<div class="paragraph"></div>').html(Mojo.utils.locale('common', 'capacify_lack_tip')),
                                                            leftBtnText: Mojo.utils.locale('common', 'go_intensify'),
                                                            leftBtnClick: function () {
                                                                Mojo.app.redirect('/intensify');
                                                            },
                                                            rightBtnText: Mojo.utils.locale('common', 'go_sale'),
                                                            rightBtnClick: function () {
                                                                Mojo.app.redirect('/entity', {
                                                                    selected: 3
                                                                });
                                                            },
                                                            close: function () {
                                                                Mojo.app.redirect('/home');
                                                            }
                                                        });
                                                        dlg.open();
                                                    } else {
                                                        (new Mojo.com.TipsDialog({
                                                            title: Mojo.utils.locale('common', 'tips'),
                                                            message: result.errorMsg,
                                                        })).open();
                                                    }
                                                }, function () {}, {
                                                    showWait: true
                                                });
                                            }
                                        }
                                    });
                                    forceMember.open();
                                },
                            });
                            dlg.open();
                        }
                    }));
                }
            });
            this._tabs.setPanel(index, this._forceEnemyListPanel);
        },
        _createBackButton: function () {
            var self = this;
            (new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale("common", "back"),
                click: function () {
                    self.element().hide();
                    if (self._isAssist) {
                        Mojo.app.redirect('/relation', {
                            index: self.actionType == 'assistSlave' ? 1 : 11
                        });
                    } else {
                        self._options.getController().switchToHome();
                    }
                }
            })).element().addClass("force-back-btn").appendTo(this.element());
        },
        _createForceSearchSiege: function (targetCityId) {
            var self = this;
            var forcePage = self._options.getController();
            forcePage.hideCurrent();
            var citySearch = new Mojo.com.CitySearch('citywar-citysearch', {
                backCallback: function () {
                    citySearch.element().remove();
                    Mojo.app.redirect('/force', {
                        index: 2,
                        refresh: 1
                    });
                },
                citySearchParams: {},
                cityListOptions: {
                    targetCityId: targetCityId,
                    btnText: Mojo.utils.locale('force', 'siege_button_txt'),
                    moreLabel: Mojo.utils.locale('force', 'more'),
                    typeOfbattle: 'siege',
                    onBtnClick: function (data) {
                        self._actionForSiege(citySearch, data);
                    },
                    erroCallback: function (response) {
                        if (response.errorCode == 130012) {
                            Mojo.app.redirect('/force', {
                                index: 2,
                                refresh: 1
                            });
                        }
                    }
                }
            });
            citySearch.element().appendTo(forcePage.element());
        },
        _actionForSiege: function (citySearch, data) {
            var self = this;
            var forcePage = self._options.getController();
            var contribute = undefined;
            self._forceSiegeCityName = data.attr.name;
            var forcewarPreviewDialog = new Mojo.com.ForceWarPreviewDialog(undefined, {
                tips: '',
                title: Mojo.utils.locale('force', 'siege_preivew_dlg_title'),
                attackBtnText: Mojo.utils.locale('force', 'siege_button_txt'),
                closeCallback: function (that) {},
                actionCallback: function (that) {
                    that.close();
                    Mojo.ajax("/forceCity/challenge", {
                        id: data.attr.id,
                        renounce: 0,
                        preview: 0
                    }, function (response) {
                        if (response && response.errorCode === 0) {
                            citySearch.element().remove();
                            forcePage.showCurrent();
                            self._createSiegeCityBattleWithBattle();
                            new Mojo.com.CommonDialog(undefined, {
                                title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                content: $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'siege_tip_content', {
                                    owner_name: data.force.name
                                })),
                                leftBtnText: Mojo.utils.locale('force', 'usurp_war_help'),
                                leftBtnClick: function (that) {
                                    that.close();
                                    new Mojo.com.ForceNoticeDialog({}, {
                                        title: Mojo.utils.locale('force', 'siege_help_title'),
                                        hintText: Mojo.utils.locale('force', 'siege_help_content'),
                                        okBtnClick: function (that) {
                                            that.close();
                                            Mojo.ajax("/forceCity/calling", {
                                                content: that.getContent()
                                            }, function (response) {
                                                Mojo.app.toast.show(Mojo.utils.locale('common', 'suggestion_has_send'));
                                            });
                                        }
                                    }).open();
                                },
                                rightBtnText: Mojo.utils.locale('common', 'close'),
                                rightBtnClick: function (that) {
                                    that.close();
                                },
                            }).open();
                            self._options.getController().getProfile().sync();
                        } else {
                            self.siegeErrorProcess(response, citySearch, data);
                        }
                    });
                }
            });
            var winContent = $('<div class="win-content"><div class="force-grain">' + Mojo.utils.locale('force', 'siege_preview_dlg_win', {
                name: data.attr.name
            }) + '</div></div>');
            var loseContent = $('<div class="lose-content"><div class="force-grain">' + Mojo.utils.locale('force', 'siege_preview_dlg_lose', {
                name: data.attr.name
            }) + '</div></div>');
            forcewarPreviewDialog.setWinContents(winContent);
            forcewarPreviewDialog.setLoseContents(loseContent);
            Mojo.ajax("/forceCity/challenge", {
                id: data.attr.id,
                renounce: 0,
                preview: 1
            }, function (response) {
                if (response && response.errorCode === 0) {
                    if (response.data.fighting > 0) {
                        forcewarPreviewDialog.setTips(Mojo.utils.locale('force', 'forcewar_preview_city_in_battle_tip', {
                            name: response.data.attr.name
                        }));
                    }
                    forcewarPreviewDialog.setPlayerName(Mojo.page.Force.getController().getForceProfile().name);
                    forcewarPreviewDialog.setOpponentName(response.data.force.name);
                    forcewarPreviewDialog.open();
                } else {
                    var leftButton = undefined;
                    var leftButtonClick = undefined;
                    if (Mojo.utils.isNone(response.errorMsg) || response.errorMsg == '') {
                        response.errorMsg = Mojo.utils.locale('common', 'action_error');
                    }
                    (new Mojo.com.CommonDialog(undefined, {
                        title: response.data ? response.data.title : Mojo.utils.locale('force', 'forcewar_tip_title'),
                        content: $('<div class="tip"></div>').html(response.errorMsg),
                        leftBtnText: leftButton,
                        leftBtnClick: leftButtonClick,
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        }
                    })).open();
                }
                if (parseInt(self._forceProfile.protect_status) == 1) {
                    self._options.getController().getProfile().sync();
                }
            });
        },
        siegeErrorProcess: function (response, citySearch, data) {
            var self = this;
            var forcePage = self._options.getController();
            if (response.errorCode == 240013) {
                (new Mojo.com.NeedBuyDialog(undefined, {
                    title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                    goods: response.data.props,
                    data: response.data,
                    stamina: response.data.cp_total,
                    restoreCount: response.data.cp_current,
                    allRestoreText: Mojo.utils.locale('force', 'all_chanllenge_get'),
                    allRestoreTime: response.data.cp_restore_pp,
                    nextRestoreText: Mojo.utils.locale('force', 'next_chanllenge_get'),
                    nextRestoreTime: response.data.cp_second,
                    restoreText: response.errorMsg,
                    needBuyTip: response.errorMsg,
                    useBtnClick: function (that, result) {
                        if (result && result.errorCode === 0) {
                            Mojo.page.Force.getController().diffForce({
                                challenge: parseInt(result.data.challenge)
                            });
                            self._updateChallange(self, Mojo.page.Force.getController().getData());
                            Mojo.app.toast.show(Mojo.utils.locale('common', 'add_cp', {
                                name: that._options.goods.goods_name,
                                value: result.data.challenge
                            }));
                        }
                    },
                    buyBtnClick: function (that, result) {
                        Mojo.page.Force.getController().updatePlayerProfile({
                            rm: result.data.player.rm,
                            vm: result.data.player.vm
                        });
                    }
                })).open();
            } else if (response && response.errorCode === 240008) {
                (new Mojo.com.CommonDialog(undefined, {
                    title: response.data ? response.data.title : Mojo.utils.locale('force', 'forcewar_tip_title'),
                    content: $('<div class="tip"></div>').html(response.errorMsg),
                    leftBtnText: Mojo.utils.locale('force', 'siege_button_resiege_txt'),
                    leftBtnClick: function (that) {
                        that.close();
                        Mojo.ajax("/forceCity/challenge", {
                            id: data.attr.id,
                            renounce: 1,
                            preview: 0
                        }, function (res) {
                            if (res && res.errorCode === 0) {
                                citySearch.element().remove();
                                forcePage.showCurrent();
                                self._createSiegeCityBattleWithBattle();
                                new Mojo.com.CommonDialog(undefined, {
                                    title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                    content: $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'siege_tip_content', {
                                        owner_name: data.force.name
                                    })),
                                    leftBtnText: Mojo.utils.locale('force', 'usurp_war_help'),
                                    leftBtnClick: function (that) {
                                        that.close();
                                        new Mojo.com.ForceNoticeDialog({}, {
                                            title: Mojo.utils.locale('force', 'siege_help_title'),
                                            hintText: Mojo.utils.locale('force', 'siege_help_content'),
                                            okBtnClick: function (that) {
                                                that.close();
                                                Mojo.ajax("/forceCity/calling", {
                                                    content: that.getContent()
                                                }, function (res) {
                                                    Mojo.app.toast.show(Mojo.utils.locale('common', 'suggestion_has_send'));
                                                });
                                            }
                                        }).open();
                                    },
                                    rightBtnText: Mojo.utils.locale('common', 'close'),
                                    rightBtnClick: function (that) {
                                        that.close();
                                    },
                                }).open();
                                self._options.getController().getProfile().sync();
                                Mojo.track.onEvent('24_702');
                            } else {
                                self.siegeErrorProcess(res, citySearch, data);
                            }
                        });
                    },
                    rightBtnText: Mojo.utils.locale('common', 'close'),
                    rightBtnClick: function (that) {
                        that.close();
                    }
                })).open();
            } else if (response && response.errorCode === 240006) {
                (new Mojo.com.CommonDialog(undefined, {
                    title: response.data ? response.data.title : Mojo.utils.locale('force', 'forcewar_tip_title'),
                    content: $('<div class="tip"></div>').html(response.errorMsg),
                    rightBtnText: Mojo.utils.locale('common', 'close'),
                    rightBtnClick: function (that) {
                        that.close();
                        var forcePage = self._options.getController();
                        forcePage.element().find('#citywar-citysearch').remove();
                        self._createForceSearchSiege();
                    }
                })).open();
            } else {
                if (Mojo.utils.isNone(response.errorMsg) || response.errorMsg == '') {
                    response.errorMsg = Mojo.utils.locale('common', 'action_error');
                }
                (new Mojo.com.CommonDialog(undefined, {
                    title: response.data ? response.data.title : Mojo.utils.locale('force', 'forcewar_tip_title'),
                    content: $('<div class="tip"></div>').html(response.errorMsg),
                    leftBtnText: Mojo.utils.locale('common', 'close'),
                    leftBtnClick: function (that) {
                        that.close();
                    }
                })).open();
            }
        },
        _createSiegeCityBattleWithBattle: function () {
            this._forceBattlePanel.element().children().remove();
            var self = this;
            var needShowMore = false;
            if (self._playerProfile.force_rights.__all__ || self._playerProfile.force_rights.city_war) {
                needShowMore = true;
            }
            this._forceOpponentListPanel = new Mojo.ui.ListPanel("forcewar-opponent-listpanel", {
                classes: ['force-city-war-listpanel'],
                scrollable: true,
                showMore: needShowMore,
                alwaysMore: needShowMore,
                pageSize: 20,
                moreLabel: Mojo.utils.locale('force', 'forcewar_retreat'),
                moreClick: function (that) {
                    if (!needShowMore) {
                        return;
                    }
                    (new Mojo.com.CommonDialog(undefined, {
                        title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                        content: $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'forcewar_retreat_question')),
                        leftBtnText: Mojo.utils.locale('common', 'ok'),
                        leftBtnClick: function (that) {
                            that.close();
                            self._siegeCityWarAjax("/forceCity/surrender", {}, function (response) {
                                if (response && response.errorCode === 0) {
                                    self._createForceBattle(0);
                                }
                            });
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        }
                    })).open();
                },
                loadFunc: function (s, l, p, that) {
                    self._siegeCityWarAjax("/forceCity/status", {}, function (response) {
                        var current = response.data;
                        if (Mojo.utils.isNone(current) == false) {
                            self._forceSiegeCityName = current.attr.name;
                            self._forceBattleTime = current.timeout;
                            self._forceCityBattleAttackLimit = current.time;
                            self._forceOpponentForceName = current.attr.name;
                            self._forceLodgmentsCount = current.lodgments.length;
                            self._forceCapturedCount = current.captured;
                            self._cityDefence = current.city.defence;
                            that.element().find(".mojo-com-forcewarelement").remove();
                            that._children = [];
                            that.appendData(current.lodgments);
                            self._forceOpponentListPanel._scroll.element().height($(window).height() - 162);
                        }
                    });
                },
                drawFunc: function (data) {
                    var btnDisabled = false;
                    if (data.captured) {
                        btnDisabled = true;
                    }
                    var fwe = (new Mojo.com.ForceCityWarElement(data, {
                        showForce: true,
                        showDefence: false,
                        btnText: Mojo.utils.locale('force', 'forcewar_battle_action'),
                        btnSpecial: "go-attack-btn",
                        btnAttackLimit: self._forceCityBattleAttackLimit,
                        cityDefence: self._cityDefence,
                        btnDisabled: btnDisabled,
                        disableClickCallback: function (that) {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'force_city_attack_cd_notice'));
                        },
                        clickCallback: function (forceWarElement) {
                            var capturedPreviewDialog = new Mojo.com.ForceWarPreviewDialog(undefined, {
                                classes: ['force-city-war-preview-dlg'],
                                attackBtnText: Mojo.utils.locale('force', 'forcewar_battle_action'),
                                title: Mojo.utils.locale('force', 'forcewar_battle_preview'),
                                attackerName: self._options.getController().getPlayerProfile().name,
                                defenderName: (data.defender ? data.defender.name : "?"),
                                tips: Mojo.utils.locale('force', 'city_attack_btn_limit2', {
                                    rest: self._forceCityBattleAttackLimit.rest,
                                    total: self._forceCityBattleAttackLimit.total
                                }),
                                actionCallback: function (that) {
                                    that.close();
                                    self._siegeCityWarAjax("/forceCity/attack", {
                                        id: data.id,
                                        preview: 0
                                    }, function (response) {
                                        if (response && response.errorCode === 0) {
                                            var playerLevel = self._options.getController().getPlayerProfile().level;
                                            var resultTitle = "";
                                            var resultTip = "";
                                            var leftBtnDisabled = false;
                                            var leftBtnText = undefined;
                                            var leftBtnFunc = undefined;
                                            var rightBtnDisabled = false;
                                            var rightBtnText = undefined;
                                            var rightBtnFunc = undefined;
                                            var current = response.data;
                                            if (current.player) {
                                                if (parseInt(current.player.sp) == NaN) {
                                                    current.player.sp = 0;
                                                }
                                                Mojo.page.Force.getController().updatePlayerProfile({
                                                    sp: current.player.sp
                                                });
                                                Mojo.page.Force.getController().diffPlayer({
                                                    grain: current.grain
                                                });
                                            }
                                            if (current != undefined) {
                                                if (current.status == 1) {
                                                    forceWarElement.element().addClass("has-captured");
                                                    forceWarElement._elementButton.disable(true);
                                                    resultTitle = Mojo.utils.locale('force', 'capture_win');
                                                    leftBtnDisabled = false;
                                                    rightBtnDisabled = false;
                                                    leftBtnText = Mojo.utils.locale('package', 'package_switch');
                                                    rightBtnText = Mojo.utils.locale('common', 'close');
                                                    if (data.defender == undefined) {
                                                        if (playerLevel < 105) {
                                                            leftBtnDisabled = true;
                                                            leftBtnText = undefined;
                                                        }
                                                        resultTip = Mojo.utils.locale('force', 'win_lodgment_without_defender', {
                                                            'lodgment': data.name
                                                        });
                                                    } else {
                                                        if (playerLevel < 105) {
                                                            leftBtnText = Mojo.utils.locale('battle', 'formation detail');
                                                        } else {
                                                            rightBtnText = Mojo.utils.locale('battle', 'formation detail');
                                                        }
                                                        var defendername = Mojo.utils.formatPlayerName(data.defender);
                                                        resultTip = Mojo.utils.locale('force', 'win_lodgment_with_defender', {
                                                            'defendername': defendername,
                                                            'lodgment': data.name
                                                        });
                                                    }
                                                } else {
                                                    forceWarElement.element().removeClass("has-captured");
                                                    forceWarElement._elementButton.disable(false);
                                                    resultTitle = Mojo.utils.locale('force', 'capture_lose');
                                                    leftBtnDisabled = false;
                                                    rightBtnDisabled = false;
                                                    leftBtnText = Mojo.utils.locale('force', 'capture_again');
                                                    rightBtnText = Mojo.utils.locale('battle', 'formation detail');
                                                    if (data.defender == undefined) {
                                                        rightBtnText = Mojo.utils.locale('common', 'close');
                                                    }
                                                    var defendername = Mojo.utils.formatPlayerName(data.defender);
                                                    resultTip = Mojo.utils.locale('force', 'lose_lodgment_defender', {
                                                        'defendername': defendername,
                                                        'lodgment': data.name
                                                    });
                                                    self._btnAttackCd = new Mojo.Object(undefined, {
                                                        classes: ['com-force-city-war-reattack-cd']
                                                    });
                                                    self._btnAttackCd.element().html(Mojo.utils.locale('force', 'city_attack_btn_limit2', {
                                                        rest: current.time.rest,
                                                        total: current.time.total
                                                    }));
                                                    if (current.time != undefined && current.time.rest == 0) {
                                                        leftBtnDisabled = true;
                                                    }
                                                }
                                                var dlgContent = $('<div class="tip"><div class="fight-result">' + resultTip + '</div></div>');
                                                var offer = $('<div class="fight-offer"></div>');
                                                new Mojo.ui.Label(undefined, {
                                                    classes: ['grain'],
                                                    text: "+" + current.grain
                                                }).element().appendTo(offer);
                                                new Mojo.ui.Label(undefined, {
                                                    classes: ['contribute'],
                                                    text: Mojo.utils.locale('force', 'offer1') + "+" + current.contribute
                                                }).element().appendTo(offer);
                                                offer.appendTo(dlgContent);
                                                if (self._btnAttackCd != undefined) {
                                                    self._btnAttackCd.element().appendTo(dlgContent);
                                                }
                                                var onCloseFunc = function (battleDetail) {
                                                    self._refreshSiegeCityBattleStatus(true);
                                                    self._attackResultDlg = new Mojo.com.CommonDialog(undefined, {
                                                        classes: ['forcewar-win-dlg'],
                                                        title: resultTitle,
                                                        content: dlgContent,
                                                        leftBtnText: leftBtnText,
                                                        leftBtnDisabled: leftBtnDisabled,
                                                        leftBtnDisabledClick: function (that) {
                                                            Mojo.app.toast.show(Mojo.utils.locale('force', 'force_city_attack_cd_notice'));
                                                        },
                                                        leftBtnClick: function (that) {
                                                            if (current.status == 1) {
                                                                if (playerLevel >= 105) {
                                                                    Mojo.app.redirect('/package');
                                                                } else {
                                                                    that.hide();
                                                                    (new Mojo.com.BattleDetailDialog(battleDetail, {
                                                                        non_show_def_lever: battleDetail.defender.player.level == undefined,
                                                                        non_show_base_def: battleDetail.defender.player.base_defence == undefined,
                                                                        pid: data.defender.id,
                                                                        pkMode: true,
                                                                        vm: '+0',
                                                                        xp: '+0',
                                                                        entity: null,
                                                                        close: function () {
                                                                            that.show();
                                                                        },
                                                                    })).open(true);
                                                                }
                                                            } else {
                                                                that.close();
                                                                forceWarElement.doClick();
                                                            }
                                                        },
                                                        rightBtnText: rightBtnText,
                                                        rightBtnDisabled: rightBtnDisabled,
                                                        rightBtnClick: function (that) {
                                                            if (data.defender == undefined || (current.status == 1 && playerLevel < 105)) {
                                                                that.close();
                                                            } else {
                                                                that.hide();
                                                                (new Mojo.com.BattleDetailDialog(battleDetail, {
                                                                    non_show_def_lever: battleDetail.defender.player.level == undefined,
                                                                    non_show_base_def: battleDetail.defender.player.base_defence == undefined,
                                                                    pid: data.defender.id,
                                                                    pkMode: true,
                                                                    vm: '+0',
                                                                    xp: '+0',
                                                                    entity: null,
                                                                    close: function () {
                                                                        that.show();
                                                                    },
                                                                })).open(true);
                                                            }
                                                        },
                                                    });
                                                    self._attackResultDlg.open();
                                                };
                                                if (data.defender == undefined) {
                                                    onCloseFunc(undefined);
                                                } else {
                                                    Mojo.ajax('/battle/Detail', {}, function (result) {
                                                        if (result.errorCode == 0) {
                                                            Mojo.ui.BattleAnimation.onclose = function () {
                                                                onCloseFunc(result.data);
                                                            };
                                                            Mojo.ui.BattleAnimation.openBattle(result);
                                                        }
                                                    }, function () {}, {
                                                        showWait: true
                                                    });
                                                }
                                            }
                                        } else {
                                            (new Mojo.com.CommonDialog(undefined, {
                                                title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                                content: $('<div class="tip"></div>').html(response.errorMsg),
                                                leftBtnText: Mojo.utils.locale('common', 'ok'),
                                                leftBtnClick: function (that) {
                                                    that.close();
                                                }
                                            })).open();
                                        }
                                    });
                                    Mojo.track.onEvent('24_703');
                                }
                            });
                            self._siegeCityWarAjax("/forceCity/attack", {
                                id: data.id,
                                preview: 1
                            }, function (response) {
                                if (response && response.errorCode === 0) {
                                    var current = response.data;
                                    if (current != undefined) {
                                        if (current.defender) {
                                            capturedPreviewDialog.setOpponentName(current.defender.name);
                                        } else {
                                            capturedPreviewDialog.setOpponentName("?");
                                        }
                                        var winContent = $('<div><div class="lodgment-name">' + Mojo.utils.locale('force', 'capture_lodgment', {
                                            'name': data.name
                                        }) + '</div></div>');
                                        var offer = $('<div class="capture-offer"></div>');
                                        new Mojo.ui.Label(undefined, {
                                            classes: ['grain'],
                                            text: "+" + current.win.grain
                                        }).element().appendTo(offer);
                                        new Mojo.ui.Label(undefined, {
                                            classes: ['contribute'],
                                            text: Mojo.utils.locale('force', 'offer1') + " +" + current.win.contribute
                                        }).element().appendTo(offer);
                                        offer.appendTo(winContent);
                                        capturedPreviewDialog.setWinContents(winContent);
                                        var loseoffer = $('<div class="capture-offer"></div>');
                                        new Mojo.ui.Label(undefined, {
                                            classes: ['grain'],
                                            text: "+" + current.lose.grain
                                        }).element().appendTo(loseoffer);
                                        new Mojo.ui.Label(undefined, {
                                            classes: ['contribute'],
                                            text: Mojo.utils.locale('force', 'offer1') + " +" + current.lose.contribute
                                        }).element().appendTo(loseoffer);
                                        capturedPreviewDialog.setLoseContents($("<div></div>").append(loseoffer));
                                    }
                                    capturedPreviewDialog.open();
                                } else if (response.errorCode == 130204) {
                                    (new Mojo.com.CommonDialog(undefined, {
                                        title: response.data.title,
                                        content: $('<div class="tip"></div>').html(response.errorMsg + "<br>" + Mojo.utils.locale('force', 'force_contribute_not_enough', {
                                            force_level: Mojo.page.Force.getController().getForceProfile().level,
                                            contribute: response.data.contribute
                                        })),
                                        leftBtnText: Mojo.utils.locale('common', 'go_neizheng'),
                                        leftBtnClick: function (that) {
                                            that.close();
                                            Mojo.app.redirect('/force', {
                                                index: 1
                                            });
                                        },
                                        rightBtnText: Mojo.utils.locale('common', 'close'),
                                        rightBtnClick: function (that) {
                                            that.close();
                                        }
                                    })).open();
                                } else if (response && response.errorCode != 0 && Mojo.utils.isNone(response.data) == false && Mojo.utils.isNone(response.data.props) == false) {
                                    (new Mojo.com.NeedBuyDialog(undefined, {
                                        title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                        goods: response.data.props,
                                        stamina: response.data.stamina,
                                        restoreCount: response.data.sp,
                                        allRestoreText: Mojo.utils.locale('common', 'time for all sp'),
                                        allRestoreTime: response.data.sp_restore_pp,
                                        nextRestoreText: Mojo.utils.locale('common', 'time for next sp'),
                                        nextRestoreTime: response.data.sp_second,
                                        restoreText: response.errorMsg,
                                        needBuyTip: response.errorMsg,
                                        useBtnClick: function (that, result) {
                                            that.close();
                                            if (result && result.errorCode === 0) {
                                                Mojo.page.Force.getController().updatePlayerProfile({
                                                    sp: result.data.player.sp
                                                });
                                                Mojo.app.toast.show(Mojo.utils.locale('common', 'add_sp', {
                                                    name: that._options.goods.goods_name,
                                                    value: result.data.value
                                                }));
                                            }
                                        },
                                        buyBtnClick: function (that, result) {
                                            Mojo.page.Force.getController().updatePlayerProfile({
                                                rm: result.data.player.rm,
                                                vm: result.data.player.vm
                                            });
                                        }
                                    })).open();
                                } else {
                                    var t = Mojo.utils.locale('force', 'forcewar_tip_title');
                                    if (response.data != undefined && response.data.title != undefined) {
                                        t = response.data.title;
                                    }
                                    (new Mojo.com.CommonDialog(undefined, {
                                        title: t,
                                        content: $('<div class="tip"></div>').html(response.errorMsg),
                                        leftBtnText: Mojo.utils.locale('common', 'close'),
                                        leftBtnClick: function (that) {
                                            that.close();
                                        }
                                    })).open();
                                }
                            });
                        }
                    }));
                    return fwe;
                }
            });
            this._forceOpponentListPanel.element().find('.more').addClass('retreat');
            this._forceOpponentListPanel.element().appendTo(this._forceBattlePanel.element());
            if (this._isForceOwner(true)) {
                this._forceOpponentListPanel._more.show();
            }
            this._forceBattleStatus = $("<div></div>").addClass("page-tips  forcewar-battle-notice").appendTo(this._forceOpponentListPanel._header);
            this._refreshSiegeCityBattleStatus();
        },
        _refreshSiegeCityBattleStatus: function (forceUpdate) {
            var self = this;
            if (self._forceBattleTime != undefined) {
                self._forceBattleTime -= 1;
            }
            if (forceUpdate == true || self._forceBattleTime == undefined || self._forceBattleTime % self._options.interval == 0) {
                self._siegeCityWarAjax("/forceCity/status", {}, function (response) {
                    if (response && response.errorCode === 0) {
                        var current = response.data;
                        if (Mojo.utils.isNone(current) == false) {
                            self._forceBattleTime = current.timeout;
                            self._forceCityBattleAttackLimit = current.time;
                            self._forceSiegeCityName = current.attr.name;
                            self._forceLodgmentsCount = current.lodgments.length;
                            self._forceCapturedCount = current.captured;
                            self._forceCapturedNotice = current.occupy == 1 ? Mojo.utils.locale('force', 'force_city_attack_header_notice1') : Mojo.utils.locale('force', 'force_city_attack_header_notice2', {
                                num: current.time.rest
                            });
                            self._cityDefence = current.city.defence;
                            self._forceOpponentListPanel.element().find(".mojo-com-forcewarelement").remove();
                            self._forceOpponentListPanel._children = [];
                            self._forceOpponentListPanel.appendData(current.lodgments);
                            if (self._isForceOwner(true)) {
                                self._forceOpponentListPanel._more.element().show();
                            }
                            if (self.element().find(".forcewar-battle-notice").length == 0) {
                                self._forceBattleStatus = $("<div></div>").addClass("page-tips").appendTo(self._forceOpponentListPanel._header);
                            }
                            if (self._forceBattleTime != undefined) {
                                var statusHtml = Mojo.utils.locale('force', 'siege_battle_notice', {
                                    city: self._forceSiegeCityName,
                                    battle_schedule: self._forceCapturedCount + '/' + self._forceLodgmentsCount,
                                    battle_time: Mojo.utils.formatTime(self._forceBattleTime).substr(3)
                                });
                                self._forceBattleStatus.html(statusHtml + self._forceCapturedNotice);
                            } else {
                                clearTimeout(self._forceBattleHandle);
                                self._createForceBattle(0);
                            }
                            self._forceOpponentListPanel._scroll.element().height($(window).height() - 162);
                        } else {
                            clearTimeout(self._forceBattleHandle);
                            self._createForceBattle(0);
                        }
                    }
                }, function () {
                    clearTimeout(self._forceBattleHandle);
                    self._createForceBattle(0);
                });
            }
            if (self.element().find(".forcewar-battle-notice").length == 0) {
                self._forceBattleStatus = $("<div></div>").addClass("page-tips").appendTo(self._forceOpponentListPanel._header);
            }
            if (self._forceBattleTime != undefined) {
                var statusHtml = Mojo.utils.locale('force', 'siege_battle_notice', {
                    city: self._forceSiegeCityName,
                    battle_schedule: self._forceCapturedCount + '/' + self._forceLodgmentsCount,
                    battle_time: Mojo.utils.formatTime(self._forceBattleTime).substr(3)
                });
                self._forceBattleStatus.html(statusHtml + self._forceCapturedNotice);
            }
            if (forceUpdate != true) {
                self._forceBattleHandle = setTimeout(function () {
                    self._refreshSiegeCityBattleStatus();
                }, 1000);
            }
        },
        _siegeCityWarAjax: function (url, params, success, fail) {
            var self = this;
            Mojo.ajax(url, params, function (response) {
                if (response && response.errorCode === 240201) {
                    clearTimeout(self._forceBattleHandle);
                    self._showSiegeCityWarResultDialog(response.data, function () {
                        Mojo.app.redirect('/force', {
                            index: 2
                        });
                    });
                } else {
                    if (success instanceof Function) {
                        success(response);
                    }
                }
            }, function () {
                if (fail instanceof Function) {
                    fail();
                }
            });
        },
        _showSiegeCityWarResultDialog: function (result, callback) {
            var self = this;
            var title = undefined;
            var content = undefined;
            var leftBtnText = undefined;
            var leftBtnClick = undefined;
            var rightBtnText = Mojo.utils.locale('common', 'close');
            var rightBtnClick = function (that) {
                that.close();
            };
            self._forceSiegeCityName = result.attr.name;
            if (result.battle.status == 1) {
                title = Mojo.utils.locale('force', 'siege_city_war_win');
                content = $('<div class="tip"></div>');
                $('<div></div>').html(Mojo.utils.locale('force', 'siege_city_war_win_content', {
                    forcename: result.owner.name,
                    name: self._forceSiegeCityName,
                    niudanname: result.attr.name_exchange
                })).appendTo(content);
                $('<div></div>').html(Mojo.utils.locale('force', 'forcewar_win_commend')).appendTo(content);
                var commend = "";
                var icount = 1;
                for (var index in result.contribute) {
                    var commendplayer = result.contribute[index];
                    if (icount == result.contribute.length) {
                        commend += Mojo.utils.formatPlayerName(commendplayer);
                    } else if (icount % 2 == 0) {
                        commend += Mojo.utils.formatPlayerName(commendplayer) + ",<br/>";
                    } else {
                        commend += Mojo.utils.formatPlayerName(commendplayer) + ", ";
                    }
                    icount += 1;
                }
                $('<div></div>').html(commend).appendTo(content);
                leftBtnText = Mojo.utils.locale('force', 'force_boss_challenge_final_goexchange');
                leftBtnClick = function () {
                    Mojo.app.redirect('/force', {
                        index: 3,
                        selected: 1
                    });
                };
                rightBtnText = Mojo.utils.locale('force', 'force_boss_challenge_final_goviewcity');
                rightBtnClick = function () {
                    Mojo.app.redirect('/force', {
                        index: 8
                    });
                };
            } else if (result.battle.status == 2) {
                title = Mojo.utils.locale('force', 'siege_city_war_lose');
                content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'siege_city_war_lose_content', {
                    forcename: result.owner.name,
                    name: self._forceSiegeCityName
                }));
            } else if (result.battle.status == 3) {
                title = Mojo.utils.locale('force', 'force_city_war_result_title1');
                content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'force_city_war_result_content1', {
                    forcename: result.force.name,
                    name: self._forceSiegeCityName
                }));
            } else if (result.battle.status == 4) {
                title = Mojo.utils.locale('force', 'force_city_war_result_title2');
                content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'force_city_war_result_content2', {
                    forcename: result.owner.name,
                    name: self._forceSiegeCityName
                }));
            } else if (result.battle.status == 5) {
                title = Mojo.utils.locale('force', 'force_city_war_result_title1');
                content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'force_city_war_result_content3', {
                    name: self._forceSiegeCityName
                }));
            }
            (new Mojo.com.CommonDialog(undefined, {
                classes: ['forcewar-win-dlg'],
                title: title,
                content: content,
                leftBtnText: leftBtnText,
                leftBtnClick: leftBtnClick,
                rightBtnText: rightBtnText,
                rightBtnClick: rightBtnClick,
                close: function () {
                    if (callback instanceof Function) {
                        callback();
                    }
                }
            })).open();
            this._options.getController().getProfile().sync();
        },
        localeCat: function () {
            return 'force';
        },
        _getUrlParam: function (name) {
            var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
            var r = window.location.search.substr(1).match(reg);
            if (r != null) return unescape(r[2]);
            return null;
        },
        _formatExpireTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceWarElement = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceWarElement";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass("mojo-com-forcewarelement box-inner");
            this._elementPosition = undefined;
            this._elementGeneral = undefined;
            this._elementValue = undefined;
            this._elementForce = undefined;
            this._elementButton = undefined;
            this._elementAssistForce = undefined;
            this._elementExpireTime = undefined;
            this._expireTime = undefined;
            this._forceProfile = Mojo.page.Force.getController().getForceProfile();
            this.refresh();
        },
        refresh: function (data) {
            if (data == undefined) {
                data = this._data;
            }
            var assistFlag = false;
            if (this._forceProfile.type == 2 || this._forceProfile.type == 3)
                assistFlag = true;
            this._createElementPosition(data);
            this._createForceId(data);
            this._createElementGeneral(data);
            this._createElementForce(data);
            if (assistFlag)
                this._createElementAssistForce(data);
            this._createElementValue(data);
            if (assistFlag)
                this._createElementExpireTime(data);
            this._createElementButton(data);
        },
        _getDefaultOptions: function () {
            return {
                myIndex: 0,
                btnText: "",
                btnSpecial: "go-instead-btn",
                btnDisabled: false,
                clickCallback: undefined,
                disableClickCallback: undefined,
                showForce: false,
                showDefence: true,
                isForceWarEnemy: false,
                showAssistForce: false,
                showExpireTime: false,
                showBtn: false,
                showHr: false
            };
        },
        _createElementPosition: function (data) {
            if (Mojo.utils.isNone(this._elementPosition)) {
                this._elementPosition = new Mojo.ui.Label();
                this.element().append(this._elementPosition.element());
                if (this._options.showNonRMBPlayerAssistBtn == true) {
                    this._nonRMBPlayOverallContribute = $("<div class='non-rmb-player-overall'></div>");
                    this.element().append(this._nonRMBPlayOverallContribute);
                    this._nonRMBPlayIndividualContribute = $("<div class='non-rmb-player-individual'></div>");
                    this.element().append(this._nonRMBPlayIndividualContribute);
                }
                $("<div class='line'></div>").appendTo(this.element());
                if (this._options.showHr != false) {
                    this._elementPosition.element().append($('<hr>'));
                }
            }
            var str;
            if (this._options.isForceWarEnemy) {
                str = Mojo.utils.locale("force", "forcewar_enemy_level").replace(/\{\{:index\}\}/g, data.level);
            } else {
                str = Mojo.utils.locale("force", "forcewar_element_position").replace(/\{\{:index\}\}/g, data.id);
            }
            this._elementPosition.element().addClass("forcewar-element-label forcewar-element-position").find(".icon").html(str);
            this._elementPosition.text(data.name);
        },
        _createForceId: function (data) {
            if (!this._options.isForceWarEnemy) {
                return;
            }
            if (Mojo.utils.isNone(this._elementForceID)) {
                this._elementForceID = new Mojo.ui.Label();
                this.element().append(this._elementForceID.element());
                this._elementForceID.element().addClass("forcewar-element-label forcewar-element-general");
            }
            if (data.id) {
                this._elementForceID.text(Mojo.utils.locale('force', 'force_id') + data.id);
            }
        },
        _createElementGeneral: function (data) {
            if (Mojo.utils.isNone(this._elementGeneral)) {
                this._elementGeneral = new Mojo.ui.Label(undefined, {
                    text: ''
                });
                this.element().append(this._elementGeneral.element());
            }
            var elementGeneralHtml = this._elementGeneral.element();
            elementGeneralHtml.addClass("forcewar-element-label forcewar-element-general");
            if (!this._options.isForceWarEnemy) {
                if (Mojo.utils.isNone(data.captured)) {
                    elementGeneralHtml.find(".icon").html(Mojo.utils.locale("force", "forcewar_element_general"));
                    if (Mojo.utils.isNone(data.defender) == false) {
                        if (data.defender.title_info) {
                            elementGeneralHtml.find('.text').html(new Mojo.com.PlayerName(data.defender.title_info).element());
                        } else {
                            elementGeneralHtml.find('.text').html(new Mojo.com.PlayerName({
                                player_name: data.defender.name
                            }).element());
                        }
                    } else {
                        this._elementGeneral.text(Mojo.utils.locale('force', 'none'));
                    }
                } else {
                    elementGeneralHtml.find(".icon").html(Mojo.utils.locale("force", "forcewar_element_captured"));
                    if (data.captured.title_info) {
                        elementGeneralHtml.find('.text').html(new Mojo.com.PlayerName(data.captured.title_info).element());
                    } else {
                        if (data.captured && data.captured.name) {
                            elementGeneralHtml.find('.text').html(new Mojo.com.PlayerName({
                                player_name: data.captured.name
                            }).element());
                        } else {
                            this._elementGeneral.text(Mojo.utils.locale('force', 'none'));
                        }
                    }
                }
            } else {
                elementGeneralHtml.find('.text').html(new Mojo.com.PlayerName(data.title_info ? data.title_info : {
                    player_name: data.owner_name
                }, {
                    title: true
                }).element());
            }
        },
        _createElementValue: function (data) {
            if (this._options.isForceWarEnemy) {
                this._elementValue = new Mojo.ui.Label();
                this.element().append(this._elementValue.element());
                this._elementValue.element().addClass("forcewar-element-label forcewar-element-defence");
                this._elementValue.text(Mojo.utils.locale('force', 'forcewar_enemy_mem', {
                    current_mem: data.current_mem,
                    total_mem: data.total_mem
                }));
                this._elementValue = $("<div class = 'forcewar-element-enemy-gain-text'></div>");
                this.element().append(this._elementValue);
                this._elementValue.html(Mojo.utils.locale('force', 'forcewar_enemy_grain'));
                new Mojo.ui.Label(undefined, {
                    classes: this._options.isForceWarEnemy == false ? ['grain'] : ['grain enemy'],
                    text: data.grain
                }).element().appendTo(this._elementValue);
            } else {
                if (this._options.showDefence == false) {
                    return;
                }
                if (Mojo.utils.isNone(this._elementValue)) {
                    this._elementValue = new Mojo.ui.Label();
                    this.element().append(this._elementValue.element());
                }
                this._elementValue.element().addClass("forcewar-element-label forcewar-element-defence").find(".icon").html(Mojo.utils.locale("force", "forcewar_element_defence"));
                if (Mojo.utils.isNone(data.defender) == false && Mojo.utils.isNone(data.defender.defence_min) == false) {
                    this._elementValue.text(data.defender.defence_min + "~" + data.defender.defence_max);
                } else if (Mojo.utils.isNone(data.captured) == false && Mojo.utils.isNone(data.captured.defence_min) == false) {
                    this._elementValue.text(data.captured.defence_min + "~" + data.captured.defence_max);
                } else {
                    this._elementValue.text("?");
                }
            }
        },
        _createElementAssistForce: function (data) {
            var forceName = undefined;
            if (this._options.showAssistForce == false) {
                return;
            }
            if (Mojo.utils.isNone(data.defender) == true) {
                if (Mojo.utils.isNone(this._elementAssistForce) == false) {
                    this._elementAssistForce.hide();
                    this._elementAssistForce = undefined;
                }
                return;
            }
            if (Mojo.utils.isNone(this._elementAssistForce)) {
                this._elementAssistForce = new Mojo.ui.Label();
                this.element().append(this._elementAssistForce.element());
            }
            if (Mojo.utils.isNone(data.defender.force) || Mojo.utils.isNone(data.defender.force.name)) {
                forceName = this._forceProfile.name;
            } else {
                forceName = data.defender.force.name;
            }
            this._elementAssistForce.element().addClass("forcewar-element-label forcewar-element-assistforce").find(".icon").html(Mojo.utils.locale("force", "forcewar_element_assistforce"));
            this._elementAssistForce.text(forceName);
        },
        _createElementExpireTime: function (data) {
            if (this._options.showExpireTime == false) {
                w.clearInterval(this._interval);
                return;
            }
            if (Mojo.utils.isNone(data.defender) || Mojo.utils.isNone(data.defender.force) || Mojo.utils.isNone(data.defender.force.expire)) {
                if (Mojo.utils.isNone(this._elementExpireTime) == false) {
                    this._elementExpireTime.hide();
                    this._elementExpireTime = undefined;
                    w.clearInterval(this._interval);
                }
                return;
            }
            this._expireTime = data.defender.force.expire;
            this._showExpire();
        },
        _createElementForce: function (data) {
            var self = this;
            if (this._options.showForce == false) {
                return;
            }
            var force = "";
            if (data.captured && data.captured.name) {
                if (data.captured.force_name != undefined) {
                    force = data.captured.force_name;
                } else {
                    force = self._forceProfile.name;
                }
            } else if (data.defender) {
                force = data.defender.force_name;
            } else {
                force = Mojo.utils.locale('force', 'none');
            }
            if (Mojo.utils.isNone(this._elementForce)) {
                this._elementForce = new Mojo.ui.Label();
                this.element().append(this._elementForce.element());
            }
            this._elementForce.element().addClass("forcewar-element-label forcewar-element-force").find(".icon").html(Mojo.utils.locale("force", "forcewar_element_force"));
            this._elementForce.text(force);
        },
        _createElementButton: function (data) {
            if (Mojo.utils.isNone(this._elementButton) == false) {
                return;
            }
            var self = this;
            if (self._options.showBtn == true || self._options.btnDisabled == false) {
                this._elementButton = new Mojo.ui.Button(undefined, {
                    text: self._options.btnText,
                    classes: self._options.isForceWarEnemy == false ? ['go-button'] : ['go-button enemy-btn'],
                    disabled: self._options.btnDisabled,
                    disableClick: function () {
                        if (self._options.disableClickCallback instanceof Function) {
                            self._options.disableClickCallback(self);
                        }
                    },
                    click: function () {
                        if (self._options.clickCallback instanceof Function) {
                            self._options.clickCallback(self);
                        }
                    },
                    special: self._options.btnSpecial,
                });
                if (self._options.btnAttackLimit != undefined && self._options.btnAttackLimit.rest == 0) {
                    this._elementButton.disable(true);
                }
                if (self._options.showNonRMBPlayerAssistBtn == true && (data.captured != undefined || data.defender != undefined)) {
                    this._nonRMBPlayAssistButton = new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('force', 'non_rmb_player_assist_attack'),
                        classes: ['go-button'],
                        click: function () {
                            if (self._options.nonRMBClickCallback instanceof Function) {
                                self._options.nonRMBClickCallback(self, 'decr');
                            }
                        },
                        special: "force-back-btn",
                    });
                    this._nonRMBPlayAssistButton.element().appendTo(this.element());
                    var overallContribute = undefined;
                    var individualContribute = undefined;
                    if (data.captured != undefined) {
                        overallContribute = data.captured.buff.total;
                        individualContribute = data.captured.buff.self;
                    } else if (data.defender != undefined) {
                        overallContribute = data.defender.buff.total;
                        individualContribute = data.defender.buff.self;
                    }
                    this._nonRMBPlayOverallContribute.html(Mojo.utils.locale('force', 'non_rmb_player_defense_data', {
                        percent: '-' + overallContribute
                    }));
                    this._nonRMBPlayOverallContribute.addClass("non-rmb-assist-attack-red");
                    if (individualContribute != undefined) {
                        this._nonRMBPlayIndividualContribute.html(Mojo.utils.locale('force', 'non_rmb_player_sub_defense', {
                            percent: individualContribute
                        }));
                    }
                }
            } else {
                this._elementButton = new Mojo.Object();
                this._elementButton.element().addClass('has-captured-tag').html(Mojo.utils.locale('force', 'forcewar_element_hascaptured'));
                if (self._options.showNonRMBPlayerAssistBtn == true && (data.captured != undefined || data.defender != undefined)) {
                    this._nonRMBPlayAssistButton = new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('force', 'non_rmb_player_assist_defense'),
                        classes: ['go-button'],
                        click: function () {
                            if (self._options.nonRMBClickCallback instanceof Function) {
                                self._options.nonRMBClickCallback(self, 'incr');
                            }
                        },
                        special: "force-back-btn",
                    });
                    this._nonRMBPlayAssistButton.element().appendTo(this.element());
                    var overallContribute = undefined;
                    var individualContribute = undefined;
                    if (data.captured != undefined) {
                        overallContribute = data.captured.buff.total;
                        individualContribute = data.captured.buff.self;
                    } else if (data.defender != undefined) {
                        overallContribute = data.defender.buff.total;
                        individualContribute = data.defender.buff.self;
                    }
                    this._nonRMBPlayOverallContribute.html(Mojo.utils.locale('force', 'non_rmb_player_defense_data', {
                        percent: '+' + overallContribute
                    }));
                    this._nonRMBPlayOverallContribute.addClass("non-rmb-assist-attack-green");
                    if (individualContribute != undefined) {
                        this._nonRMBPlayIndividualContribute.html(Mojo.utils.locale('force', 'non_rmb_player_add_defense', {
                            percent: individualContribute
                        }));
                    }
                }
            }
            this._elementButton.element().appendTo(this.element());
        },
        doClick: function () {
            var self = this;
            if (self._options.clickCallback instanceof Function) {
                self._options.clickCallback(self);
            }
        },
        _showExpire: function () {
            var self = this;
            if (self._expireTime == undefined || self._expireTime == 0) return;
            if (Mojo.utils.isNone(self._elementExpireTime)) {
                self._elementExpireTime = new Mojo.ui.Label();
                self.element().append(self._elementExpireTime.element());
            } else {
                w.clearInterval(self._interval);
            }
            self._elementExpireTime.element().addClass("forcewar-element-label forcewar-element-expiretime").find(".icon").html(Mojo.utils.locale("force", "forcewar_element_expiretime"));
            self._elementExpireTime.text(self._formatExpireTime(self._expireTime) + Mojo.utils.locale("force", "goaway"));
            self._interval = w.setInterval(function () {
                if (self._expireTime != undefined && self._expireTime > 1) {
                    self._expireTime--;
                    self._elementExpireTime.text(self._formatExpireTime(self._expireTime) + Mojo.utils.locale("force", "goaway"));
                } else {
                    self._expireTime = 0;
                    w.clearInterval(self._interval);
                    self._data.defender = undefined;
                    self.refresh(self._data);
                    var msg = self._forceProfile.owner.name + Mojo.utils.locale('force', 'expiretime_coming_message');
                    (new Mojo.com.HandleDialog({
                        title: Mojo.utils.locale('force', 'expiretime_coming'),
                        message: msg,
                        btn1: Mojo.utils.locale('force', 'forcewar_defense'),
                        handle1: function () {
                            Mojo.app.redirect('/force', {
                                index: 2,
                                refresh: 1,
                                selected: 1
                            });
                        },
                        close: function () {
                            if (self._options.resizeDefence instanceof Function) {
                                self._options.resizeDefence();
                            }
                        },
                    })).open(true);
                }
            }, 1000);
        },
        _formatExpireTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceSearch = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceSearch";
        },
        init: function (id, options) {
            this._super(id, options);
            this.element().addClass('mojo-com-forcesearch');
            this.forcePanel = undefined;
            this.forceSearchArea = undefined;
            this.forceList = undefined;
            this._params = {
                type_id: '1',
                order_id: '1'
            };
            this._addTabs();
            this._addButton();
        },
        _addTabs: function () {
            var self = this;
            this._panels = [{
                type: 'ranking',
                label: 'ranking'
            }, ];
            this._tabs = new Mojo.ui.Tabs('tabs-ranking', {
                selectionChange: function (i) {
                    self._createList(i);
                },
                selected: 0
            });
            $.each(this._panels, function (i, p) {
                self._tabs.addTab(self._options.tabText);
            });
            this.element().append(this._tabs.element());
            this._tabs.element().find('.panel').addClass('box-outter');
            self._createList(0);
        },
        _createList: function (index) {
            var self = this;
            self._refreshFilter();
            var p = this._panels[index];
            if (p.list == undefined || p.list == null) {
                var defaultForceListOptions = {
                    type: 'battle',
                    showBtn: true,
                    onBtnClick: self._viewBtnClick,
                    alwaysMore: true,
                    refreshable: true,
                    showMore: true,
                    moreLabel: '',
                    params: self._params,
                };
                if (Mojo.utils.isNone(this._options.forceListOptions) == false) {
                    $.extend(defaultForceListOptions, this._options.forceListOptions);
                    this._options.forceListOptions.listData = undefined;
                }
                p.list = new Mojo.com.ForceList("force-list", defaultForceListOptions);
                this._tabs.setPanel(index, p.list);
            }
            if (this._options.showSearch == true) {
                self._addSearch();
            }
            if (this._options.showHeader == true) {
                self._addHeader();
            }
        },
        _refreshFilter: function () {
            var filter = Mojo.cache.get(this._options.filterName);
            if (filter != undefined) {
                for (var p in filter) {
                    this._params[p] = filter[p];
                }
            }
        },
        _addSearch: function () {
            var self = this;
            var p = self._panels[0];
            this.search = new Mojo.com.ForceFind(undefined, {
                url: self._options.forceSearchUrl,
                param: self._options.forceSearchParams,
                onSearch: function (data, searchVal) {
                    self._refreshList(data, searchVal);
                },
                noinput: function () {
                    self._panels[0].list.element().remove();
                    self._panels[0].list = undefined;
                    self._createList(0);
                    return false;
                }
            }).element().appendTo(p.list._header);
        },
        _addHeader: function () {
            this._header = new Mojo.ui.Label(undefined, {
                text: this._options.headerContent,
                classes: ['member-count'],
            });
            if (this._options.showHeader) {
                this._header.element().appendTo(this._panels[0].list._header);
            }
            this._options.addHeaderCallback(this._header);
        },
        _refreshList: function (response, searchVal) {
            var forcelist = this._panels[0].list;
            forcelist._scroll.scrollTo(0, 0);
            forcelist._list.find('.mojo-ui-listpanel-child').remove();
            forcelist._options.alwaysMore = false;
            forcelist._children = [];
            forcelist._options.emptyLabel = Mojo.utils.locale('force', 'force_search_noresult');
            if (response.data && response.data.list) {
                forcelist._options.type = 'search';
                forcelist._more.element().html(Mojo.utils.locale('common', 'more')).hide();
                if (response.data.list.length >= forcelist._options.pageSize) {
                    forcelist._options.alwaysMore = true;
                    forcelist._options.showMore = true;
                    forcelist._options.refreshable = false;
                    forcelist._options.forceSearchByLevelParams = {
                        'search': searchVal,
                        'excludes': Mojo.page.Force.getController().getForceProfile().id
                    };
                    forcelist.appendData(response.data.list, true);
                } else {
                    forcelist._options.alwaysMore = false;
                    forcelist._options.showMore = false;
                    forcelist._options.refreshable = true;
                    forcelist.appendData(response.data.list, false);
                }
            } else {
                forcelist.appendData(response.data, false);
            }
        },
        _viewBtnClick: function (data) {
            new Mojo.com.ForceInfoDialog(data, {}, {
                showApplyBtn: false
            }).open();
        },
        _addButton: function () {
            var self = this;
            if (self._options.showOrderBtn == true) {
                this.orderBtn = new Mojo.ui.Button('order-btn', {
                    classes: ['order_btn'],
                    text: Mojo.utils.locale('force', 'order_force'),
                    click: function () {
                        var forceFilterDialog = new Mojo.com.ForceFilterDialog({
                            typeId: self._params.type_id,
                            type: self._params.type,
                            orderId: self._params.order_id,
                            filterUrl: self._options.filterUrl,
                            filterDataSource: self._options.filterDataSource,
                            callback: function (tid, oid) {
                                if (self._params.type_id == tid && self._params.order_id == oid)
                                    return;
                                self._params.type_id = tid;
                                self._params.order_id = oid;
                                self._panels[0].list._options.params = self._params;
                                Mojo.cache.set(self._options.filterName, {
                                    type_id: tid,
                                    order_id: oid
                                });
                                $.each(self._panels[0].list.children(), function (i, child) {
                                    child.element().remove();
                                });
                                self._panels[0].list._hasLoaded = false;
                                self._panels[0].list._children = [];
                                self._panels[0].list._load(self._params);
                            }
                        });
                        forceFilterDialog.open();
                    },
                });
                this.orderBtn.element().appendTo(this.element());
            }
            this._backBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'back'),
                click: function () {
                    if (self._options.backCallback instanceof Function) {
                        self._options.backCallback(self);
                    }
                },
                classes: ['force-back-btn'],
            });
            this._backBtn.element().appendTo(this.element());
        },
        _getDefaultOptions: function () {
            return {
                showSearch: true,
                showHeader: false,
                tabText: Mojo.utils.locale('force', 'force'),
                backCallback: $.noop,
                forceListOptions: undefined,
            };
        },
        localeCat: function () {
            return 'force';
        },
    });
})(window, jQuery);;;
(function (w, $) {
    w.Mojo = w.Mojo || {};
    w.Mojo.page = w.Mojo.page || {};
    w.Mojo.com.ForceFind = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceFind";
        },
        init: function (id, options) {
            this._super(id, options);
            this.element().addClass('search-area');
            this._search = $("<div class='search-input'></div>");
            this._search.appendTo(this.element());
            this._addContent();
            this._addButton();
        },
        _addContent: function () {
            var self = this;
            this._input = $('<input  type="text" maxlength="10" />').val(Mojo.utils.locale('common', 'search_force_hint')).appendTo(this._search);
            this._input.click(function () {
                if (self._input.val() == Mojo.utils.locale('common', 'search_force_hint')) {
                    self._input.val("");
                } else {
                    this.selectionStart = 0;
                    this.selectionEnd = this.value.length;
                }
            });
        },
        _addButton: function () {
            var self = this;
            new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'search'),
                special: 'force-search-btn',
                click: function () {
                    self._doSearch();
                }
            }).element().appendTo(self.element());
        },
        _doSearch: function () {
            var self = this;
            window.scrollTo(0, 0);
            if (this._input.val() == Mojo.utils.locale('common', 'search_force_hint'))
                this._input.val('');
            if (Mojo.utils.isNone(this._input.val())) {
                if (self._options.noinput() == false) {
                    return;
                }
            }
            var param = $.extend(true, self._options.param, {
                search: this._input.val(),
                with_ranking: self._options.with_ranking
            });
            Mojo.ajax(self._options.url, param, function (response) {
                self._options.onSearch(response, self._input.val());
            }, function () {});
        },
        _getDefaultOptions: function () {
            return {
                onSearch: $.noop,
                url: '/force/search',
                param: {},
                with_ranking: 0,
                noinput: function () {
                    return false;
                }
            };
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceWarPreviewDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceWarPreviewDialog";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-forcewarpreviewdlg');
            this._addContent();
            this._addHandleButtons();
        },
        setPlayerName: function (name) {
            if (name == undefined) {
                name = this._options.attackerName;
            }
            this.element().find(".player_name").html(name);
        },
        setOpponentName: function (name) {
            if (name == undefined) {
                name = this._options.defenderName;
            }
            this.element().find(".opp_name").html(name);
        },
        setWinContents: function (winContents) {
            if (winContents == undefined) {
                winContents = this._options.winContents;
            }
            if (Mojo.utils.isNone(winContents) == false) {
                var ifwin = this.element().find(".ifwin");
                ifwin.find(".win-content").remove();
                if (!($.isArray(winContents))) {
                    winContents = [winContents];
                }
                for (var index in winContents) {
                    var winContent = winContents[index];
                    if (winContent.element instanceof Function) {
                        winContent = winContent.element();
                    }
                    winContent.addClass("win-content");
                    ifwin.append(winContent);
                }
            }
        },
        setLoseContents: function (loseContents) {
            if (loseContents == undefined) {
                loseContents = this._options.loseContents;
            }
            if (Mojo.utils.isNone(loseContents) == false) {
                var iflose = this.element().find(".iflose");
                iflose.find(".lose-content").remove();
                if (!($.isArray(loseContents))) {
                    loseContents = [loseContents];
                }
                for (var index in loseContents) {
                    var loseContent = loseContents[index];
                    if (loseContent.element instanceof Function) {
                        loseContent = loseContent.element();
                    }
                    loseContent.addClass("lose-content");
                    iflose.append(loseContent);
                }
            }
        },
        setTips: function (tips) {
            if (Mojo.utils.isNone(tips) == false) {
                this.element().find(".paragraph").html(tips + "<br>" + this._options.tips);
            }
        },
        _addContent: function () {
            var self = this;
            var _name = $('<div class="name"></div>').appendTo(this._content);
            var _player = $('<div class="player"></div>').appendTo(_name);
            $('<div class="player_icon"></div>').appendTo(_player);
            var _playerName = $('<div class="player_name"></div>').html(self._options.attackerName).appendTo(_player);
            var _vs = $('<div class="vs"></div>').html('VS').appendTo(_name);
            var _opp = $('<div class="opp"></div>').appendTo(_name);
            $('<div class="opp_icon"></div>').appendTo(_opp);
            var _oppName = $('<div class="opp_name"></div>').html(self._options.defenderName).appendTo(_opp);
            var _ifwin = $('<div class="ifwin"></div>').appendTo(this._content);
            var _win = $('<div class="win"></div>').html(Mojo.utils.locale('common', 'when win')).appendTo(_ifwin);
            if (Mojo.utils.isNone(self._options.winContents) == false) {
                if (!($.isArray(self._options.winContents))) {
                    self._options.winContents = [self._options.winContents];
                }
                for (var index in self._options.winContents) {
                    var winContent = self._options.winContents[index];
                    if (winContent.element instanceof Function) {
                        winContent = winContent.element();
                    }
                    winContent.addClass("win-content");
                    _ifwin.append(winContent);
                }
            }
            var _iflose = $('<div class="iflose"></div>').appendTo(this._content);
            var _lose = $('<div class="lose"></div>').html(Mojo.utils.locale('common', 'when lose')).appendTo(_iflose);
            if (Mojo.utils.isNone(self._options.loseContents) == false) {
                if (!($.isArray(self._options.loseContents))) {
                    self._options.loseContents = [self._options.loseContents];
                }
                for (var index in self._options.loseContents) {
                    var loseContent = self._options.loseContents[index];
                    if (loseContent.element instanceof Function) {
                        loseContent = loseContent.element();
                    }
                    loseContent.addClass("lose-content");
                    _iflose.append(loseContent);
                }
            }
            if (this._options.showtip == undefined) {
                $("<div class='paragraph'></div>").html(self._options.tips).appendTo(this._content);
            }
        },
        _addHandleButtons: function () {
            var self = this;
            var _attackBtn = new Mojo.ui.Button('attack-btn', {
                special: 'button-big-red',
                text: self._options.attackBtnText,
                click: function () {
                    if (self._options.actionCallback instanceof Function) {
                        self._options.actionCallback(self);
                    }
                },
            });
            this._footer.append(_attackBtn.element());
            this._footer.append((new Mojo.ui.Button('close-btn', {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                    if (self._options.closeCallback instanceof Function) {
                        self._options.closeCallback(self);
                    }
                },
            })).element());
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                attackBtnText: Mojo.utils.locale('force', 'forcewar_action'),
                title: Mojo.utils.locale('force', 'forcewar_preview'),
                tips: Mojo.utils.locale('force', 'force_war_tip'),
                attackerName: "",
                defenderName: "",
                winContents: undefined,
                loseContents: undefined,
                closeCallback: $.noop,
                actionCallback: $.noop
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceElement = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceElement";
        },
        init: function (data, options) {
            this._data = data;
            if (options.showChooseButton) {
                this._super('entity-' + data.id, options);
            } else {
                this._super(undefined, options);
            }
            this.element().addClass('mojo-com-forceelement').addClass('box-inner');
            this._addContent();
        },
        _addContent: function () {
            var self = this;
            var forceTypeName = undefined;
            switch (parseInt(this._data.type, 10)) {
            case 1:
                forceTypeName = Mojo.utils.locale('force', 'force_free');
                break;
            case 2:
                forceTypeName = Mojo.utils.locale('force', 'force_alliance');
                break;
            case 3:
                forceTypeName = Mojo.utils.locale('force', 'force_slave');
                break;
            case 4:
                forceTypeName = Mojo.utils.locale('force', 'force_master');
                break;
            }
            var elementTitle = $('<div class="element-title"></div>');
            $('<div class="level"></div>').appendTo(elementTitle).html(Mojo.utils.locale('force', 'levelinfo', {
                level: this._data.level
            }));
            $('<div class="forcetype"></div>').appendTo(elementTitle).html(forceTypeName);
            $('<div class="name"></div>').appendTo(elementTitle).html(this._data.name);
            elementTitle.appendTo(this.element());
            if (this._options.type == 'rand') {
                if (this._data.auto_agree_apply == 1) {
                    $('<div class="entry_directly"></div>').appendTo(elementTitle).html(Mojo.utils.locale('force', 'force_entry_without_permission2'));
                }
            }
            if (this._options.showRank) {
                $('<div class="rank"></div>').appendTo(this.element()).html(Mojo.utils.locale('force', 'order', {
                    order: this._data.order ? this._data.order : '?'
                }));
            }
            if (this._options.type == 'forceinfo') {
                if (this._data.rank != undefined) {
                    $('<div class="rank"></div>').appendTo(this.element()).html(Mojo.utils.locale('force', 'order', {
                        order: this._data.rank
                    }));
                }
            }
            $('<div class="force-id"></div>').appendTo(this.element()).html(Mojo.utils.locale('force', 'force_id') + this._data.id);
            if (!this._options.showGetTaxedGrainContent) {
                this.element().append(new Mojo.com.PlayerName(this._data.title_info ? this._data.title_info : {
                    player_name: this._data.owner_name
                }, {
                    title: true
                }).element());
                if (!this._options.notShowForceMember) {
                    $('<div class="member"></div>').appendTo(this.element()).html(Mojo.utils.locale('force', 'member_count1', {
                        now: this._data.member_num,
                        max: this._data.member_num_limit
                    }));
                }
            } else {
                var accumulated_grain = $('<div class="accumulated-grain"></div>').appendTo(this.element()).html('<div class="accumulated-grain-content">' + Mojo.utils.locale('relation', 'accumulated_grain') + '</div>');
                var gcLabel = new Mojo.ui.Label(undefined, {
                    text: self._data.tax_buffer,
                    classes: ['fgrain'],
                });
                gcLabel.element().appendTo(accumulated_grain);
                var available_grain = $('<div class="available-grain"></div>').appendTo(this.element()).html('<div class="available-grain-content">' + Mojo.utils.locale('relation', 'available_grain') + '</div>');
                var gcLabel2 = new Mojo.ui.Label(undefined, {
                    text: self._data.tax_ready,
                    classes: ['fgrain'],
                });
                gcLabel2.element().appendTo(available_grain);
            }
            if (this._options.type == 'relation') {
                if (this._data.type == 3 && !this._options.showGetTaxedGrainContent) {
                    this._freeRelation = $('<div class="ration"></div>').appendTo(this.element()).html(Mojo.utils.locale('relation', 'donate_and_taxed_ration') + this._data.donate_and_taxed_ration + '/' + this._data.tax_to_free);
                    if (parseInt(this._data.donate_and_taxed_ration) >= parseInt(this._data.tax_to_free)) {
                        this._freeRelation.addClass('text-red');
                    }
                    if (this._options.notShowForceMember) {
                        $('<div class="accumulated_grain"></div>').appendTo(this.element()).html(Mojo.utils.locale('relation', 'accumulated_grain') + this._data.tax_buffer);
                    }
                    $('<div class="rate"></div>').appendTo(this.element()).html(Mojo.utils.locale('relation', 'taxed_rate', {
                        rate: this._data.tax_ratio
                    }));
                } else if (this._data.type == 2) {} else if (this._options.showGetTaxedGrainContent) {
                    $('<div class="rate"></div>').appendTo(this.element()).html(Mojo.utils.locale('relation', 'taxed_rate', {
                        rate: this._data.tax_ratio
                    }));
                }
                if (this._options.showBattleStatusAndAssistBtn && this._data.battle_status == 1) {
                    var btn = new Mojo.ui.Button(undefined, {
                        text: self._options.assistButtonText,
                        classes: ['go-button'],
                        special: self._options.specialClass,
                        click: function () {
                            self._options.onBtnClick(self._data);
                        },
                    });
                    var battleStatus = $("<div></div>");
                    battleStatus.addClass('battleStatus');
                    btn.element().append(battleStatus);
                    this.element().append(btn.element());
                }
                if (this._options.addGetTaxedButton) {
                    var btn = this._options.addGetTaxedButton(self._data);
                    this.element().append(btn.element());
                }
            }
            if (this._options.type == 'election') {
                if (this._data.type == 4) {
                    $('<div class="member"></div>').appendTo(this.element()).html(Mojo.utils.locale('relation', 'slave_count', {
                        now: this._data.master_slave_num,
                        max: this._data.master_slave_num_limit
                    }));
                } else if (this._data.type == 2) {
                    $('<div class="member"></div>').appendTo(this.element()).html(Mojo.utils.locale('relation', 'alliance_count', {
                        now: this._data.alliance_friend_num,
                        max: this._data.alliance_friend_num_limit
                    }));
                }
                if ((this._data.type == 4 || this._data.type == 2) && this._data.id != this._options.forceId) {
                    var btn = new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('relation', 'conmmunication'),
                        classes: ['go-button'],
                        special: self._options.specialClass,
                        click: function () {
                            self._options.onBtnClick(self._data);
                        },
                    });
                    this.element().append(btn.element());
                }
            }
            if (this._options.inDefence instanceof Function) {
                if (this._options.inDefence(self._data)) {
                    $('<div class="inWar">' + this._options.inWarTxt + '</div>').appendTo(this.element());
                }
            }
            if (this._options.showBtn) {
                if (this._data.is_protected && this._data.is_protected == 1 && this._options.searchType != 'createForce') {
                    this._forceProtected = $('<div class="in-force-protected">' + Mojo.utils.locale("force", "in_force_protected") + '</div>').appendTo(this.element());
                } else if (this._options.showForceRest && this._data.is_avoiding != undefined && parseInt(this._data.is_avoiding) == 1) {
                    this._avoidWarStatus = $('<div class="in-force-rest">' + Mojo.utils.locale("force", "in_force_rest") + '</div>').appendTo(this.element());
                } else {
                    var btn = new Mojo.ui.Button(undefined, {
                        text: self._options.btnText,
                        classes: ['go-button'],
                        special: self._options.specialClass,
                        click: function () {
                            if (!self._options._isDiplomacy && self._options.typeOfbattle) {
                                var force_profile = Mojo.page.Force == undefined ? undefined : Mojo.page.Force.getController().getForceProfile();
                                if (false && force_profile && parseInt(force_profile.protect_status) == 1) {
                                    (new Mojo.com.CommonDialog(undefined, {
                                        title: Mojo.utils.locale("force", "force_protected_tips"),
                                        content: '<div class = "paragraph">' + Mojo.utils.locale("force", "force_" + self._options.typeOfbattle + "_content") + '</div>',
                                        leftBtnText: Mojo.utils.locale("force", self._options.typeOfbattle),
                                        leftBtnClick: function (that) {
                                            that.close();
                                            self._options.onBtnClick(self._data);
                                        },
                                        rightBtnText: Mojo.utils.locale("common", "cancel"),
                                        rightBtnClick: function (that) {
                                            that.close();
                                        },
                                    })).open();
                                } else {
                                    self._options.onBtnClick(self._data);
                                }
                            } else {
                                self._options.onBtnClick(self._data);
                            }
                        },
                    });
                    this.element().append(btn.element());
                }
            }
            if (this._options.showChooseButton) {
                this._chooseButton = new Mojo.ui.Button(undefined, {
                    text: '',
                    click: function (e) {
                        self._options.chooseClick(self._data);
                    },
                });
                this._chooseButton.element().addClass('choose-button').addClass('combo').appendTo(this.element());
            }
            if (this._options.showUniteRebelStatus) {
                var msg = '';
                if (this._data.role == 1) {
                    msg = Mojo.utils.locale('relation', 'slave_unite_rebel_responsed');
                } else if (this._data.role == 5) {
                    msg = Mojo.utils.locale('relation', 'slave_unite_rebel_waiting');
                } else if (this._data.role == 6) {
                    msg = Mojo.utils.locale('relation', 'slave_unite_rebel_denied');
                }
                $('<div class="unite-rebel-status-tag"></div>').appendTo(this.element()).html(msg);
            }
            if (parseInt(this._data.type, 10) == 4 && this._data.slave_num != undefined && this._data.max_slave != undefined) {
                $('<div class="slavernum"></div>').appendTo(this.element()).html(Mojo.utils.locale('force', 'master_slave_num', {
                    slavenum: this._data.slave_num,
                    maxslavenum: this._data.max_slave
                }));
            }
        },
        _getDefaultOptions: function () {
            return {
                showSlaverExpire: false,
                showRank: false,
                showBtn: false,
                btnText: '',
                specialClass: 'go-view-btn',
                onBtnClick: $.noop
            };
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceInfoDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceInfoDialog";
        },
        init: function (data, userinfo, options) {
            this._super("mojo-com-forceinfodlg", options);
            this._force = data;
            this._user = userinfo;
            this.element().addClass('mojo-com-forceinfodlg');
            this._paragraph = $("<div class='paragraph'></div>").appendTo(this._content);
            this._addContent();
            this._addButtons();
            this._refresh();
        },
        _addContent: function () {
            var name = $("<div class='name'></div>");
            name.html(this._force.name);
            name.appendTo(this._paragraph);
            var level = $("<div class='level'></div>");
            this._addItem(level, Mojo.utils.locale('force', 'info_level'), this._force.level);
            level.appendTo(this._paragraph);
            var owner = $("<div class='owner'></div>");
            this._addItem(owner, Mojo.utils.locale('force', 'info_owner'), this._force.owner_name);
            owner.appendTo(this._paragraph);
            var member = $("<div class='member'></div>");
            this._addItem(member, Mojo.utils.locale('force', 'info_member1'), this._force.member_num + '/' + this._force.member_num_limit);
            member.appendTo(this._paragraph);
            var board = $("<div class='board'></div>");
            $("<div class='h'></div>").appendTo(board).html(Mojo.utils.locale('force', 'info_board'));
            var notice = $("<div class='v'></div>").html(this._force.notice);
            board.append(notice);
            var self = this;
            board.appendTo(this._paragraph);
            if (Mojo.utils.isNone(self._user.partners) == true) {
                this._entryDirectlyForce = $("<div class='force_entry_directly'></div>");
                this._entryDirectlyForce.appendTo(this._content);
                return;
            }
            var its_relation = undefined;
            switch (parseInt(this._force.type)) {
            case 1:
                break;
            case 2:
                its_relation = Mojo.utils.locale('force', 'its_alliance');
                break;
            case 3:
                its_relation = Mojo.utils.locale('force', 'its_master');
                break;
            case 4:
                its_relation = Mojo.utils.locale('force', 'its_slave');
                break;
            }
            this._list = new Mojo.com.ForceList("force-list", {
                type: 'forceinfo',
                showBtn: false,
                refreshable: true,
                pageSize: 3,
                scrollable: true,
                ids: this.data.str_data,
                loadFunc: function (start, count, orderParams) {
                    setTimeout(function () {
                        self._list.appendData(self._user.partners);
                    }, 0);
                },
            });
            this._paragraph.append($("<div class=''></div>").html(its_relation));
            this._paragraph.prependTo(this._list._list);
            this.element().addClass('special-dlg');
            this._list.element().appendTo(this._content);
            this._entryDirectlyForce = $("<div class='force_entry_directly'></div>");
            this._entryDirectlyForce.appendTo(this._content);
        },
        _addButtons: function () {
            var self = this;
            var btnCount = 0;
            if (this._options.showApplyBtn) {
                this.applyBtn = new Mojo.ui.Button('apply-btn', {
                    text: Mojo.utils.locale('force', 'join_apply'),
                    special: 'button-big-red',
                    click: function () {
                        if (self._user.code == 3) {
                            self._doEntryForceDirectly();
                        } else {
                            self._applyForce();
                        }
                    },
                    disableClick: function () {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'force_appling'));
                    }
                });
                self.applyBtn.element().appendTo(this._footer);
                if (self._force.member_num == self._force.member_num_limit) {
                    self.applyBtn.disable(true);
                    self.applyBtn._options.disableClick = function () {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'member_full'));
                    };
                }
                btnCount += 1;
            }
            if (0 == btnCount && this._options.leftBtnText) {
                (new Mojo.ui.Button(undefined, {
                    text: self._options.leftBtnText,
                    disabled: self._options.leftBtnDisabled,
                    special: 'button-big-red',
                    click: function () {
                        if (self._options.leftBtnClick instanceof Function) {
                            self._options.leftBtnClick(self);
                        }
                    },
                    disableClick: function () {
                        if (self._options.leftBtnDisabledClick instanceof Function) {
                            self._options.leftBtnDisabledClick(self);
                        }
                    }
                })).element().appendTo(this._footer);
                btnCount += 1;
            }
            if (this._options.rightBtnText) {
                (new Mojo.ui.Button(undefined, {
                    text: self._options.rightBtnText,
                    disabled: self._options.rightBtnDisabled,
                    click: function () {
                        if (self._options.rightBtnClick instanceof Function) {
                            self._options.rightBtnClick(self);
                        }
                    },
                    disableClick: function () {
                        if (self._options.rightBtnDisabledClick instanceof Function) {
                            self._options.rightBtnDisabledClick(self);
                        }
                    }
                })).element().appendTo(this._footer);
                btnCount += 1;
            }
            if (true === this._options.showCloseBtn && btnCount < 2) {
                this.closeBtn = new Mojo.ui.Button('close-btn', {
                    text: Mojo.utils.locale('ui', 'Close'),
                    click: function () {
                        self.close();
                    },
                });
                this.closeBtn.element().appendTo(this._footer);
                btnCount += 1;
            }
        },
        _doEntryForceDirectly: function () {
            var self = this;
            var param = {
                force_id: self._force.id,
                autoAgreeApply: 1
            };
            for (var p in self._options.extraParam) {
                param[p] = self._options.extraParam[p];
            }
            Mojo.ajax('/force/apply', param, function (response) {
                self.close();
                if (response.errorCode == 0) {
                    var dlg = new Mojo.ui.Dialog(undefined, {
                        title: response.data.success ? Mojo.utils.locale('force', 'force_entry_without_permission_title1') : Mojo.utils.locale('force', 'force_entry_without_permission_title2'),
                        content: $('<div class="tip"></div>').html(response.data.message)
                    });
                    if (response.data.success) {
                        new Mojo.ui.Button(undefined, {
                            text: Mojo.utils.locale('force', 'force_entry_without_permission_btn'),
                            click: function () {
                                Mojo.app.redirect('/force');
                            }
                        }).element().appendTo(dlg._footer);
                        new Mojo.ui.Button(undefined, {
                            text: Mojo.utils.locale('common', 'close'),
                            click: function () {
                                dlg.close();
                            }
                        }).element().appendTo(dlg._footer);
                    } else {
                        new Mojo.ui.Button(undefined, {
                            text: Mojo.utils.locale('common', 'ok'),
                            click: function () {
                                dlg.close();
                            }
                        }).element().appendTo(dlg._footer);
                    }
                    dlg.open();
                } else {
                    var failDlg = new Mojo.ui.Dialog(undefined, {
                        title: Mojo.utils.locale('force', 'force_apply_fail', {
                            '__default__': '申请失败'
                        }),
                        content: $('<div class="tip"></div>').html(response.errorMsg)
                    });
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'close'),
                        click: function () {
                            failDlg.close();
                        }
                    }).element().appendTo(failDlg._footer);
                    failDlg.open();
                }
            }, function () {}, {
                showWait: true
            });
        },
        _doApplyForce: function (value) {
            var self = this;
            var param = {
                force_id: self._force.id,
                message: value
            };
            for (var p in self._options.extraParam) {
                param[p] = self._options.extraParam[p];
            }
            Mojo.ajax('/force/apply', param, function (response) {
                self._dialog.close();
                if (response.errorCode == 0) {
                    Mojo.track.onEvent('24_401');
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'send_already'));
                    self._options.callback();
                } else {
                    var failDlg = new Mojo.ui.Dialog(undefined, {
                        title: Mojo.utils.locale('force', 'force_apply_fail', {
                            '__default__': '申请失败'
                        }),
                        content: $('<div class="tip"></div>').html(response.errorMsg)
                    });
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'close'),
                        click: function () {
                            failDlg.close();
                        }
                    }).element().appendTo(failDlg._footer);
                    failDlg.open();
                }
            }, function () {});
        },
        _doPreviewApplyForce: function () {
            var self = this;
            var param = {
                force_id: self._force.id,
                preview: 1
            };
            Mojo.ajax('/force/apply', param, function (response) {
                if (response.errorCode == 0) {
                    self._dialog = new Mojo.com.MsgInputDialog({
                        title: Mojo.utils.locale('force', 'join_apply_force'),
                        defaultText: Mojo.utils.locale('force', 'join_slogen'),
                        maxlen: 100,
                        leftBtnText: Mojo.utils.locale('force', 'send_apply'),
                        leftBtnClick: function (value) {
                            self._doApplyForce(value);
                        }
                    });
                    self._dialog.open();
                } else {
                    var failDlg = new Mojo.ui.Dialog(undefined, {
                        title: Mojo.utils.locale('force', 'force_apply_fail', {
                            '__default__': '申请失败'
                        }),
                        content: $('<div class="tip"></div>').html(response.errorMsg)
                    });
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'close'),
                        click: function () {
                            failDlg.close();
                        }
                    }).element().appendTo(failDlg._footer);
                    failDlg.open();
                }
            }, function () {});
        },
        _applyForce: function () {
            var self = this;
            self.close();
            if (self._options.eventStatus != undefined) {
                self._options.applyClickEvent();
            }
            self._doPreviewApplyForce();
        },
        _addItem: function (ele, name, value) {
            $("<div class='h'></div>").appendTo(ele).html(name);
            $("<div class='v'></div>").appendTo(ele).html(value);
        },
        _refresh: function () {
            var self = this;
            if (self._options.showApplyBtn == false) {
                return;
            }
            if (self._user.code == 2) {
                self.applyBtn.disable(true);
                self.applyBtn._options.disableClick = function () {
                    self.close();
                    var infoDlg = new Mojo.ui.Dialog(undefined, {
                        title: Mojo.utils.locale('common', 'tips'),
                        content: $('<div class="paragraph"></div>').html(Mojo.utils.locale('force', 'already_join_tip', {
                            name: self._user.message
                        }))
                    });
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'ok'),
                        click: function () {
                            Mojo.app.redirect('/force');
                        }
                    }).element().appendTo(infoDlg._footer);
                    infoDlg.open();
                };
            } else if (self._user.code == 3) {
                this._entryDirectlyForce.html(Mojo.utils.locale('force', 'force_entry_without_permission', {
                    time: self._formatTime(self._user.forceOwnerLastLoginTime)
                }));
            }
        },
        _formatTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('force', 'info'),
                showApplyBtn: true,
                showCloseBtn: true,
                dlgType: 0,
                zIndex: 1101,
                confirmClick: $.noop,
                extraParam: {},
                callback: $.noop,
                eventStatus: undefined,
                applyClickEvent: $.noop,
                leftBtnText: undefined,
                leftBtnDisabled: false,
                leftBtnClick: undefined,
                leftBtnDisabledClick: undefined,
                rightBtnText: undefined,
                rightBtnDisabled: false,
                rightBtnClick: undefined,
                rightBtnDisabledClick: undefined
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceList = w.Mojo.ui.ListPanel.extend({
        clsname: function () {
            return "com.ForceList";
        },
        init: function (id, options) {
            this._super(id, options);
            this._isDiplomacy = options.type == 'diplomacy';
            this.element().addClass('mojo-com-forcelist');
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                type: 'rand',
                targetForceId: undefined,
                loadFunc: function (start, count, orderParams) {
                    self._options.renderDatacallback();
                    self._retrieveForces(start, count, orderParams);
                },
                drawFunc: function (data) {
                    return self._drawForce(data);
                },
                showMore: false,
                moreLabel: '',
                pageSize: 10,
                scrollable: true,
                emptyLabel: Mojo.utils.locale('force', 'force_empty'),
                showBtn: true,
                btnText: Mojo.utils.locale('common', 'view'),
                onBtnClick: $.noop,
                renderDatacallback: $.noop,
                afterDataRender: $.noop
            });
        },
        _retrieveForces: function (start, count, orderParams) {
            var self = this;
            var url = undefined;
            var params = {
                start: start,
                count: count
            };
            if (self._options.type == 'rand') {
                url = '/force/forceListForJoin';
            } else if (self._options.type == 'rank') {
                if (self._options.forceData == undefined || parseInt(start) > 0) {
                    url = '/force/ranking';
                }
                if (start + count > 100) {
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'force_list_limit'));
                    self._renderData([]);
                    self._more.hide();
                    self.resize();
                    return;
                }
            } else if (self._options.type == 'battle') {
                url = '/force/battleTargets';
                if (this._options.targetForceId) {
                    params["targetForceId"] = this._options.targetForceId;
                }
            } else if (self._options.type == 'relation') {
                if (this._options.masterForceId) {
                    params["master_force_id"] = this._options.masterForceId;
                    url = '/relation/slavelist';
                }
                if (this._options.slaveForceId) {
                    params["slave_force_id"] = this._options.slaveForceId;
                    url = '/relation/siblingList';
                }
                if (this._options.allianceForceId) {
                    params["alliance_force_id"] = this._options.allianceForceId;
                    url = '/relation/allianceList';
                }
                if (this._options.uniteRebelSlaveForceId) {
                    url = '/forceCrazy/battleResistUnionPartners';
                }
                if (this._options.showGetTaxedGrainContent) {
                    url = '/relation/collectList';
                }
                if (this._options.targetForceId) {
                    params["target_force_id"] = this._options.targetForceId;
                }
                if (this._options.showChooseButton) {
                    params["excludes"] = this._options.targetForceId;
                    params["target_force_id"] = undefined;
                }
                params = $.extend(true, params, self._options.params);
                if (orderParams != undefined && orderParams.typeId != undefined && orderParams.orderId != undefined) {
                    params["type_id"] = orderParams.type_id;
                    params["order_id"] = orderParams.order_id;
                }
            } else if (self._options.type == 'allyableforce') {
                url = '/forceCrazy/forceList';
                params["for"] = 'alliance';
                if (this._options.targetForceId) {
                    params["excludes"] = this._options.targetForceId;
                }
                params = $.extend(true, params, self._options.params);
            } else if (self._options.type == 'election') {
                url = '/relation/electorList';
                if (this._options.electionForceId) {
                    params["election_force_id"] = this._options.electionForceId;
                }
                if (this._options.electionId) {
                    params["election_id"] = this._options.electionId;
                }
                if (this._options.targetForceId) {
                    params["target_force_id"] = this._options.targetForceId;
                }
                params = $.extend(true, params, self._options.params);
                if (orderParams != undefined && orderParams.typeId != undefined && orderParams.orderId != undefined) {
                    params["type_id"] = orderParams.type_id;
                    params["order_id"] = orderParams.order_id;
                }
            } else if (self._options.type == 'forceinfo') {
                url = '/forceCrazy/forceInfo';
                if (this._options.ids) {
                    params["ids"] = this._options.ids;
                }
            } else if (self._options.type == 'crazyforce') {
                if (self._options.listData) {
                    url = undefined;
                    setTimeout(function () {
                        self._renderData(self._options.listData);
                        self._options.listData = undefined;
                    }, 0);
                } else {
                    url = '/forceCrazy/forceList';
                    params['for'] = self._options.purpose;
                }
            } else if (self._options.type == 'search') {
                url = '/force/search';
                $.extend(true, params, self._options.forceSearchByLevelParams);
            } else if (self._options.type == 'diplomacy') {
                setTimeout(function () {
                    self._list.empty();
                    var diplomacyTip = new Mojo.Object();
                    diplomacyTip.element().addClass("force-search-diplomacy-tip").html(Mojo.utils.locale('force', 'diplomacy_tip'));
                    self._addChild(diplomacyTip);
                    self.resize();
                }, 100);
            }
            if (url != undefined) {
                Mojo.ajax(url, params, function (response) {
                    if (response.errorCode == 0) {
                        if (response.data == undefined) {
                            self._renderData(response.data);
                            if (self._options.type == 'rank') {
                                Mojo.app.toast.show(Mojo.utils.locale('force', 'force_list_more'));
                                self._more.hide();
                                self.resize();
                            }
                            return;
                        }
                        if ($.isArray(response.data)) {
                            self._renderData(response.data);
                        } else if (response.data && $.isArray(response.data.list)) {
                            self._renderData(response.data.list);
                        }
                        if (self._options.type == 'rank' && parseInt(start) > 0 && self._options.setForceData instanceof Function) {
                            self._options.setForceData(response.data);
                        }
                    } else {
                        if (self._options.erroCallback != undefined && self._options.erroCallback instanceof Function) {
                            self._options.erroCallback(response);
                        }
                    }
                }, function (e) {}, {
                    showWait: true
                });
            } else {
                if (self._options.type == 'rank') {
                    setTimeout(function () {
                        self._renderData(self._options.forceData);
                    }, 100);
                    self.resize();
                }
            }
        },
        _renderData: function (forces) {
            var self = this;
            if (forces == undefined) {
                forces = this._options.forceArray;
            } else if (this._options.forceArray != undefined && Array.isArray(this._options.forceArray)) {
                forces = this._options.forceArray.concat(forces);
            }
            this.appendData(forces, true);
            this._options.afterDataRender();
            if (this._options.alwaysMore == true || (this._options.showMore && forces && forces.length >= this._options.pageSize)) {
                this._more.show();
            }
            if (this._options.getEntityList != undefined && forces != undefined) {
                this._options.getEntityList(forces, forces.length == 0);
            }
            self.resize();
            if (this._options.callback != undefined && this._options.callback instanceof Function) {
                this._options.callback(self, forces);
            }
        },
        _drawForce: function (data) {
            var self = this;
            return new Mojo.com.ForceElement(data, {
                searchType: self._options.searchType,
                type: self._options.type,
                showRank: self._options.type == 'rank' || self._options.showRank == true,
                showBtn: self._options.showBtn,
                showForceRest: self._options.showForceRest,
                btnText: self._options.btnText,
                forceId: self._options.electionForceId,
                showBattleStatusAndAssistBtn: self._options.showBattleStatusAndAssistBtn,
                showGetTaxedGrainContent: self._options.showGetTaxedGrainContent,
                notShowForceMember: self._options.notShowForceMember,
                addGetTaxedButton: self._options.addGetTaxedButton,
                assistButtonText: self._options.assistButtonText,
                specialClass: self._options.specialClass,
                onBtnClick: self._options.onBtnClick,
                callback: $.noop,
                isDiplomacy: self._isDiplomacy,
                showChooseButton: self._options.showChooseButton,
                showUniteRebelStatus: self._options.showUniteRebelStatus,
                inDefence: self._options.inDefence,
                typeOfbattle: self._options.typeOfbattle,
                chooseClick: function (forceData) {
                    self._options.chooseClick(forceData);
                }
            });
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceBaseProfile = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceBaseProfile";
        },
        init: function (options) {
            this._super('com-profile-base', options);
            this.element().addClass('mojo-com-profile-base');
            this.element().addClass('mojo-com-force-profile');
            this.element().append('<div class="left"></div><div class="center"></div><div class="right"></div>');
            this._addLeft();
            this._addCenter();
            this._addRight();
            var self = this;
            this._force = {};
            this._player = {};
            this._syncHandles = [];
            this._syncInterval = w.setInterval(function () {
                self.sync();
            }, 60000);
            this._restoreInterval = w.setInterval(function () {
                self._calcSp();
                self._calcAvoidWarTime();
            }, 1000);
            this.element().click(function () {
                Mojo.track.onEvent('04_021');
                (this._bpdlg = new Mojo.com.BaseProfileDialog({
                    dataProvider: function () {
                        return self._player;
                    }
                })).open();
                this._bpdlg._scroll.refresh();
            });
        },
        updatePlayerDiff: function (player) {
            for (var a in player) {
                if (this._player.hasOwnProperty(a) && this.isaN(this._player[a]) && this.isaN(player[a])) {
                    this._player[a] = parseInt(this._player[a]) + parseInt(player[a]);
                }
            }
        },
        updateForceDiff: function (force) {
            for (var a in force) {
                if (this._force.hasOwnProperty(a) && this.isaN(this._force[a]) && this.isaN(force[a])) {
                    this._force[a] = parseInt(this._force[a]) + parseInt(force[a]);
                }
            }
        },
        isaN: function (v) {
            return parseInt(v) != NaN;
        },
        _getDefaultOptions: function () {
            return {
                refreshCallback: $.noop,
                getController: $.noop,
                profileUpdate: $.noop
            };
        },
        _addLeft: function () {
            var left = this.element().find('.left');
            this._name = $('<div class="name"></div>').appendTo(left);
            this._level = $('<div class="level">0</div>').appendTo(left);
            this._xp = new Mojo.ui.Progress(undefined, {
                classes: ['xp'],
                labelTemplate: '#{divide}',
            });
            this._xp.element().appendTo(left);
            $('<div class="xp-border"></div>').appendTo(left);
        },
        _addCenter: function () {
            this._rm = new Mojo.ui.Label(undefined, {
                classes: ['rm'],
                text: '0',
            });
            this._vm = new Mojo.ui.Label(undefined, {
                classes: ['vm'],
                text: '0',
            });
            this.element().find('.center').append(this._rm.element()).append(this._vm.element());
        },
        _addRight: function () {
            this._grain = new Mojo.ui.Label(undefined, {
                classes: ['grain'],
                text: ''
            });
            this._sp = new Mojo.ui.Progress(undefined, {
                classes: ['sp'],
                labelTemplate: '#{divide}',
            });
            this.element().find('.right').append(this._grain.element()).append(this._sp.element()).append($('<div class="sp-border"></div>'));
        },
        _refresh: function () {
            var self = this;
            this._name.html(self._player.name);
            this._level.html(self._player.level);
            this._xp.value({
                value: self._player.xp,
                max: self._player.next_xp
            });
            this._rm.text(self._player.rm);
            this._vm.text(self._player.vm);
            this._grain.text(self._player.grain);
            this._sp.value({
                value: self._player.sp,
                max: self._player.stamina
            });
        },
        data: function (data) {
            var self = this;
            if (data == undefined) {
                return;
            }
            var force_info = data.force_info || {};
            force_info.force_chat = data.force_chat;
            var player_info = data.player_info || {};
            this._force = $.extend(true, this._force, force_info);
            this._player = $.extend(true, this._player, player_info);
            this._refresh();
            this._options.profileUpdate(this._force, this._player);
            var c = Mojo.page.Force.getController()._current;
            if (c != undefined && c._options.getComIndex() == 2 && c.inbattle) {
                return;
            }
            if (!Mojo.utils.isNone(data.event)) {
                var evt = data.event;
                var t = evt.type;
                if (t == 15) {
                    var content = $('<div class="paragraph"></div>').html(Mojo.utils.locale('force', 'forcewar_notice_members1', {
                        title: evt.title,
                        ownername: evt.userName,
                        forcename: evt.opponentForceName
                    }));
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        classes: ['mojo-com-forcemsgdlg'],
                        title: Mojo.utils.locale('force', 'force_message'),
                        content: content,
                        leftBtnText: Mojo.utils.locale('ui', 'In War'),
                        leftBtnClick: function (that) {
                            that.close();
                            Mojo.page.Force.getController().switchTo(2);
                        },
                        rightBtnText: Mojo.utils.locale('ui', 'View More'),
                        rightBtnClick: function (that) {
                            that.close();
                            Mojo.page.Force.getController().switchTo(5);
                        }
                    });
                    dlg.open();
                } else if (t == 11) {
                    var content = $('<div class="paragraph"></div>').html(Mojo.utils.locale('force', 'forcewar_win_grain', {
                        forcename: evt.opponentForceName,
                        grain: evt.grainCount
                    }));
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        title: Mojo.utils.locale('force', 'force_message'),
                        content: content,
                        leftBtnText: Mojo.utils.locale('ui', 'View More'),
                        leftBtnClick: function () {
                            dlg.close();
                            Mojo.page.Force.getController().switchTo(5);
                        },
                        rightBtnText: Mojo.utils.locale('ui', 'Close'),
                        rightBtnClick: function () {
                            dlg.close();
                        }
                    });
                    dlg.open();
                } else if (t == 13) {
                    var content = $('<div class="paragraph"></div>').html(Mojo.utils.locale('force', 'forcewar_lose_grain', {
                        forcename: evt.opponentForceName,
                        grain: evt.grainCount
                    }));
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        title: Mojo.utils.locale('force', 'force_message'),
                        content: content,
                        leftBtnText: Mojo.utils.locale('ui', 'Retaliate'),
                        leftBtnClick: function () {
                            dlg.close();
                            Mojo.page.Force.getController().switchTo(2, {
                                target_force_id: evt.attacker_id
                            });
                        },
                        rightBtnText: Mojo.utils.locale('ui', 'View More'),
                        rightBtnClick: function () {
                            dlg.close();
                            Mojo.page.Force.getController().switchTo(5);
                        }
                    });
                    dlg.open();
                } else if (t == 800 || t == 300 || t == 314 || t == 210 || t == 301 || t == 383 || t == 200) {
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        classes: ['mojo-com-forcemsgdlg'],
                        title: evt.header,
                        content: $('<div class="paragraph"></div>').html(evt.content),
                        leftBtnText: Mojo.utils.locale('ui', 'In War'),
                        leftBtnClick: function (that) {
                            that.close();
                            Mojo.app.redirect('/force', {
                                index: 2
                            });
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        }
                    });
                    dlg.open();
                } else if (t == 81) {
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        classes: ['mojo-com-forcemsgdlg'],
                        title: evt.header,
                        content: $('<div class="paragraph"></div>').html(evt.content),
                        leftBtnText: Mojo.utils.locale('ui', 'In War2'),
                        leftBtnClick: function (that) {
                            that.close();
                            Mojo.app.redirect('/force', {
                                index: 7
                            });
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        }
                    });
                    dlg.open();
                } else if (t == 91) {
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        classes: ['mojo-com-forcemsgdlg'],
                        title: evt.header,
                        content: $('<div class="paragraph"></div>').html(evt.content),
                        leftBtnText: Mojo.utils.locale('ui', 'In War'),
                        leftBtnClick: function (that) {
                            that.close();
                            Mojo.app.redirect('/force', {
                                index: 2
                            });
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        }
                    });
                    dlg.open();
                } else if (t == 93) {
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        classes: ['mojo-com-forcemsgdlg'],
                        title: evt.header,
                        content: $('<div class="paragraph"></div>').html(evt.content),
                        leftBtnText: Mojo.utils.locale('ui', 'Retaliate'),
                        leftBtnClick: function (that) {
                            that.close();
                            Mojo.app.redirect('/force', {
                                index: 2,
                                refresh: 1,
                                target_city_id: 'xxx'
                            });
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        }
                    });
                    dlg.open();
                }
            }
            return {
                player: self.player,
                force: self.force
            };
        },
        syncForce: function (callback) {
            var self = this;
            Mojo.ajax('/force/forceProfile', {}, function (response) {
                if (response && response.errorCode == 0) {
                    var data = {};
                    data.force_info = response.data;
                    self.data(data);
                    for (var handleIndex in self._syncHandles) {
                        var syncHandleFunc = self._syncHandles[handleIndex];
                        if (syncHandleFunc instanceof Function) {
                            syncHandleFunc({
                                force_info: self._force
                            });
                        }
                    }
                    if (callback instanceof Function) {
                        callback(response.data);
                    }
                } else if (callback instanceof Function) {
                    callback(self.data());
                }
            }, function () {
                if (callback instanceof Function) {
                    callback(self.data());
                }
            });
        },
        sync: function (callback) {
            var self = this;
            Mojo.ajax('/force/index', {}, function (response) {
                if (response && response.errorCode == 0) {
                    self.data(response.data);
                    for (var handleIndex in self._syncHandles) {
                        var syncHandleFunc = self._syncHandles[handleIndex];
                        if (syncHandleFunc instanceof Function) {
                            syncHandleFunc(response.data);
                        }
                    }
                    if (callback instanceof Function) {
                        callback(response.data);
                    }
                } else if (callback instanceof Function) {
                    callback(self.data());
                }
            }, function () {
                if (callback instanceof Function) {
                    callback(self.data());
                }
            });
        },
        addSyncHandle: function (syncHandleFunc) {
            this._syncHandles.push(syncHandleFunc);
        },
        _calcSp: function () {
            if (this._player.sp < this._player.stamina) {
                if (this._player.sp_second < 0) {
                    this._player.sp_second = this._player.sp_restore_pp;
                    return;
                }
                this._player.sp_second--;
                if (this._player.sp_second == 0) {
                    this._player.sp_second = this._player.sp_restore_pp;
                    this._player.sp++;
                    this._refresh();
                }
            }
        },
        _calcAvoidWarTime: function () {
            if (this._player.avoid_war_time > 0) {
                this._player.avoid_war_time--;
            }
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceProfileDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceProfileDialog";
        },
        init: function (force, player, options) {
            var self = this;
            this._super(undefined, options);
            this._force = force;
            this._player = player;
            this.element().addClass('mojo-com-forceprofiledlg');
            this._paragraph = $('<div class="paragraph"></div>').appendTo(this._content);
            this._addContent();
            this._scroll = new Mojo.ui.Scroll(undefined, this._content, {
                direction: 2,
            });
            this.element().append(this._scroll.element());
            this._addButtons();
            this._addChanllenge();
            this._addForceBuff();
            this._interval = w.setInterval(function () {
                self._refresh();
            }, 1000);
        },
        _addContent: function () {
            var self = this;
            this._addLabel('name', this._force.name, 'name');
            this._addLabel('force_id', this._force.id, 'forceid');
            this._addLabel('profile_level', this._force.level, 'level');
            var update = parseInt(this._force.grain_for_next_level);
            this._addLabel('update_grain', update != 0 ? this._force.grain_for_next_level : Mojo.utils.locale('force', 'level_full'), 'updategrain');
            this._addLabel('have_grain', {
                grain: self._force.grain,
                safe_grain: self._force.grain_protected
            }, 'grain');
            this._addLabel('count_member', this._force.member_num + "/" + this._force.member_num_limit, 'countmember');
            this._addLabel('force_owner', this._force.owner.name, 'forceowner');
            if (this._force.vice_owner != null && this._force.vice_owner != undefined) {
                this._addLabel('force_vice_owner', this._force.vice_owner.name, 'forceviceowner');
            } else {
                this._addLabel('force_vice_owner', Mojo.utils.locale('force', 'position_empty'), 'forceviceowner');
            }
            this._addLabel('count_officer_1', this._force.position_3_num + "/" + this._force.position_3_num_limit, 'count_officer_1');
            this._addLabel('count_officer_2', this._force.position_14_num + "/" + this._force.position_14_num_limit, 'count_officer_2');
            this._addLabel('count_officer_3', this._force.position_15_num + "/" + this._force.position_15_num_limit, 'count_officer_3');
            this._addLabel('count_officer_4', this._force.position_16_num + "/" + this._force.position_16_num_limit, 'count_officer_4');
            this._addLabel('count_officer_5', this._force.position_17_num + "/" + this._force.position_17_num_limit, 'count_officer_5');
            this._addLabel('count_officer_6', this._force.position_18_num + "/" + this._force.position_18_num_limit, 'count_officer_6');
            this._addLabel('count_officer_7', this._force.position_19_num + "/" + this._force.position_19_num_limit, 'count_officer_7');
        },
        _addChanllenge: function () {
            this._chanllegecount = new Mojo.ui.Label(undefined, {
                classes: ['chanlengelabel'],
                text: Mojo.utils.locale('force', 'count_challenge') + this._force.challenge + "/" + this._force.challenge_limit
            }).element().appendTo(this._paragraph);
            this._chanllenge = $('<div class="chanllenge"></div>').appendTo(this._paragraph);
            var nextHtml = Mojo.utils.locale('force', 'next_chanllenge_get') + this._getNextSpTime();
            var fullHtml = Mojo.utils.locale('force', 'all_chanllenge_get') + this._getFullSpTime();
            this._chanllenge.html(nextHtml + "<br>" + fullHtml);
            this._grain = $("<div class='grain'></div>").appendTo(this._paragraph);
            var position = parseInt(this._player.position_id);
            var isincd = true;
            if (this._force.time_to_assign_grain <= 0) {
                this._grain.empty();
                isincd = false;
            } else {
                this._grain.html(Mojo.utils.locale('force', 'grain_share_cdtip') + this._formatCDTime(this._force.time_to_assign_grain));
            }
            if ((position == 1 || position == 15) && isincd == true) {
                this.grainBtn.disable(true);
                this.grainBtn._options.disableClick = function () {
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'graun_share_cd_no'));
                };
            } else {
                if (this._player.force_rights.__all__ || this._player.force_rights.assign_grain) {
                    this.grainBtn.disable(false);
                } else {
                    this.grainBtn.disable(true);
                    this.grainBtn._options.disableClick = function () {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'salary_only_owner'));
                    };
                }
            }
        },
        _formatCDTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
        _refresh: function () {
            this._force = this._options.getData();
            this._grain.remove();
            this._chanllenge.remove();
            this._chanllegecount.remove();
            this._addChanllenge();
            if (this._forcebuff != undefined && this._forcebuffs != undefined) {
                this._forcebuff.remove();
                this._forcebuffs.remove();
            }
            this._addForceBuff();
        },
        _getNextSpTime: function () {
            var str = undefined;
            if (this._force.challenge == this._force.challenge_limit) {
                str = Mojo.utils.locale('common', 'has reached the maximum');
            } else {
                str = Mojo.utils.formatTime(this._force.challenge_second);
            }
            return str;
        },
        _getFullSpTime: function () {
            var str = undefined;
            if (this._force.challenge == this._force.challenge_limit) {
                str = Mojo.utils.locale('common', 'has reached the maximum');
            } else {
                str = Mojo.utils.formatTime((this._force.challenge_limit - this._force.challenge - 1) * parseInt(this._force.cd_challange) + this._force.challenge_second);
            }
            return str;
        },
        _addLabel: function (name, value, className) {
            var self = this;
            var disp_text = undefined;
            if (typeof value == "object") {
                disp_text = Mojo.utils.locale('force', name, value);
            } else {
                disp_text = Mojo.utils.locale('force', name) + value;
            }
            new Mojo.ui.Label(undefined, {
                text: disp_text,
                classes: [className]
            }).element().appendTo(this._paragraph);
        },
        _addButtons: function () {
            var self = this;
            this.updateBtn = new Mojo.ui.Button('update-btn', {
                special: 'button-big-red',
                text: Mojo.utils.locale('force', 'update'),
                click: function () {
                    self._updateForce();
                },
                disableClick: function () {
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'update_only_owner'));
                }
            });
            this.updateBtn.element().appendTo(this._footer);
            this.grainBtn = new Mojo.ui.Button('grain-btn', {
                text: Mojo.utils.locale('force', 'share_grain2'),
                click: function () {
                    self._shareGrain();
                },
                disableClick: function () {
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'salary_only_owner'));
                }
            });
            this.grainBtn.element().appendTo(this._footer);
            var position = parseInt(this._player.position_id);
            if (position != 1) {
                this.updateBtn.disable(true);
            } else {
                var update = parseInt(this._force.grain_for_next_level);
                if (update == 0) {
                    this.updateBtn.disable(true);
                    this.updateBtn._options.disableClick = function () {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'level_full_tip'));
                    };
                }
            }
            if (this._player.force_rights.__all__ || this._player.force_rights.assign_grain) {
                this.grainBtn.disable(false);
            } else {
                this.grainBtn.disable(true);
            }
        },
        _addForceBuff: function () {
            var self = this;
            if (this._force != undefined && this._force.buffs != undefined && this._force.buffs.title != undefined && this._force.buffs.title != "") {
                this._forcebuff = new Mojo.ui.Label(undefined, {
                    text: Mojo.utils.locale('force', 'forcebuff') + this._force.buffs.title
                }).element().appendTo(this._paragraph);
                var forcebuffs = '';
                $.each(this._force.buffs.list, function (i, f) {
                    forcebuffs += '&#149' + f.name + '：' + f.desc + "</br>";
                });
                this._forcebuffs = $("<span class='chanllenge'></span>").html(forcebuffs).appendTo(this._paragraph);
            }
        },
        _updateForce: function () {
            var self = this;
            self.updateBtn._options.disableClick = function () {};
            self.updateBtn.disable(true);
            Mojo.ajax('/force/levelUpPreview', {
                forceid: self._force.id
            }, function (response) {
                self.close();
                if (response.errorCode == 0) {
                    new Mojo.com.ForceUpdateDialog(self._force, response.data, {
                        getController: function () {
                            return self._options.getController();
                        }
                    }).open();
                }
            }, function () {});
        },
        _shareGrain: function () {
            this.close();
            var self = this;
            new Mojo.com.ForceGrainShareDlg(this._force, {
                getController: function () {
                    return self._options.getController();
                }
            }).open();
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('force', 'base_info'),
                dlgType: 0,
                zIndex: 1101,
                confirmClick: $.noop,
                getController: $.noop,
                close: function () {
                    w.clearInterval(self._interval);
                },
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.BaseProfileDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.BaseProfileDialog";
        },
        init: function (options) {
            this._super('com-profile-base-dialog', options);
            this.element().addClass('mojo-com-profile-base-dialog');
            var self = this;
            this._interval = w.setInterval(function () {
                self._refresh();
            }, 1000);
            this._tips = $('<div class="paragraph"></div>').appendTo(this._content);
            this._refresh();
            this._scroll = new Mojo.ui.Scroll(undefined, this._content, {
                direction: 2,
            });
            this.element().append(this._scroll.element());
            this._footer.append((new Mojo.ui.Button(undefined, {
                special: 'button-big-red',
                text: Mojo.utils.locale('common', 'Go Statistics'),
                click: function () {
                    Mojo.app.redirect('/statistics', {});
                },
            })).element());
            this._footer.append((new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                dataProvider: $.noop,
                title: Mojo.utils.locale('ui', 'Base Informations'),
                close: function () {
                    w.clearInterval(self._interval);
                }
            });
        },
        _refresh: function () {
            var data = this._options.dataProvider();
            for (var key in data) {
                var v = data[key];
                if (Mojo.utils.isNumeric(v)) {
                    data[key] = parseFloat(v);
                }
            }
            this._tips.empty();
            this._genTooltip(data);
        },
        _genTooltip: function (data) {
            new Mojo.ui.Label(undefined, {
                classes: ['name'],
                text: Mojo.utils.locale('common', 'name') + data.name
            }).element().appendTo(this._tips);
            new Mojo.ui.Label(undefined, {
                classes: ['playid'],
                text: Mojo.utils.locale('common', 'playerId') + data.id
            }).element().appendTo(this._tips);
            new Mojo.ui.Label(undefined, {
                classes: ['level'],
                text: Mojo.utils.locale('common', 'level') + data.level
            }).element().appendTo(this._tips);
            if (data.xp > data.next_xp) {
                data.xp = data.next_xp;
            }
            new Mojo.ui.Label(undefined, {
                classes: ['xp'],
                text: Mojo.utils.locale('common', 'xp') + data.xp + "/" + data.next_xp
            }).element().appendTo(this._tips);
            new Mojo.ui.Label(undefined, {
                classes: ['rm'],
                text: Mojo.utils.locale('common', 'rm') + data.rm
            }).element().appendTo(this._tips);
            new Mojo.ui.Label(undefined, {
                classes: ['vm'],
                text: Mojo.utils.locale('common', 'vm') + data.vm
            }).element().appendTo(this._tips);
            new Mojo.ui.Label(undefined, {
                classes: ['grain'],
                text: Mojo.utils.locale('common', 'grain') + data.grain
            }).element().appendTo(this._tips);
            new Mojo.ui.Label(undefined, {
                classes: ['gold'],
                text: Mojo.utils.locale('common', 'gold') + (data.gold || 0)
            }).element().appendTo(this._tips);
            new Mojo.ui.Label(undefined, {
                classes: ['ep'],
                text: Mojo.utils.locale('common', 'ep') + data.ep + "/" + data.energy
            }).element().appendTo(this._tips);
            var time4ep = Mojo.utils.locale('common', 'time for next ep') + this._genEpRestore(data) + "<br>" + Mojo.utils.locale('common', 'time for all ep') + this._genEpFullRestore(data) + (data.ep_percent > 0 ? ('<br>' + Mojo.utils.locale('common', 'acceleration for restore ep') + data.ep_percent + "%") : '');
            $("<span class='time-for-ep'></span>").appendTo(this._tips).html(time4ep);
            new Mojo.ui.Label(undefined, {
                classes: ['sp'],
                text: Mojo.utils.locale('common', 'sp') + data.sp + "/" + data.stamina
            }).element().appendTo(this._tips);
            var time4sp = Mojo.utils.locale('common', 'time for next sp') + this._genSpRestore(data) + "<br>" + Mojo.utils.locale('common', 'time for all sp') + this._genSpFullRestore(data) + (data.sp_percent > 0 ? ('<br>' + Mojo.utils.locale('common', 'acceleration for restore sp') + data.sp_percent + "%") : '');
            $("<span class='time-for-sp'></span>").html(time4sp).appendTo(this._tips);
            new Mojo.ui.Label(undefined, {
                classes: ['avoid_war_time'],
                text: Mojo.utils.locale('common', 'avoid war time', {
                    avoid_war_time: Mojo.utils.formatTime(data.avoid_war_time)
                })
            }).element().appendTo(this._tips);
            if (data != undefined && data.buffs != undefined && data.buffs.title != undefined && data.buffs.title != "") {
                new Mojo.ui.Label(undefined, {
                    classes: ['userbuff'],
                    text: Mojo.utils.locale('common', 'userbuff') + data.buffs.title,
                }).element().appendTo(this._tips);
                var userbuffs = '';
                $.each(data.buffs.list, function (i, u) {
                    userbuffs += '&#149' + u.name + '：' + u.desc + "</br>";
                });
                $("<span class='userbuffs'></span>").html(userbuffs).appendTo(this._tips);
            }
        },
        _genSpRestore: function (data) {
            var str = undefined;
            if (data.sp == data.stamina) {
                str = Mojo.utils.locale('common', 'has reached the maximum');
            } else {
                str = Mojo.utils.formatTime(data.sp_second);
            }
            return str;
        },
        _genSpFullRestore: function (data) {
            var str = undefined;
            if (data.sp == data.stamina) {
                str = Mojo.utils.locale('common', 'has reached the maximum');
            } else {
                str = Mojo.utils.formatTime((data.stamina - data.sp - 1) * data.sp_restore_pp + data.sp_second);
            }
            return str;
        },
        _genEpRestore: function (data) {
            var str = undefined;
            if (data.ep == data.energy) {
                str = Mojo.utils.locale('common', 'has reached the maximum');
            } else {
                str = Mojo.utils.formatTime(data.ep_second);
            }
            return str;
        },
        _genEpFullRestore: function (data) {
            var str = undefined;
            if (data.ep == data.energy) {
                str = Mojo.utils.locale('common', 'has reached the maximum');
            } else {
                str = Mojo.utils.formatTime((data.energy - data.ep - 1) * data.ep_restore_pp + data.ep_second);
            }
            return str;
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceUpdateDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceUpdateDialog";
        },
        init: function (data, preview, options) {
            this._super(undefined, options);
            this._force = data;
            this._preview = preview;
            this.element().addClass('mojo-com-forceupdatedlg');
            this._paragraph = $("<div class='paragraph'></div>").appendTo(this._content);
            this._scrollContent = $('<div class="scrollContent"></div>');
            this._addContent();
        },
        title: function (titletext) {
            if (this._options.noTitle == false) {
                this.element().find('.title').html(titletext);
            }
        },
        _addContent: function () {
            this._grainEnouph();
        },
        _addButton: function () {
            var self = this;
            this.okBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'ok'),
                special: 'button-big-red',
                click: function () {
                    self._confirmUpdate();
                }
            });
            this.okBtn.element().appendTo(this._footer);
            new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                }
            }).element().appendTo(this._footer);
        },
        _grainNotEnouph: function () {
            var self = this;
            var infoDlg = new Mojo.ui.Dialog(undefined, {
                title: Mojo.utils.locale('common', 'tips'),
                content: $("<div class='paragraph'></div>").html(Mojo.utils.locale('force', 'grain_not_enouph')),
                deviceaware: true
            });
            new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('force', 'internal'),
                special: 'button-big-red',
                click: function () {
                    infoDlg.close();
                    self._options.getController().switchTo(1);
                }
            }).element().appendTo(infoDlg._footer);
            new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('force', 'foreign'),
                click: function () {
                    infoDlg.close();
                    self._options.getController().switchTo(2);
                }
            }).element().appendTo(infoDlg._footer);
            infoDlg.open();
        },
        _grainEnouph: function () {
            this.title(Mojo.utils.locale('force', 'update_force'));
            var self = this;
            self._refresh();
            this._addButton();
        },
        _refresh: function () {
            var self = this;
            self._paragraph.empty();
            self._scrollContent.empty();
            $('<div class="tip"></div>').appendTo(this._paragraph).html(Mojo.utils.locale('force', 'update_tip'));
            var preview = self._preview;
            this._addLabel('force_level', preview.level[0], preview.level[1]);
            if (preview.grain[0] != preview.grain[1]) {
                if (parseInt(preview.grain[1]) < 0) {
                    new Mojo.ui.Label(undefined, {
                        text: Mojo.utils.locale('force', 'force_grain') + "<span>" + Mojo.utils.locale('force', 'lake_grain') + "</span>"
                    }).element().appendTo(this._scrollContent);
                } else {
                    this._addLabel('force_grain', preview.grain[0], preview.grain[1]);
                }
            }
            if (preview.member_num[0] != preview.member_num[1]) {
                this._addLabel('member_max', preview.member_num[0], preview.member_num[1]);
            }
            if (preview.position_3_num[0] != preview.position_3_num[1]) {
                this._addLabel('count_officer_1', preview.position_3_num[0], preview.position_3_num[1]);
            }
            if (preview.position_14_num[0] != preview.position_14_num[1]) {
                this._addLabel('count_officer_2', preview.position_14_num[0], preview.position_14_num[1]);
            }
            if (preview.position_15_num[0] != preview.position_15_num[1]) {
                this._addLabel('count_officer_3', preview.position_15_num[0], preview.position_15_num[1]);
            }
            if (preview.position_16_num[0] != preview.position_16_num[1]) {
                this._addLabel('count_officer_4', preview.position_16_num[0], preview.position_16_num[1]);
            }
            if (preview.position_17_num[0] != preview.position_17_num[1]) {
                this._addLabel('count_officer_5', preview.position_17_num[0], preview.position_17_num[1]);
            }
            if (preview.position_18_num[0] != preview.position_18_num[1]) {
                this._addLabel('count_officer_6', preview.position_18_num[0], preview.position_18_num[1]);
            }
            if (preview.position_19_num[0] != preview.position_19_num[1]) {
                this._addLabel('count_officer_7', preview.position_19_num[0], preview.position_19_num[1]);
            }
            if (preview.lodgment_num_limit[0] != preview.lodgment_num_limit[1]) {
                this._addLabel('position_count', preview.lodgment_num_limit[0], preview.lodgment_num_limit[1]);
            }
            var s = new Mojo.ui.Scroll(undefined, this._scrollContent, {
                direction: 2
            });
            s.element().appendTo(this._paragraph);
            setTimeout(function () {
                s.refresh();
            })
        },
        _confirmUpdate: function () {
            this.okBtn.disable(true);
            if (parseInt(this._preview.grain[1]) < 0) {
                this.close();
                this._grainNotEnouph();
                return;
            }
            var self = this;
            Mojo.ajax('/force/levelup', {
                force_id: this._force.id
            }, function (response) {
                if (response.errorCode == 0) {
                    self.close();
                    Mojo.track.onEvent('24_501');
                    self._options.getController().sync();
                    new Mojo.com.ForceLevelUpDialog(response, {}).open();
                } else {}
            }, function () {});
        },
        _addLabel: function (name, value, nextvalue) {
            var self = this;
            new Mojo.ui.Label(undefined, {
                text: Mojo.utils.locale('force', name) + value + " → <span>" + nextvalue + "</span>"
            }).element().appendTo(this._scrollContent);
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('common', 'tips'),
                dlgType: 0,
                zIndex: 1101,
                confirmClick: $.noop,
                getController: $.noop,
                deviceaware: true
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceLevelUpDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceLevelUpDialog";
        },
        init: function (response, options) {
            this._data = response.data;
            this._event = response.event;
            this._super(undefined, options);
            this.element().addClass('mojo-com-forcelevelupdlg');
            this.element().addClass('mojo-com-forcelevelupdlg-' + Mojo.app.data.userLanguage);
            this._platform = Mojo.app.getPlatform();
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            this._message = $('<div class="paragraph"></div>').appendTo(this._content);
            this._scrollContent = $('<div class="scrollContent"></div>');
            var force = this._data;
            $("<div class='info'></div>").appendTo(this._scrollContent).html(Mojo.utils.locale('force', 'leve_updated', {
                level: force.level[1]
            }));
            this._addLabel('force_level', force.level[0], force.level[1]);
            if (this._isDataChanged(force.member_num)) {
                this._addLabel('member_max', force.member_num[0], force.member_num[1]);
            }
            if (this._isDataChanged()) {
                this._addLabel('count_officer_1', force.first_class_officer_num[0], force.first_class_officer_num[1]);
            }
            if (this._isDataChanged(force.position_3_num)) {
                this._addLabel('count_officer_1', force.position_3_num[0], force.position_3_num[1]);
            }
            if (this._isDataChanged(force.position_14_num)) {
                this._addLabel('count_officer_2', force.position_14_num[0], force.position_14_num[1]);
            }
            if (this._isDataChanged(force.position_15_num)) {
                this._addLabel('count_officer_3', force.position_15_num[0], force.position_15_num[1]);
            }
            if (this._isDataChanged(force.position_16_num)) {
                this._addLabel('count_officer_4', force.position_16_num[0], force.position_16_num[1]);
            }
            if (this._isDataChanged(force.position_17_num)) {
                this._addLabel('count_officer_5', force.position_17_num[0], force.position_17_num[1]);
            }
            if (this._isDataChanged(force.position_18_num)) {
                this._addLabel('count_officer_6', force.position_18_num[0], force.position_18_num[1]);
            }
            if (this._isDataChanged(force.position_19_num)) {
                this._addLabel('count_officer_7', force.position_19_num[0], force.position_19_num[1]);
            }
            var s = new Mojo.ui.Scroll(undefined, this._scrollContent, {
                direction: 2
            });
            s.element().appendTo(this._message);
            setTimeout(function () {
                s.refresh();
            })
        },
        _isDataChanged: function (attr) {
            if (attr && attr.length > 1) {
                return attr[0] != attr[1];
            }
            return false;
        },
        _addLabel: function (name, value, newvalue) {
            var self = this;
            new Mojo.ui.Label(undefined, {
                text: Mojo.utils.locale('force', name) + value + ' → <span>' + newvalue + '</span>'
            }).element().appendTo(this._scrollContent);
        },
        _addHandleButtons: function () {
            var self = this;
            self._options.btnClick = function () {
                self.close();
            };
            var platformBtn = new Mojo.com.PlatformButton(self._event, self._options);
            this._footer.append(platformBtn.element());
            this._footer.append((new Mojo.ui.Button('close-btn', {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                noTitle: true,
                zIndex: 1101,
            });
        },
    });
})(window, jQuery);;;
(function (w, $) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.GrainShareConfirmDlg = w.Mojo.ui.Dialog.extend({
        init: function (data, options) {
            this._super(undefined, options);
            this._data = data;
            this._paragraph = $("<div class='paragraph'></div>").appendTo(this._content);
            this._addContent();
            this._addButtons();
        },
        _addContent: function () {
            var l = Mojo.utils.locale;
            var s = this;
            new Mojo.ui.Label(undefined, {
                classes: ['tips'],
                text: l('force', 'grain_share_confirm')
            }).element().appendTo(s._paragraph);
            s._addLabel('owner', l('force', 'info_owner'), s._data["info_owner"]);
            s._addLabel('vice_owner', l('force', 'info_vice_owner'), s._data["info_vice_owner"]);
            for (var i = 1; i < 8; i++) {
                s._addLabel('count_officer_' + i, l('force', 'count_officer_name_' + i), s._data["count_officer_name_" + i]);
            }
            s._addLabel('member', l('force', 'info_member'), s._data["info_member"]);
            new Mojo.ui.Label(undefined, {
                classes: ['cd'],
                text: l('force', 'grain_share_cd')
            }).element().appendTo(s._paragraph);
        },
        _addLabel: function (cls, text, val) {
            var l = $("<div class='mem'></div>").appendTo(this._paragraph);
            var t = $("<div class='tit'></div>").html(text);
            var v = $("<div class='val'></div>").html(val + '/人');
            l.append(t).append(v);
        },
        _doShare: function (data) {
            var self = this;
            Mojo.ajax("/force/assignGrain", {
                'position_1': data["info_owner"],
                'position_2': data["info_vice_owner"],
                'position_3': data["count_officer_name_1"],
                'position_14': data["count_officer_name_2"],
                'position_15': data["count_officer_name_3"],
                'position_16': data["count_officer_name_4"],
                'position_17': data["count_officer_name_5"],
                'position_18': data["count_officer_name_6"],
                'position_19': data["count_officer_name_7"],
                'position_100': data["info_member"]
            }, function (response) {
                if (response.errorCode == 0) {
                    self.close(true);
                    Mojo.track.onEvent('24_502');
                    var infoDlg = new Mojo.ui.Dialog(undefined, {
                        title: Mojo.utils.locale('common', 'tips'),
                        classes: ['tip-dialog'],
                        content: $("<div class='paragraph'></div>").html(Mojo.utils.locale('force', 'grain_succ'))
                    });
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'close'),
                        click: function () {
                            infoDlg.close();
                        }
                    }).element().appendTo(infoDlg._footer);
                    infoDlg.open();
                } else {
                    self.hide();
                    var errDlg = new Mojo.ui.Dialog(undefined, {
                        title: Mojo.utils.locale('common', 'tips'),
                        classes: ['tip-dialog'],
                        content: $("<div class='paragraph'></div>").html(response.errorMsg),
                        close: function () {
                            if (self.selfDlgClose !== 0) {
                                self.close(true);
                                delete self.selfDlgClose;
                            }
                        }
                    });
                    new Mojo.ui.Button(undefined, {
                        special: 'button-big-red',
                        text: Mojo.utils.locale('force', 'g_back_changeBtn'),
                        click: function () {
                            self.selfDlgClose = 0;
                            errDlg.close();
                            self.close();
                            self._options._refreshGrain(response);
                        }
                    }).element().appendTo(errDlg._footer);
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'close'),
                        click: function () {
                            errDlg.close();
                            self.close(true);
                        }
                    }).element().appendTo(errDlg._footer);
                    errDlg.open(true);
                }
            }, function () {}, {
                showWait: true
            });
        },
        _addButtons: function () {
            var self = this;
            new Mojo.ui.Button(undefined, {
                special: 'button-big-red',
                text: Mojo.utils.locale('common', 'ok'),
                click: function () {
                    self._doShare(self._data);
                }
            }).element().appendTo(this._footer);
            new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                }
            }).element().appendTo(this._footer);
        },
        close: function (isSucc) {
            this._super();
            this._options.afterClose(isSucc);
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                afterClose: $.noop,
                noOverlay: true,
                title: Mojo.utils.locale('common', 'tips')
            });
        }
    });
    w.Mojo.com.ForceGrainShareDlg = w.Mojo.ui.Dialog.extend({
        init: function (data, options) {
            this._super(undefined, options);
            this._force = data;
            this.element().addClass('mojo-com-forcegrainsharedlg');
            this._paragraph = $("<div class='paragraph'></div>").appendTo(this._content);
            this._addContent();
            this._addButtons();
        },
        _addContent: function () {
            var self = this;
            this._paragraph = $("<div class='paragraph'></div>").appendTo(this._paragraph);
            $('<div id="lastgrain" class="lastgrain"><div>').appendTo(this._paragraph).html(Mojo.utils.locale('force', 'last_grain') + this._force.grain);
            this._addInput('info_owner', 1);
            this._addInput('info_vice_owner', Mojo.utils.isNone(this._force.vice_owner) ? 0 : 1);
            this._addInput('count_officer_name_1', this._force.position_3_num);
            this._addInput('count_officer_name_2', this._force.position_14_num);
            this._addInput('count_officer_name_3', this._force.position_15_num);
            this._addInput('count_officer_name_4', this._force.position_16_num);
            this._addInput('count_officer_name_5', this._force.position_17_num);
            this._addInput('count_officer_name_6', this._force.position_18_num);
            this._addInput('count_officer_name_7', this._force.position_19_num);
            this._addInput('info_member', parseInt(this._force.member_num) - this._force.officer_num);
            this._paragraph.find('.shareitem .input input').click(function () {
                this.selectionStart = 0;
                this.selectionEnd = this.value.length;
            });
            this._paragraph.find('.shareitem .input input').bind("change paste keyup input", function () {
                self._checkInput();
            });
        },
        _reset: function () {
            var self = this;
            self._invalid = false;
            self.okBtn.disable(false);
            self._paragraph.find('#lastgrain').removeClass('lake');
            self.okBtn.element().removeClass('err');
        },
        _checkInput: function () {
            var self = this;
            self._reset();
            var total = 0;
            self._paragraph.find('.shareitem .input input').each(function (i, e) {
                var v = $(e).val().trim();
                if (self._isValid(v)) {
                    var i = v == "" ? 0 : parseInt($(e).val(), 10);
                    $(e).val(i);
                    var c = parseInt($(e).attr('c'), 10);
                    total = total + i * c;
                } else {
                    self._invalid = true;
                    return false;
                }
            });
            if (self._invalid) {
                self.okBtn.disable(true);
                self.okBtn.element().addClass('err');
            } else {
                var last = self._force.grain - total;
                self._paragraph.find('#lastgrain').html(Mojo.utils.locale('force', 'last_grain') + last);
                if (last < 0) {
                    self.okBtn.disable(true);
                    self._paragraph.find('#lastgrain').addClass('lake');
                }
                if (total == 0) {
                    self.okBtn.disable(true);
                    self.okBtn.element().addClass('err');
                }
            }
        },
        _isValid: function (v) {
            var regex = /^\d{1,5}$/;
            return regex.test(v);
        },
        _addInput: function (label, count) {
            var element = $("<div class='shareitem'></div>");
            $("<div class='label'></div>").html(Mojo.utils.locale('force', label)).appendTo(element);
            var inputarea = $("<div class='input'></div>");
            var _input = $("<input type='text' maxlength='5' value='0'/>");
            _input.attr('name', label);
            _input.attr('c', count);
            if (count == 0)
                _input.attr("disabled", "disabled");
            _input.appendTo(inputarea);
            inputarea.html(inputarea.html() + Mojo.utils.locale('force', 'force_num', {
                'count': count
            }));
            inputarea.appendTo(element);
            element.appendTo(this._paragraph);
        },
        _isTotalValid: function (data) {
            var i = 0;
            for (var k in data) {
                i = i + data[k];
            }
            if (i > 0) {
                return true;
            } else {
                this.okBtn.disable(true);
                this.okBtn.element().addClass('err');
                return false;
            }
        },
        _addButtons: function () {
            var self = this;
            self.okBtn = new Mojo.ui.Button(undefined, {
                special: 'button-big-red',
                text: Mojo.utils.locale('common', 'ok'),
                disableClick: function () {
                    if (self.okBtn.element().hasClass('err')) {
                        if (self._invalid == true) {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'grain_input_err'));
                        } else {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'grain_not_input'));
                        }
                    } else {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'grain_share_fail'));
                    }
                },
                click: function () {
                    self.okBtn.element().trigger("focus");
                    self._shareGrainConfirm();
                }
            });
            self.okBtn.element().appendTo(this._footer);
            self.okBtn.disable(true);
            self.okBtn.element().addClass('err');
            self.userDefinedBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('force', 'userDefinedBtn'),
                click: function () {
                    self.close();
                    self._userDefinedBtnClick();
                }
            }).element().appendTo(this._footer);
        },
        _userDefinedBtnClick: function () {
            var data = null;
            var self = this;
            var dlg = new Mojo.com.ForceDefinedGrainDlg(data, {
                forceGrainShareDlgData: self._force,
                allGrain: self._force.grain,
                memberCount: self._force.member_num,
                forceGrainShareDlgOpts: self._options,
                getController: function () {
                    return self._options.getController();
                }
            });
            dlg.open();
        },
        _hideShareDlg: function () {
            this.element().hide();
        },
        _showShareDlg: function () {
            this.element().show();
        },
        _shareGrainConfirm: function () {
            var self = this;
            var data = {};
            data["info_owner"] = self._paragraph.find('input[name="info_owner"]').val();
            data["info_vice_owner"] = self._paragraph.find('input[name="info_vice_owner"]').val();
            for (var i = 1; i < 8; i++) {
                data["count_officer_name_" + i] = self._paragraph.find('input[name=count_officer_name_' + i + ']').val();
            }
            data["info_member"] = self._paragraph.find('input[name="info_member"]').val();
            if (!self._isTotalValid(data)) {
                return;
            }
            self._hideShareDlg();
            var confirmDlg = new Mojo.com.GrainShareConfirmDlg(data, {
                afterClose: function (isSucc) {
                    if (isSucc) {
                        self._options.getController().sync();
                        self.close();
                    } else {
                        self._showShareDlg();
                    }
                },
                _refreshGrain: function (response) {
                    Mojo.page.Force.getController().sync();
                    var grain = response.data.grain;
                    self._force.grain = grain;
                    self._checkInput();
                }
            });
            confirmDlg.open(true);
            setTimeout(function () {
                Mojo.utils.center(confirmDlg.element());
            }, 100);
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('force', 'share_grain')
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ErrorDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ErrorDialog";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-errdlg');
            var self = this;
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            this._content.html(this._options.errorMsg);
        },
        _addHandleButtons: function () {
            var self = this;
            this._footer.append((new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('ui', 'Close'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: 'Error',
                errorCode: 0,
                errorMsg: '',
                handle: $.noop,
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.TipsDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.TipsDialog";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-tipsdlg');
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            var self = this;
            self._message = $('<div class="paragraph"></div>').html(self._options.message).appendTo(this._content);
        },
        _addHandleButtons: function () {
            var self = this;
            this._footer.append((new Mojo.ui.Button('close-btn', {
                special: 'button-big-red',
                text: Mojo.utils.locale('ui', '确定'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('common', 'tips'),
                message: '',
                zIndex: 1100,
                deviceaware: true
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.HandleDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.HandleDialog";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-tipsdlg');
            this._addContent();
            this._addHandleButtons();
        },
        setAlertMessage: function (msg) {
            if (undefined === this._alertMessage) {
                this._alertMessage = $('<div class="paragraph alert-message"></div>').appendTo(this._content);
            }
            this._alertMessage.html(msg);
        },
        _addContent: function () {
            var self = this;
            this._message = $('<div class="paragraph"></div>').html(self._options.message).appendTo(this._content);
            if (this._options.alertMessage) {
                this._alertMessage = $('<div class="paragraph alert-message"></div>').html(self._options.alertMessage).appendTo(this._content);
            }
        },
        _addHandleButtons: function () {
            var self = this;
            if (this._options.btn1 != null) {
                this._footer.append((new Mojo.ui.Button(undefined, {
                    special: 'button-big-red',
                    text: self._options.btn1,
                    click: function () {
                        self._options.handle1();
                        self.close();
                    },
                })).element());
            }
            if (this._options.btn2 != null) {
                this._footer.append((new Mojo.ui.Button(undefined, {
                    text: self._options.btn2,
                    click: function () {
                        self._options.handle2();
                        self.close();
                    },
                })).element());
            }
            if (this._options.btn1 == null || this._options.btn2 == null) {
                this._footer.append((new Mojo.ui.Button('close-btn', {
                    text: Mojo.utils.locale('common', 'close'),
                    click: function () {
                        self.close();
                    },
                    special: (self._options.btn1 == null && self._options.btn2 == null) ? 'button-big-red' : '',
                })).element());
            }
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('common', 'tips'),
                btn1: null,
                btn2: null,
                handle1: $.noop,
                handle2: $.noop,
                message: '',
                alertMessage: undefined,
                zIndex: 1100,
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.Goods = w.Mojo.Object.extend({
        clsname: function () {
            return "com.Goods";
        },
        init: function (data, options) {
            this._data = data;
            this._super('goods-' + data.id, options);
            this.element().addClass("mojo-com-goods").addClass("box-inner");
            this._goButtonLabelCat = options.goButtonLabelCat || 'common';
            this._goButtonLabelKey = options.goButtonLabelKey || 'buy';
            this._buyWarningTitleCat = options.buyWarningTitleCat || 'mall';
            this._buyWarningTitleKey = options.buyWarningTitleKey || 'buy_warning_title';
            this._buyWarningCat = options.buyWarningCat || 'mall';
            this._buyWarningKey = options.buyWarningKey || 'buy_warning_content';
            this._buyButtonLabelCat = options.buyButtonLabelCat || 'mall';
            this._buyButtonLabelKey = options.buyButtonLabelKey || 'sure_buy';
            this._levelInfo = options.levelInfo;
            this.hasColdDown = options.hasColdDown;
            this._coldDownWarning = options.coldDownWarning;
            this._forceBossWarning = options.forceBossWarning;
            this._exchangeClass = (options.exchangeClass != undefined ? options.exchangeClass : 'go-buy-btn');
            if (this._data.mallTypeId == 1 || this._data.mallTypeId == 2) {
                this._exchangeClass = '';
            }
            this._card = undefined;
            this.element().append('<div class="goods-detail"></div>');
            var self = this;
            if (this._data.bought && parseInt(this._data.bought) == 1) {
                var text = Mojo.utils.locale('mall', 'has_buy');
                if (data.entity && data.entity.type_id && Mojo.utils.isWhat(data.entity.type_id, 'minis')) {
                    text = Mojo.utils.locale('mall', 'has_do');
                }
                this._hasbuy = $("<div class = 'has-buy'></div>").html(text);
                this.element().append(this._hasbuy);
            } else {
                var btnTitle = null;
                if (this._data.mallTypeId == 1 || this._data.mallTypeId == 2) {
                    function getBtnTitle(localeKey, rm) {
                        var btnDiv = $('<div class="niuyige-btn"></div>');
                        btnDiv.append($('<div class="t"></div>').html(Mojo.utils.locale('mall', localeKey)));
                        btnDiv.append($('<div class="price"><span class="icon"></span><span class="price-value"></span></div>'));
                        btnDiv.find('.price-value').html(rm);
                        return btnDiv;
                    }
                    var extType = this._data.extType;
                    if (extType != 0) {
                        $('<div class="shilianniu-content"></div>').html(this._data.extContent).appendTo(this.element());
                        this._shilianButton = new Mojo.ui.Button(undefined, {
                            text: getBtnTitle('shilianchou', this._data.extRm),
                            classes: ['shilian-button'],
                            special: "button-big-red",
                            click: function () {
                                self.shilianBtnClick = true;
                                self._clickBuyBtn();
                            }
                        });
                        this.element().append(this._shilianButton.element());
                    }
                    btnTitle = getBtnTitle('niuyige', this._data.rm);
                } else {
                    btnTitle = Mojo.utils.locale(self._goButtonLabelCat, self._goButtonLabelKey);
                }
                this._goButton = new Mojo.ui.Button(undefined, {
                    text: btnTitle,
                    click: function () {
                        if (self._data.id == 'sp0105' || self._data.id == 'sp0107' || self._data.id == 'sp1111' || self._data.id == 'sp2222') {
                            self._goodsBatchBuyBtnClick();
                        } else {
                            self.shilianBtnClick = false;
                            self._clickBuyBtn();
                        }
                    },
                    disableClick: function () {
                        var status = parseInt(self._data.status || Mojo.utils.getSomething("gstatus"));
                        if (status == 5) {
                            Mojo.app.toast.show(self._forceBossWarning);
                        } else {
                            if (self.hasColdDown && self.cd && self.cd > 0) {
                                Mojo.app.toast.show(self._coldDownWarning);
                            } else if (self._levelInfo) {
                                Mojo.app.toast.show(self._levelInfo.warning);
                            }
                        }
                    },
                    special: self._exchangeClass
                });
                this.element().append(this._goButton.element());
                if (this._data.mallTypeId == 1 || this._data.mallTypeId == 2) {
                    this._goButton.element().addClass('niuyige-button');
                } else {
                    this._goButton.element().addClass('go-button');
                }
                var status = parseInt(self._data.status || Mojo.utils.getSomething("gstatus"));
                if (status == 5) {
                    if (parseInt(this._data.cold_down) < 0) {
                        this._goButton.disable(true);
                    }
                } else {
                    if (this._levelInfo && this._levelInfo.level < this._levelInfo.unlockLevel) {
                        this._goButton.disable(true);
                    }
                }
            }
            this._setCard();
            this._setDetail();
            this._setAdvertising();
            this._initEvent();
        },
        _goodsBatchBuyBtnClick: function () {
            var self = this;
            var discount = parseInt((self._data.discount ? self._data.discount : 100));
            var price = self._data.vm;
            var dlg = new Mojo.com.GoodsBatchBuyDlg({
                title: Mojo.utils.locale(self._buyWarningTitleCat, self._buyWarningTitleKey),
                vm: self._options.getPlayerVm(),
                price: parseInt((discount * price) / 100),
                onBuy: function (count) {
                    if (self._options.type == "secret_treasure") {
                        self._options.onBuy(count, self);
                    } else {
                        self._options.onBuy(count, undefined, self);
                    }
                },
                deviceaware: true
            });
            dlg.open();
        },
        _clickBuyBtn: function () {
            var self = this;
            var buyWarningDialog = new Mojo.ui.Dialog(undefined, {
                title: Mojo.utils.locale(self._buyWarningTitleCat, self._buyWarningTitleKey),
                content: $('<div class="tip">' + Mojo.utils.locale(self._buyWarningCat, self._buyWarningKey) + '</div>'),
                deviceaware: true
            });
            new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale(self._buyButtonLabelCat, self._buyButtonLabelKey),
                special: "button-big-red",
                click: function () {
                    buyWarningDialog.close();
                    if (self._options.onBuy instanceof Function) {
                        if (self._options.type == "secret_treasure") {
                            self._options.onBuy(undefined, self);
                        } else if (self._data.mallTypeId == 1 || self._data.mallTypeId == 2) {
                            self._options.onBuy(undefined, self.shilianBtnClick == true, self);
                        } else {
                            self._options.onBuy(undefined, '2', self);
                        }
                    }
                }
            }).element().appendTo(buyWarningDialog._footer);
            new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'think_again'),
                special: 'button-big-blue',
                click: function () {
                    buyWarningDialog.close();
                }
            }).element().appendTo(buyWarningDialog._footer);
            buyWarningDialog.open();
        },
        _setCard: function () {
            var self = this;
            new Mojo.com.SmallEntity(this._data.entity, {
                callback: function (card) {
                    self._card = card;
                    card.element().addClass("image").prependTo(self.element());
                }
            });
        },
        _setDetail: function () {
            var self = this;
            $('<div></div>').addClass("goods-name").html(this._data.name).appendTo(this.element().find('.goods-detail'));
            $('<div></div>').addClass("goods-description").html(this._data.description).appendTo(this.element().find('.goods-detail'));
            if (this._data.endTime > 0) {
                var _date = new Date(parseInt(this._data.endTime * 1000));
                var dateTime = parseInt(_date.getMonth() + 1) + Mojo.utils.locale('common', 'month') + _date.getDate() + Mojo.utils.locale('common', 'dday');
                var _hour = _date.getHours();
                var _min = _date.getMinutes();
                if (_hour < 10) {
                    _hour = '0' + _hour;
                }
                if (_min < 10) {
                    _min = '0' + _min;
                }
                dateTime += "  " + _hour + ":" + _min;
                var str = Mojo.utils.locale('mall', 'mall_endtime', {
                    endtime: dateTime
                });
                $('<div></div>').addClass("goods-description").html(str).appendTo(this.element().find('.goods-detail'));
            }
            if (this._levelInfo) {
                $('<div></div>').addClass("level-info").appendTo(this.element().find('.goods-detail'));
                $('<div></div>').addClass("level-title").html(this._levelInfo.title).appendTo(this.element().find('.level-info'));
                $('<div></div>').addClass("level-number").html(this._levelInfo.unlockLevel).appendTo(this.element().find('.level-info'));
            }
            var params = {};
            if (self._options.priceTitle != undefined) {
                params.priceTitle = self._options.priceTitle;
            }
            if (this._data.mallTypeId != 1 && this._data.mallTypeId != 2) {
                (new Mojo.com.Price(this._data, params)).element().appendTo(this.element().find(".goods-detail"));
            }
            if (this.hasColdDown && this._data.cold_down && this._data.cold_down > 0) {
                this.cd = this._data.cold_down;
                this.showCd();
            }
        },
        getDataId: function () {
            return this._data.id;
        },
        showCd: function () {
            var self = this;
            if (self.cd == undefined || self.cd == 0) return;
            this._goButton.disable(true);
            if (!self._lblCd) {
                self._lblCd = new Mojo.ui.Label(undefined, {
                    text: '',
                    classes: ['cd', 'text-red'],
                });
                self._lblCd.element().appendTo(self.element().find('.goods-detail'));
            }
            self._lblCd.text(Mojo.utils.locale('common', 'in_cd') + self._formatCDTime(self.cd));
            self._lblCd.show();
            self._interval = w.setInterval(function () {
                if (self.cd != undefined && self.cd > 1) {
                    self.cd--;
                    self._lblCd.text(Mojo.utils.locale('common', 'in_cd') + self._formatCDTime(self.cd));
                } else {
                    self.cd = 0;
                    w.clearInterval(self._interval);
                    self._goButton.disable(false);
                    self._lblCd.hide();
                }
            }, 1000);
        },
        disableButton: function () {
            this._goButton.disable(true);
        },
        _formatCDTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
        _setAdvertising: function () {
            var status = parseInt(this._data.status || Mojo.utils.getSomething("gstatus"));
            var advertising = "";
            var advertisingStyle = "";
            if (status == 1) {
                advertisingStyle = "new-goods-flag";
                advertising = Mojo.utils.locale("mall", 'new_goods_flag');
            } else if (status == 2) {
                advertisingStyle = "hot-goods-flag";
                advertising = Mojo.utils.locale("mall", 'hot_goods_flag');
            } else if (status == 3 && parseInt(this._data.discount) < 100) {
                advertisingStyle = "discount-goods-flag";
                advertising = Mojo.utils.locale("mall", 'discount_goods_flag_new', {
                    discount: parseInt(this._data.discount) / 10
                });
            } else if (status == 5 && parseInt(this._data.discount) < 100) {
                advertisingStyle = "discount-goods-flag";
                advertising = Mojo.utils.locale("mall", 'discount_goods_flag_new', {
                    discount: parseInt(this._data.discount) / 10
                });
            } else if (status == 6) {
                advertisingStyle = "hot-goods-flag";
                advertising = Mojo.utils.locale("mall", 'hot_goods_flag');
            }
            if (status > 0) {
                $('<div class="goods-advertising"></div>').addClass(advertisingStyle).html(advertising).appendTo(this.element());
            }
        },
        updateGoButtonStatus: function (level) {
            if (level >= this._levelInfo.unlockLevel) {
                this._goButton.disable(false);
            }
        },
        _getDefaultOptions: function () {
            return {
                click: undefined,
                onBuy: undefined
            };
        },
        _initEvent: function () {
            var self = this;
            this._card.element().bind("click", function () {
                if (self._options.click instanceof Function) {
                    if (self._options.type == "secret_treasure") {
                        self._options.click(self);
                    } else {
                        self._options.click();
                    }
                }
            });
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.Entity = w.Mojo.Object.extend({
        clsname: function () {
            return "com.Entity";
        },
        init: function (id, data, options) {
            this.data = data;
            this._super(id, options);
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.LargeEffortEntityDialog = Mojo.com.CommonDialog.extend({
        init: function (data, options) {
            this._data = data;
            this._super(data, options);
            this.element().addClass('mojo-com-LargeEffortEntityDialog');
            this._load();
        },
        _load: function () {
            var url = '';
            if (this._options.subType == 0) {
                url = '/illustration/achievementSkillDetail';
            } else if (this._options.subType == 1) {
                url = '/illustration/achievementExchangeDetail';
            }
            var self = this;
            self._ajaxAchievementBalaBala(url, function (result) {
                self.detailData = result.data;
                self._addEffortName();
                self._addEffortContent();
                self._addEffortReward();
                self._addEffortButton();
                self.open();
            }, function (result) {
                Mojo.app.toast.show(result.errorMsg);
            });
        },
        _addEffortName: function () {
            var n = this.detailData.name;
            var name = $('<div class="effortname"></div>').appendTo(this._content);
            $('<div class="name"></div>').html(n).appendTo(name);
            $('<img class="icon">').attr({
                src: this.detailData.large_image
            }).appendTo(name);
        },
        _addEffortContent: function () {
            var _description = this.detailData.description;
            var _illustrations = this.detailData.illustrations;
            var description = $('<div class="description"></div>').html(Mojo.utils.locale('entity', 'introduction')).appendTo(this._content);
            $('<div class="des"></div>').html(_description).appendTo(description);
            var lightEntity = $('<div class="light-entity"></div>').html('<div>' + Mojo.utils.locale('illustration', 'effort_light') + '</div>');
            lightEntity.appendTo(description);
            var str = '<ul class="effort-name">';
            for (var i = 0; i < _illustrations.length; i++) {
                var ele = '';
                var item = _illustrations[i];
                var name = item.name;
                var status = item.status;
                if (status == 1) {
                    ele = '<li class="light">' + name + '</li>';
                } else {
                    ele = '<li>' + name + '</li>';
                }
                str += ele;
                var x = (i + 1) % 4;
                if (x == 0) {
                    str += '</ul><ul class="effort-name">';
                }
            }
            str += '</ul>';
            lightEntity.append($(str));
        },
        _addEffortReward: function () {
            var reward = $('<div class="reward-content"></div>').appendTo(this._content);
            var leftTitle = $('<div class="left-title"></div>').appendTo(reward);
            var content = $('<div class="content"></div>').appendTo(reward);
            var topTitle = $('<div class="top-title"></div>').appendTo(content);
            var desc = (this._options.subType == 0) ? this.detailData.rewards.description : (this.detailData.status == 2 ? Mojo.utils.locale('illustration', 'effort_getReward') : Mojo.utils.locale('illustration', 'effort_rewardtitle'));
            topTitle.html(desc);
            for (var i = 0; i < this.detailData.rewards.entity.length; i++) {
                var d = this.detailData.rewards.entity[i];
                var itemEle = $('<div class="itemEle mojo-com-entity-small"></div>').appendTo(content);
                itemEle.append($('<img class="entity-icon">').attr({
                    src: d.small_image
                }));
                var d_detail = d.entities;
                if (d_detail) {
                    itemEle.append($('<div class="minis-flag"></div>'));
                    d_detail = d_detail[0];
                    this.rarity_id = d_detail.rarity_id;
                    this._setMinisFlag(d_detail);
                }
                itemEle.append($('<div class="name"></div>').html(d.name));
                if (this._options.subType == 1) {
                    itemEle.append($('<div class="count"></div>').html(d.count));
                }
            }
        },
        _setMinisFlag: function (d) {
            if (d && d.type_id && Mojo.utils.isWhat(d.type_id, "minis")) {
                if (Mojo.utils.isWhat(d.entity_type_id, "general")) {
                    this.element().find(".minis-flag").addClass('minis-flag-type-gp-' + d.entity_group_id).show();
                } else {
                    this.element().find(".minis-flag").addClass('minis-flag-type-' + d.entity_type_id).show();
                }
            } else {
                this.element().find(".minis-flag").hide();
            }
        },
        _addEffortButton: function () {
            var status = this.detailData.status;
            var subType = this._options.subType;
            var t = '';
            this._options.leftBtnText = '';
            if (subType == 0) {
                switch ("" + status) {
                case '0':
                    this._options.leftBtnDisabled = true;
                    t = Mojo.utils.locale('illustration', 'effort_active');
                    t += '<div class="star"><span class="star-icon"></span><span>' + this.detailData.star + '</span></div>';
                    break;
                case '1':
                    t = Mojo.utils.locale('illustration', 'effort_active');
                    t += '<div class="star"><span class="star-icon"></span><span>' + this.detailData.star + '</span></div>';
                    break;
                case '2':
                    t = '<div class="cancel-active">' + Mojo.utils.locale('illustration', 'effort_cancel_active') + '</div>';
                    t += '<div class="rm-count"><span class="rm"></span><span>' + this.detailData.rm + '</span></div>';
                    break;
                }
            } else if (subType == 1) {
                switch ("" + status) {
                case '0':
                    this._options.leftBtnDisabled = true;
                    t = Mojo.utils.locale('illustration', 'effort_get');
                    break;
                case '1':
                    t = Mojo.utils.locale('illustration', 'effort_get');
                    break;
                case '2':
                    break;
                }
            }
            this._options.leftBtnText = t;
            this._options.rightBtnText = Mojo.utils.locale('common', 'close');
            var self = this;
            this._options.leftBtnDisabledClick = function () {
                self.leftBtnDisabledClick();
            };
            this._options.leftBtnClick = function () {
                self.leftBtnClick();
            };
            this._options.rightBtnClick = function () {
                self.close();
            };
            this._addButtons();
        },
        leftBtnClick: function () {
            var status = this.detailData.status;
            var subType = this._options.subType;
            if (subType == 0) {
                switch ("" + status) {
                case '0':
                    break;
                case '1':
                    this._active();
                    break;
                case '2':
                    this._cancelActive();
                    break;
                }
            } else if (subType == 1) {
                switch ("" + status) {
                case '0':
                    break;
                case '1':
                    this._get();
                    break;
                case '2':
                    break;
                }
            }
        },
        _active: function () {
            var self = this;
            var content = $('<div class="paragraph"></div>').html(Mojo.utils.locale('illustration', 'effort_activeContent', {
                star: this.detailData.star,
                name: this.detailData.name
            }));
            var dlg = new Mojo.com.CommonDialog(undefined, {
                title: Mojo.utils.locale('illustration', 'effort_activeConfirm'),
                content: content,
                leftBtnText: Mojo.utils.locale('common', 'ok'),
                rightBtnText: Mojo.utils.locale('common', 'cancel'),
                leftBtnClick: function () {
                    dlg.hide();
                    self._ajaxAchievementBalaBala('/illustration/achievementSkillEnable', function () {
                        var dlg2 = new Mojo.com.CommonDialog('achievementSkillEnableOk', {
                            title: Mojo.utils.locale('illustration', 'effort_activeOk'),
                            content: $('<div class="paragraph"></div>').html(Mojo.utils.locale('illustration', 'effort_activeOkContent', {
                                name: self.detailData.name
                            })),
                            leftBtnText: Mojo.utils.locale('common', 'ok'),
                            leftBtnClick: function () {
                                self.close();
                                dlg.close();
                                dlg2.close();
                            },
                            close: function () {
                                self.close();
                                dlg.close();
                            }
                        });
                        dlg2.open(true);
                        self._options.refresh();
                    }, function () {
                        var dlg3 = new Mojo.com.CommonDialog(undefined, {
                            title: Mojo.utils.locale('illustration', 'effort_activeFaild'),
                            content: $('<div class="paragraph"></div>').html(Mojo.utils.locale('illustration', 'effort_activeFaildContent')),
                            leftBtnText: Mojo.utils.locale('common', 'ok'),
                            leftBtnClick: function () {
                                self.close();
                                dlg.close();
                                dlg3.close();
                            },
                            close: function () {
                                self.close();
                                dlg.close();
                            }
                        });
                        dlg3.open(true);
                    });
                },
                rightBtnClick: function () {
                    dlg.close();
                },
                close: function () {
                    self.element().show();
                }
            });
            this.element().hide();
            dlg.open(true);
        },
        _cancelActive: function () {
            var self = this;
            var content = $('<div class="paragraph"></div>').html(Mojo.utils.locale('illustration', 'effort_cancel_activeContent', {
                rm: this.detailData.rm,
                name: this.detailData.name
            }));
            var dlg = new Mojo.com.CommonDialog(undefined, {
                title: Mojo.utils.locale('illustration', 'effort_cancel_active'),
                content: content,
                leftBtnText: Mojo.utils.locale('common', 'ok'),
                rightBtnText: Mojo.utils.locale('common', 'cancel'),
                leftBtnClick: function () {
                    dlg.hide();
                    self._ajaxAchievementBalaBala('/illustration/achievementSkillDisable', function (result) {
                        var dlg2 = new Mojo.com.CommonDialog('achievementSkillDisableOk', {
                            title: Mojo.utils.locale('illustration', 'effort_cancel_activeOk'),
                            content: $('<div class="paragraph"></div>').html(Mojo.utils.locale('illustration', 'effort_cancel_activeOkContent', {
                                name: self.detailData.name,
                                star: result.data.star
                            })),
                            leftBtnText: Mojo.utils.locale('common', 'ok'),
                            leftBtnClick: function () {
                                self.close();
                                dlg.close();
                                dlg2.close();
                            },
                            close: function () {
                                self.close();
                                dlg.close();
                            }
                        });
                        dlg2.open(true);
                        self._options.refresh();
                    }, function (result) {
                        if (result.errorCode == 10005) {
                            var dlg3 = new Mojo.com.CommonDialog(undefined, {
                                title: Mojo.utils.locale('illustration', 'effort_cancel_activeFaild'),
                                content: $('<div class="paragraph"></div>').html(Mojo.utils.locale('illustration', 'effort_cancel_activeFaildContent')),
                                leftBtnText: Mojo.utils.locale('common', 'go_payment'),
                                leftBtnClick: function () {
                                    Mojo.app.redirect('/newmall', {
                                        selected: 5
                                    });
                                },
                                rightBtnText: Mojo.utils.locale('common', 'close'),
                                rightBtnClick: function () {
                                    self.close();
                                    dlg.close();
                                    dlg3.close();
                                },
                                close: function () {
                                    self.close();
                                    dlg.close();
                                }
                            });
                            dlg3.open(true);
                        } else {
                            Mojo.app.toast.show(result.errorMsg);
                        }
                    });
                },
                rightBtnClick: function () {
                    dlg.close();
                },
                close: function () {
                    self.element().show();
                }
            });
            this.element().hide();
            dlg.open(true);
        },
        _get: function () {
            var self = this;
            self._ajaxAchievementBalaBala('/illustration/achievementExchange', function (result) {
                self.close();
                var content = $('<div class="paragraph"></div>').html(Mojo.utils.locale('illustration', 'effort_getOkContent'));
                var itemContent = $('<div class="itemContent"></div>').appendTo(content);
                $.each(result.data, function (i, d) {
                    if (d.name != undefined) {
                        var itemEle = $('<div class="itemEle"></div>').appendTo(itemContent);
                        itemEle.append($('<img class="entity-icon">').attr({
                            src: d.small_image
                        }));
                        itemEle.append($('<div class="name"></div>').html(d.name));
                        itemEle.append($('<div class="count"></div>').html(d.count));
                    } else if ($.isArray(d) && d.length > 0) {
                        $.each(d, function (j, k) {
                            var itemEle = $('<div class="itemEle"></div>').appendTo(itemContent);
                            itemEle.append($('<img class="entity-icon">').attr({
                                src: k.small_image
                            }));
                            itemEle.append($('<div class="name"></div>').html(k.name));
                            itemEle.append($('<div class="count"></div>').html(k.count));
                        });
                    }
                });
                var dlg = new Mojo.com.CommonDialog('achievementExchangeOk', {
                    title: Mojo.utils.locale('illustration', 'effort_getOk'),
                    content: content,
                    leftBtnText: Mojo.utils.locale('common', 'ok'),
                    leftBtnClick: function () {
                        dlg.close();
                    },
                    close: function () {
                        self._options.refresh();
                    }
                });
                if (self.rarity_id) {
                    Mojo.gap.niudanAnimationPlay(function () {
                        dlg.open();
                    });
                } else {
                    dlg.open();
                }
            }, function (result) {
                Mojo.app.toast.show(result.errorMsg);
            });
        },
        _ajaxAchievementBalaBala: function (url, callback, callbackErr) {
            var self = this;
            Mojo.ajax(url, {
                id: self._options.id
            }, function (result) {
                if (result.errorCode == 0) {
                    if (callback && callback instanceof Function) {
                        callback(result);
                    }
                } else {
                    if (callbackErr && callbackErr instanceof Function) {
                        callbackErr(result);
                    }
                }
            }, function () {}, {
                showWait: true
            });
        },
        leftBtnDisabledClick: function () {
            var status = this.detailData.status;
            var subType = this._options.subType;
            if (subType == 0) {
                switch ("" + status) {
                case '0':
                    Mojo.app.toast.show(Mojo.utils.locale('illustration', 'effort_notlight'));
                    break;
                case '1':
                    break;
                case '2':
                    break;
                }
            } else if (subType == 1) {
                switch ("" + status) {
                case '0':
                    Mojo.app.toast.show(Mojo.utils.locale('illustration', 'effort_notget'));
                    break;
                case '1':
                    break;
                case '2':
                    break;
                }
            }
        }
    });
    w.Mojo.com.LargeEntity = w.Mojo.com.Entity.extend({
        clsname: function () {
            return "com.LargeEntity";
        },
        init: function (data, options) {
            this._super(undefined, data, options);
            this._entityEffectText = {
                "attack_max": {
                    text: Mojo.utils.locale('largeentity', 'attack'),
                    unit: ""
                },
                "attack_min": {
                    text: Mojo.utils.locale('largeentity', 'attack'),
                    unit: ""
                },
                "defence_max": {
                    text: Mojo.utils.locale('largeentity', 'defence'),
                    unit: ""
                },
                "defence_min": {
                    text: Mojo.utils.locale('largeentity', 'defence'),
                    unit: ""
                },
                "xp_value": {
                    text: Mojo.utils.locale('largeentity', 'effect_xp'),
                    unit: ""
                },
                "xp_percent": {
                    text: Mojo.utils.locale('largeentity', 'effect_xp'),
                    unit: "%"
                },
                "rm_value": {
                    text: Mojo.utils.locale('largeentity', 'effect_rm'),
                    unit: ""
                },
                "rm_percent": {
                    text: Mojo.utils.locale('largeentity', 'effect_rm'),
                    unit: "%"
                },
                "vm_value": {
                    text: Mojo.utils.locale('largeentity', 'effect_vm'),
                    unit: ""
                },
                "vm_percent": {
                    text: Mojo.utils.locale('largeentity', 'effect_vm'),
                    unit: "%"
                },
                "ep_percent": {
                    text: Mojo.utils.locale('largeentity', 'effect_ep'),
                    unit: "%"
                },
                "sp_percent": {
                    text: Mojo.utils.locale('largeentity', 'effect_sp'),
                    unit: "%"
                },
                "max_attack_percent": {
                    text: Mojo.utils.locale('largeentity', 'effect_max_attack_pro'),
                    unit: "%"
                },
                "max_defence_percent": {
                    text: Mojo.utils.locale('largeentity', 'effect_max_defence_pro'),
                    unit: "%"
                },
                "attack_max_percent": {
                    text: Mojo.utils.locale('largeentity', 'effect_max_attack'),
                    unit: "%"
                },
                "attack_min_percent": {
                    text: Mojo.utils.locale('largeentity', 'effect_min_attack'),
                    unit: "%"
                },
                "defence_max_percent": {
                    text: Mojo.utils.locale('largeentity', 'effect_max_defence'),
                    unit: "%"
                },
                "defence_min_percent": {
                    text: Mojo.utils.locale('largeentity', 'effect_min_defence'),
                    unit: "%"
                }
            };
            this.element().addClass('mojo-com-entity-large');
            this._row1 = $('<div class="row"><div class="picture"></div></div>').appendTo(this.element());
            if (typeof data == 'string') {
                var self = this;
                Mojo.ajax("/entity/detail", {
                    id: data,
                    pid: this._options.pid,
                    eid: this._options.eid,
                    rebirth_count: this._options.rebirthCount,
                }, function (response) {
                    if (response && response.errorCode === 0) {
                        self.data = response.data;
                        self._setPicture();
                        self._refresh();
                    } else {
                        self.data = undefined;
                    }
                    if (self._options.callback instanceof Function) {
                        self._options.callback(self);
                    }
                }, function () {
                    self.data = undefined;
                    if (self._options.callback instanceof Function) {
                        self._options.callback(self);
                    }
                });
            } else if (typeof data == 'object') {
                this._setPicture();
                this._refresh();
                if (this._options.callback instanceof Function) {
                    this._options.callback(this);
                }
            }
        },
        _getEntityEffectText: function () {
            for (var eattr in this._entityEffectText) {
                if (this.data[eattr] && this.data[eattr] > 0) {
                    return this._entityEffectText[eattr].text + this.data[eattr] + this._entityEffectText[eattr].unit;
                }
            }
            return "";
        },
        _setEntityEffectText: function () {
            if (this._options.showEntityEffect) {
                this._skills.append('<div class="paragraph">' + this._getEntityEffectText() + '</div>');
            }
        },
        _setPicture: function () {
            if (this._options.showDescription) {
                this._description = $('<div class="description mojo-com-entity-large--row--description">' + Mojo.utils.locale('ui', 'Introduction') + ':<br>' + this.data.description + '</div>').appendTo(this._row1);
            }
            this._skills = $('<div class="row skills"></div>').hide().appendTo(this.element());
            if (this._options.showSkill) {
                this._skills.show();
            }
            this._row1.find('.picture').append('<img src="' + this.data.large_image + '" class="mojo-com-entity-large--row--img">').append('<div class="border"></div>').append('<div class="name mojo-com-entity-large--row--picture--name">' + this.data.name + '</div>').append('<div class="type"></div>').append('<div class="attributes mojo-com-entity-large--row--picture--attributes"></div>');
            this._row1.find('.picture > .name').addClass('rebirth-' + (this.data.rebirth_sum > 6 ? 6 : this.data.rebirth_sum));
        },
        _addAttributes: function () {
            if (parseInt(this.data.type_id) != 7 && parseInt(this.data.type_id) != 8 && parseInt(this.data.type_id) != 22 && this.data.level > 0) {
                this._row1.find('.attributes').append((this._xpProgress = new Mojo.ui.Progress(undefined, {
                    value: this.data.xp,
                    max: this.data.next_xp,
                    labelTemplate: '',
                    classes: ['mojo-com-entity-large--row--picture--attributes--mojo-ui-progress']
                })).element()).append('<div class="level mojo-com-entity-large--row--picture--attributes--level">' + this.data.level + '</div>');
            }
            this._effects = $('<div class="effects mojo-com-entity-large--row--picture--attributes--effects"></div>').appendTo(this._row1.find('.attributes'));
            this.data.attack_max = parseInt(this.data.attack_max);
            this.data.attack_min = parseInt(this.data.attack_min);
            this.data.defence_max = parseInt(this.data.defence_max);
            this.data.defence_min = parseInt(this.data.defence_min);
            if (Mojo.utils.isWhat(this.data.type_id, "general")) {
                if (this.data.attack_max > 0) {
                    if (this.data.attack_max < this.data.attack_min) this.data.attack_max = this.data.attack_min;
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-attack', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.attack_min + '-' + this.data.attack_max,
                    })).element());
                }
                if (this.data.defence_max > 0) {
                    if (this.data.defence_max < this.data.defence_min) this.data.defence_max = this.data.defence_min;
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-defence', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.defence_min + '-' + this.data.defence_max,
                    })).element());
                }
            } else {
                if (this.data.attack_max > 0) {
                    if (this.data.attack_max < this.data.attack_min) this.data.attack_max = this.data.attack_min;
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-attack', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.attack_min + '-' + this.data.attack_max,
                    })).element());
                }
                if (this.data.defence_max > 0) {
                    if (this.data.defence_max < this.data.defence_min) this.data.defence_max = this.data.defence_min;
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-defence', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.defence_min + '-' + this.data.defence_max,
                    })).element());
                }
                if (this.data.xp_percent > 0) {
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-xp', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.xp_percent + '%',
                    })).element());
                }
                if (this.data.ep_percent > 0) {
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-ep', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.ep_percent + '%',
                    })).element());
                }
                if (this.data.sp_percent > 0) {
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-sp', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.sp_percent + '%',
                    })).element());
                }
                if (this.data.vm_percent > 0) {
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-vm', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.vm_percent + '%',
                    })).element());
                }
                if (this.data.max_attack_percent > 0) {
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-max-attack-percent', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.max_attack_percent + '%',
                    })).element());
                }
                if (this.data.max_defence_percent > 0) {
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-max-defence-percent', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.max_defence_percent + '%',
                    })).element());
                }
                if (this.data.attack_max_percent > 0) {
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-attack-max-percent', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.attack_max_percent + '%',
                    })).element());
                }
                if (this.data.attack_min_percent > 0) {
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-attack-min-percent', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.attack_min_percent + '%',
                    })).element());
                }
                if (this.data.defence_max_percent > 0) {
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-defence-max-percent', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.defence_max_percent + '%',
                    })).element());
                }
                if (this.data.defence_min_percent > 0) {
                    this._effects.append((new Mojo.ui.Label(undefined, {
                        classes: ['effect-defence-min-percent', 'mojo-com-entity-large--row--picture--attributes--mojo-ui-label'],
                        text: this.data.defence_min_percent + '%',
                    })).element());
                }
            }
        },
        _refresh: function () {
            if (parseInt(this.data.type_id) === 7 || parseInt(this.data.type_id) === 8 || parseInt(this.data.type_id) === 22) {
                this._row1.find('.picture').addClass('bg-level-other').addClass('mojo-com-entity-large--row--picture');
            } else {
                this._row1.find('.picture').addClass('bg-level-' + (parseInt((this.data.level - 1) / 10) + 1)).addClass('mojo-com-entity-large--row--picture');
            }
            this._row1.find('.picture > .rarity').addClass('star-rarity-' + this.data.rarity_id);
            this._row1.find('.picture > .border').addClass('border-rarity-' + (this.data.rarity_id ? this.data.rarity_id : "other")).addClass("mojo-com-entity-large--row--picture--border");
            if (this.data.group_id_1) {
                this._row1.find('.picture > .type').addClass('type-gp-' + this.data.group_id_1).addClass('type-gp-' + this.data.group_id_1 + '-' + Mojo.app.data.userLanguage).addClass("mojo-com-entity-large--row--picture--type").addClass("mojo-com-entity-large--row--picture--type" + '-' + Mojo.app.data.userLanguage);
            } else {
                var typeid = this.data.type_id;
                if (parseInt(typeid) === 22)
                    typeid = 7;
                this._row1.find('.picture > .type').addClass('type-' + typeid).addClass("mojo-com-entity-large--row--picture--type").addClass("mojo-com-entity-large--row--picture--type" + '-' + Mojo.app.data.userLanguage);
            }
            if (Mojo.utils.isWhat(this.data.type_id, "minis")) {
                var minisFlag = $('<div></div>').addClass("minis-flag").addClass("minis-flag" + '-' + Mojo.app.data.userLanguage).appendTo(this._row1.find(".picture"));
                if (Mojo.utils.isWhat(this.data.entity_type_id, "general")) {
                    minisFlag.addClass('minis-flag-type-gp-' + this.data.entity_group_id).addClass('minis-flag-type-gp-' + this.data.entity_group_id + '-' + Mojo.app.data.userLanguage).show();
                } else {
                    minisFlag.addClass('minis-flag-type-' + this.data.entity_type_id).addClass('minis-flag-type-' + this.data.entity_type_id + '-' + Mojo.app.data.userLanguage).show();
                }
            }
            this._addAttributes();
            if (this._options.showSkill && this.data.skills) {
                var skills = "";
                for (var sid in this.data.skills) {
                    var skill = this.data.skills[sid];
                    skills += '<div class="paragraph">' + skill.description + '</div>';
                }
                this._skills.html(skills);
            }
            if (Mojo.utils.isWhat(this.data.type_id, "mounts") || Mojo.utils.isWhat(this.data.type_id, "treasure")) {
                this._setEntityEffectText();
            }
            this.refresh();
        },
        refresh: function () {
            if (typeof this.data == 'object') {
                if (this.data.is_max_level == 1) {
                    this._xpProgress.value(0);
                }
            }
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                pid: "",
                eid: "",
                rebirthCount: 0,
                callback: undefined,
                showSkill: false,
                showDescription: true,
                showEntityEffect: true
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.Price = w.Mojo.Object.extend({
        clsname: function () {
            return "com.Price";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass("mojo-com-goods-price");
            this.element().append('<div class="price-title"></div>');
            this.element().append('<div class="icon"></div>');
            this.element().append('<div class="before"></div>');
            this.element().append('<div class="now"></div>');
            this._refresh();
        },
        _refresh: function () {
            if (this._options.showTitle === true) {
                this.element().find(".price-title").html(this._options.priceTitle).show();
            } else {
                this.element().find(".price-title").hide();
            }
            var discount = ((this._data.discount ? this._data.discount : 100));
            var price = 0;
            if (this._data && this._data.money && parseInt(this._data.money) > 0) {
                this.element().find(".icon").removeClass("payment-money-price").removeClass("ppzhushou-money-price").removeClass("goods-vm-price").removeClass("goods-grain-price").removeClass("goods-rm-price");
                if (true === Mojo.gap.isPPZhushou) {
                    this.element().addClass("ppzhushou-money-price");
                } else {
                    this.element().addClass("payment-money-price");
                }
                price = this._data.money;
            } else if (this._data && this._data.rm && parseInt(this._data.rm) > 0) {
                this.element().find(".icon").removeClass("payment-money-price").removeClass("ppzhushou-money-price").removeClass("goods-vm-price").removeClass("goods-grain-price").removeClass("goods-rm-price").addClass("goods-rm-price");
                price = this._data.rm;
            } else if (this._data && this._data.vm && parseInt(this._data.vm) > 0) {
                this.element().find(".icon").removeClass("payment-money-price").removeClass("ppzhushou-money-price").removeClass("goods-vm-price").removeClass("goods-grain-price").removeClass("goods-rm-price").addClass("goods-vm-price");
                price = this._data.vm;
            } else if (this._data && this._data.grain && parseInt(this._data.grain) > 0) {
                this.element().find(".icon").removeClass("payment-money-price").removeClass("ppzhushou-money-price").removeClass("goods-vm-price").removeClass("goods-grain-price").removeClass("goods-rm-price").addClass("goods-grain-price");
                price = this._data.grain;
            } else {
                this.element().find('.icon').addClass('none');
            }
            if (discount < 100) {
                this.element().find(".before").html(price);
            }
            if (parseInt(this._data.rm) > 0 || parseInt(this._data.vm) > 0 || parseInt(this._data.grain) > 0 || parseInt(this._data.money) > 0) {
                this.element().find(".now").html(parseInt((discount * price) / 100));
            } else {
                this.element().find(".now").html(Mojo.utils.locale('props', 'priceless'));
            }
        },
        _getDefaultOptions: function () {
            return {
                showTitle: true,
                priceTitle: Mojo.utils.locale('common', 'price_title'),
            };
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceExchangeList = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceExchangeList";
        },
        init: function (id, options) {
            this._super('com-force-exchange-list', options);
            this.element().addClass('mojo-com-forceexchangelist');
            this._hasLoaded = false;
            this._lastSelected = undefined;
            this._level = this._options.level;
            this._dataList = [];
            this._goodsList = [];
            this.baseProfile = w.Mojo.page.Force.getController().getPlayerProfile();
            var self = this;
            var params = (this._options.type == 'exchange' ? {
                type: 0
            } : {
                basic: 0
            });
            this._list = new Mojo.ui.ListPanel(undefined, {
                pageSize: 20,
                scrollable: true,
                showMore: false,
                loadFunc: function (start, count) {
                    Mojo.ajax('/force/exchangelist', params, function (response) {
                        if (response && response.errorCode === 0) {
                            var dataList = null;
                            if (response.data.list && response.data.list.length > 0) {
                                dataList = [];
                                for (var i in response.data.list) {
                                    var item = response.data.list[i];
                                    if (!item.entities[0]) continue;
                                    for (var j in item.entities) {
                                        var entity = item.entities[j];
                                        dataList.push({
                                            'id': item.id,
                                            'unlock_level': item.unlock_level,
                                            'name': item.name,
                                            'description': item.description,
                                            'grain': item.grain,
                                            'discount': item.discount,
                                            'entity': entity,
                                            'status': item.status,
                                            'cold_down': item.cold_down,
                                            'rm': item.rm,
                                            'city': item.city
                                        });
                                    }
                                }
                            }
                            self._dataList = dataList;
                            self._list.appendData(dataList);
                        } else {
                            self._list.appendData(null);
                        }
                        self._options.callback(response.data);
                    }, function () {
                        self._list.appendData(null);
                    });
                },
                drawFunc: function (data) {
                    var goods = new Mojo.com.Goods(data, {
                        goButtonLabelCat: 'force',
                        goButtonLabelKey: 'exchange',
                        buyWarningTitleCat: 'force',
                        buyWarningTitleKey: 'exchange_warning_title',
                        buyWarningCat: 'force',
                        buyWarningKey: 'exchange_warning_content',
                        buyButtonLabelCat: 'force',
                        buyButtonLabelKey: 'sure_exchange',
                        priceTitle: (data.rm != undefined && parseInt(data.rm) != 0) ? Mojo.utils.locale('force', 'cost_rm') : Mojo.utils.locale('force', 'cost_grain'),
                        levelInfo: {
                            title: (data.status != undefined && (parseInt(data.status) == 5 || parseInt(data.status) == 6)) ? Mojo.utils.locale('force', 'force_boss_challenge_exchange_reason') : self.locale('require_force_level'),
                            unlockLevel: (data.status != undefined && parseInt(data.status) == 5) ? Mojo.utils.locale('force', 'force_boss_challenge_exchange_answer') : ((data.status != undefined && parseInt(data.status) == 6) ? Mojo.utils.locale('force', 'force_city_war_exchange_answer', {
                                city: data.city
                            }) : data.unlock_level),
                            level: self._level,
                            warning: self.locale('force_level_too_low')
                        },
                        hasColdDown: (data.status != undefined && parseInt(data.status) == 5) ? false : true,
                        coldDownWarning: self.locale('force_exchange_unavailable'),
                        forceBossWarning: self.locale('force_exchange_unavailable_forceboss'),
                        exchangeClass: 'go-exchange-btn',
                        onBuy: function () {
                            self._buyGoods(data);
                        },
                        click: function () {
                            var entityDialog = new Mojo.ui.Dialog(undefined, {
                                title: self.locale('exchange'),
                                content: (new Mojo.com.LargeEntity(data.entity)).element()
                            });
                            (new Mojo.com.Price(data, {
                                showTitle: true,
                            })).element().addClass('price-tip').insertBefore(entityDialog._footer);
                            var exchangeBtn = new Mojo.ui.Button(undefined, {
                                text: self.locale('exchange'),
                                special: 'button-bg-red',
                                click: function () {
                                    self._buyGoods(data);
                                    entityDialog.close();
                                },
                                disableClick: function () {
                                    if (data.status == 5) {
                                        Mojo.app.toast.show(self.locale('force_exchange_unavailable_forceboss'));
                                    } else {
                                        if (goods.hasColdDown && goods.cd && goods.cd > 0) {
                                            Mojo.app.toast.show(self.locale('force_exchange_unavailable'));
                                        } else if (goods._levelInfo) {
                                            Mojo.app.toast.show(self.locale('force_level_too_low'));
                                        }
                                    }
                                }
                            });
                            exchangeBtn.element().appendTo(entityDialog._footer);
                            var closeBtn = new Mojo.ui.Button(undefined, {
                                text: Mojo.utils.locale('common', 'close'),
                                special: 'button-bg-red',
                                click: function () {
                                    entityDialog.close();
                                }
                            });
                            closeBtn.element().appendTo(entityDialog._footer);
                            if (self._level < data.unlock_level || goods.hasColdDown && goods.cd > 0) {
                                exchangeBtn.disable(true);
                            }
                            if ((data.status == 5 && data.cold_down < 0) || (data.status == 5 && goods.cd < 0)) {
                                exchangeBtn.disable(true);
                            }
                            entityDialog.open();
                        }
                    });
                    self._goodsList.push(goods);
                    return goods;
                },
                onLoad: function (listPanel) {
                    if (self._hasLoaded === false) {
                        self._hasLoaded = true;
                    }
                }
            });
            this.element().append(this._list.element());
        },
        _addGrainBar: function () {
            var self = this;
            this._grainBar = $('<div class="personal-grain-bar"></div>').appendTo(this._list._header);
            Mojo.ajax('/force/playerForce', {}, function (response) {
                if (response && response.errorCode === 0) {
                    self._grainBar.html(self.locale('personal_grain_amount', {
                        amount: response.data.grain
                    }));
                }
            }, function () {});
        },
        _refreshGrainBar: function (playerForce) {
            if (playerForce) {
                w.Mojo.page.Force.getController().updatePlayerProfile(playerForce);
            }
        },
        _buyGoods: function (goods) {
            var self = this;
            var entityId = goods.entity.id;
            Mojo.ajax('/force/exchange', {
                id: goods.id
            }, function (response) {
                if (response.errorCode == 0) {
                    self._refreshGrainBar(response.data.player_force);
                    Mojo.track.onBuy(goods.id, 1, 'remark', true);
                    if (goods && parseInt(goods.entity.type_id) == 8) {
                        var entity = response.data.entities[0];
                        var niudanPuppetData = response.data.niudanPuppetData[0];
                        var t = Mojo.utils.locale('mall', 'open_minis_result');
                        if (false === Mojo.utils.isNone(response.data.extra_entity)) {
                            t = Mojo.utils.locale('mall', 'heaven_bless');
                        }
                        var entityDetailDialog = new Mojo.ui.Dialog(undefined, {
                            title: t,
                            content: (new Mojo.com.LargeEntity(entity)).element()
                        });
                        var tip = undefined;
                        if (false === Mojo.utils.isNone(response.data.extra_entity)) {
                            tip = Mojo.utils.locale('mall', 'open_minis_tip', {
                                moneyname: niudanPuppetData.name,
                                count: niudanPuppetData.count,
                                name: entity.name
                            });
                        } else if (parseInt(response.data.type) == 2) {
                            tip = Mojo.utils.locale('mall', 'open_minis_tip1', {
                                moneyname: niudanPuppetData.name,
                                count: niudanPuppetData.count,
                                name: entity.name
                            });
                        } else {
                            tip = Mojo.utils.locale('mall', 'open_minis_tip', {
                                moneyname: niudanPuppetData.name,
                                count: niudanPuppetData.count,
                                name: entity.name
                            });
                        }
                        $('<div></div>').addClass('tip').html(tip).appendTo(entityDetailDialog._content);
                        if (false === Mojo.utils.isNone(response.data.extra_entity)) {
                            entityDetailDialog.element().addClass("with-extra-entity");
                            var extraDiv = $('<div class="extra-entity tip"></div>').appendTo(entityDetailDialog._content);
                            $('<div class="txt"></div>').html(Mojo.utils.locale('mall', 'get', {
                                __default__: '并获得：'
                            })).appendTo(extraDiv);
                            $('<div class="txt name"></div>').html(response.data.extra_entity[0].name).appendTo(extraDiv);
                        }
                        new Mojo.ui.Button(undefined, {
                            text: Mojo.utils.locale('force', 'continue_exchange'),
                            special: "button-big-red",
                            click: function () {
                                entityDetailDialog.close();
                            }
                        }).element().appendTo(entityDetailDialog._footer);
                        new Mojo.ui.Button(undefined, {
                            text: Mojo.utils.locale('mall', 'go_accept'),
                            special: 'button-big-blue',
                            click: function () {
                                entityDetailDialog.close();
                                if (parseInt(response.data.type) == 2) {
                                    Mojo.app.redirect('/activity', {
                                        selected: 0
                                    });
                                } else {
                                    Mojo.app.redirect('/entity');
                                }
                            }
                        }).element().appendTo(entityDetailDialog._footer);
                        Mojo.gap.niudanAnimationPlay(function () {
                            entityDetailDialog.open();
                        });
                    } else if (goods && parseInt(goods.entity.type_id) == 7) {
                        var entity = response.data.entities[0];
                        var exchangeSuccessfulDialog = new Mojo.ui.Dialog(undefined, {
                            title: self.locale('exchange_successful_title'),
                            content: (new Mojo.com.LargeEntity(entity)).element()
                        });
                        var tip = $('<div class="tip">' + self.locale('exchange_successful_content2') + '</div>').appendTo(exchangeSuccessfulDialog._content);
                        new Mojo.ui.Button(undefined, {
                            text: self.locale('exchange_again'),
                            special: "button-big-red",
                            click: function () {
                                exchangeSuccessfulDialog.close();
                                if (self._options.onBuy instanceof Function) {
                                    self._options.onBuy();
                                }
                            }
                        }).element().appendTo(exchangeSuccessfulDialog._footer);
                        new Mojo.ui.Button(undefined, {
                            text: Mojo.utils.locale('mall', 'go_accept'),
                            special: 'button-big-blue',
                            click: function () {
                                exchangeSuccessfulDialog.close();
                                Mojo.app.redirect('/newmall', {
                                    selected: 4
                                });
                            }
                        }).element().appendTo(exchangeSuccessfulDialog._footer);
                        exchangeSuccessfulDialog.open();
                    } else {
                        var entity = response.data.entities[0];
                        var exchangeSuccessfulDialog = new Mojo.ui.Dialog(undefined, {
                            title: self.locale('exchange_successful_title'),
                            content: (new Mojo.com.LargeEntity(entity)).element()
                        });
                        var tip = $('<div class="tip">' + self.locale('exchange_successful_content') + '</div>').appendTo(exchangeSuccessfulDialog._content);
                        new Mojo.ui.Button(undefined, {
                            text: self.locale('exchange_again'),
                            special: "button-big-red",
                            click: function () {
                                exchangeSuccessfulDialog.close();
                                if (self._options.onBuy instanceof Function) {
                                    self._options.onBuy();
                                }
                            }
                        }).element().appendTo(exchangeSuccessfulDialog._footer);
                        new Mojo.ui.Button(undefined, {
                            text: Mojo.utils.locale('mall', 'go_accept'),
                            special: 'button-big-blue',
                            click: function () {
                                exchangeSuccessfulDialog.close();
                                if (parseInt(response.data.type) == 2) {
                                    Mojo.app.redirect('/activity', {
                                        selected: 0
                                    });
                                } else {
                                    Mojo.app.redirect('/entity');
                                }
                            }
                        }).element().appendTo(exchangeSuccessfulDialog._footer);
                        exchangeSuccessfulDialog.open();
                    }
                    var data = response.data;
                    if (data.cold_down && data.cold_down > 0) {
                        var goodsList = self._list.children();
                        for (var i = 0; i < goodsList.length; i++) {
                            var goodsItem = goodsList[i];
                            if (goodsItem.getDataId() == goods.id) {
                                goodsItem.hasColdDown = true;
                                goodsItem.cd = data.cold_down;
                                goodsItem.showCd();
                            }
                        }
                    } else if (data.cold_down && data.cold_down < 0) {
                        var goodsList = self._list.children();
                        for (var i = 0; i < goodsList.length; i++) {
                            var goodsItem = goodsList[i];
                            if (goodsItem.getDataId() == goods.id) {
                                goodsItem.cd = data.cold_down;
                                goodsItem.disableButton();
                            }
                        }
                    }
                } else if (response.errorCode == 130038) {
                    var exchangeFailedDialog = new Mojo.ui.Dialog(undefined, {
                        title: self.locale('exchange_failed_title'),
                        content: $('<div class="tip">' + self.locale('exchange_failed_content') + '</div>')
                    });
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'close'),
                        special: 'button-big-blue',
                        click: function () {
                            exchangeFailedDialog.close();
                        }
                    }).element().appendTo(exchangeFailedDialog._footer);
                    exchangeFailedDialog.open();
                } else if (response.errorCode == 130053) {
                    Mojo.app.toast.show(response.errorMsg);
                } else if (response.errorCode == 130054) {
                    Mojo.app.toast.show(response.errorMsg);
                } else if (response.errorCode == 130062) {
                    Mojo.app.toast.show(response.errorMsg);
                } else if (response.errorCode == 10005) {
                    var rmFailedDialog = new Mojo.ui.Dialog(undefined, {
                        title: self.locale('exchange_failed_title'),
                        content: $('<div class="tip">' + self.locale('need_rm') + '</div>')
                    });
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('mall', 'go_payment'),
                        special: "button-big-red",
                        click: function () {
                            rmFailedDialog.close();
                            self._createPaymentDialog();
                        }
                    }).element().appendTo(rmFailedDialog._footer);
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'close'),
                        special: 'button-big-blue',
                        click: function () {
                            rmFailedDialog.close();
                        }
                    }).element().appendTo(rmFailedDialog._footer);
                    rmFailedDialog.open();
                } else if (response.errorCode == 10101) {
                    var FailedDialog = new Mojo.ui.Dialog(undefined, {
                        title: self.locale('exchange_failed_title'),
                        content: $('<div class="tip">' + response.errorMsg + '</div>')
                    });
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'close'),
                        special: 'button-big-blue',
                        click: function () {
                            FailedDialog.close();
                        }
                    }).element().appendTo(FailedDialog._footer);
                    FailedDialog.open();
                } else if (response.errorCode == 130110) {
                    var t = Mojo.utils.locale('force', 'force_boss_challenge_exchange_fail');
                    if (response.data != undefined && response.data.title != undefined) {
                        t = response.data.title;
                    }
                    (new Mojo.com.CommonDialog(undefined, {
                        title: t,
                        content: $('<div class="tip"></div>').html(response.errorMsg),
                        leftBtnText: Mojo.utils.locale('common', 'close'),
                        leftBtnClick: function (that) {
                            that.close();
                        }
                    })).open();
                } else if (response.errorCode == 240010) {
                    var t = Mojo.utils.locale('force', 'force_boss_challenge_exchange_fail');
                    if (response.data != undefined && response.data.title != undefined) {
                        t = response.data.title;
                    }
                    (new Mojo.com.CommonDialog(undefined, {
                        title: t,
                        content: $('<div class="tip"></div>').html(response.errorMsg),
                        leftBtnText: Mojo.utils.locale('common', 'close'),
                        leftBtnClick: function (that) {
                            that.close();
                            Mojo.app.redirect('/force', {
                                index: 3,
                                selected: 1
                            });
                        }
                    })).open();
                } else {
                    var t = Mojo.utils.locale('force', 'forcewar_tip_title');
                    if (response.data != undefined && response.data.title != undefined) {
                        t = response.data.title;
                    }
                    (new Mojo.com.CommonDialog(undefined, {
                        title: t,
                        content: $('<div class="tip"></div>').html(response.errorMsg),
                        leftBtnText: Mojo.utils.locale('common', 'close'),
                        leftBtnClick: function (that) {
                            that.close();
                            Mojo.app.redirect('/force', {
                                index: 3,
                                selected: 1
                            });
                        }
                    })).open();
                }
            }, function (response) {
                self._refreshGrainBar();
            });
        },
        _createPaymentDialog: function () {
            if (Mojo.gap.isJailbreak) {
                Mojo.app.redirect('/mall/recharge');
                return;
            }
            var self = this;
            this._paymentList = new Mojo.ui.ListPanel('payment-listpanel', {
                scrollable: true,
                showMore: false,
                pageSize: 20,
                loadFunc: function () {
                    Mojo.ajax("/mall/RechargeList", {}, function (response) {
                        if (response && response.errorCode === 0) {
                            self._paymentData = response.data.list;
                            if (self._paymentAdvertising === undefined) {
                                self._paymentAdvertising = response.data.advertising;
                            }
                            self._paymentList.appendData(response.data.list);
                        } else {
                            self._paymentList.appendData(null);
                        }
                    }, function () {
                        self._paymentList.appendData(null);
                    });
                },
                drawFunc: function (data) {
                    return (new Mojo.com.PaymentElement(data, {
                        advertising: (self._paymentAdvertising == undefined ? {} : self._paymentAdvertising),
                        click: function (p) {
                            switch (parseInt(p.money)) {
                            case 6:
                                Mojo.track.onEvent('10_021');
                                break;
                            case 30:
                                Mojo.track.onEvent('10_022');
                                break;
                            case 68:
                                Mojo.track.onEvent('10_023');
                                break;
                            case 198:
                                Mojo.track.onEvent('10_024');
                                break;
                            case 328:
                                Mojo.track.onEvent('10_025');
                                break;
                            case 648:
                                Mojo.track.onEvent('10_026');
                                break;
                            }
                            Mojo.gap.purchase(self.baseProfile.id, p.id);
                        }
                    }));
                },
                onLoaded: function (that) {
                    $("#payment-advertising").remove();
                    $("#payment-paytips").remove();
                    $('<div id="payment-advertising" class="payment-advertising"></div>').html((self._paymentAdvertising == undefined ? Mojo.utils.getSomething("advertising_content") : self._paymentAdvertising.content)).insertBefore(that.element());
                    if (!Mojo.app.isNd && true !== Mojo.gap.isPPZhushou) {
                        $('<div id="payment-paytips" class="payment-paytips"></div>').html(Mojo.utils.locale('mall', 'pay_tips')).bind("click", function () {
                            self._paymentDialog.close();
                            self._createTipsDlg();
                        }).insertBefore(that.element());
                    }
                }
            });
            var paymentDialog = new Mojo.ui.Dialog('payment-dialog', {
                title: Mojo.utils.locale('common', 'recharge'),
                content: self._paymentList.element(),
                close: function () {
                    self._paymentAdvertising = undefined;
                    self._paymentList = undefined;
                }
            });
            if (Mojo.app.isNd || Mojo.gap.isPPZhushou) {
                self._paymentDialog.element().css({
                    'height': '336px'
                });
            }
            paymentDialog.open();
            Mojo.track.onEvent('10_011');
        },
        _createTipsDlg: function () {
            var self = this;
            self.tipsDlg = new Mojo.ui.Dialog('pay-tips-dlg', {
                title: Mojo.utils.locale('mall', 'pay_tips'),
                close: function () {
                    self._createPaymentDialog();
                }
            });
            self._createHomeContent();
            self._createTipsDlgBtn(true);
            var dlgScroll = new Mojo.ui.Scroll(undefined, self.tipsDlg._content, {
                direction: 2,
            });
            self.tipsDlg.element().append(dlgScroll.element());
            self.tipsDlg.open(true);
            dlgScroll.refresh();
            self._scroll = new Mojo.ui.Scroll(undefined, self.tipsDlg._content, {
                direction: 2
            });
            self.tipsDlg.element().append(self._scroll.element());
            self.tipsDlg.open(true);
            self._scroll.refresh();
        },
        _createHomeContent: function () {
            var self = this;
            self.tipsDlg._content.find(".tipContent").remove();
            var tips = [{
                id: 'tips_1',
                label: Mojo.utils.locale('mall', 'pay_tips_1')
            }, {
                id: 'tips_2',
                label: Mojo.utils.locale('mall', 'pay_tips_2')
            }, {
                id: 'tips_3',
                label: Mojo.utils.locale('mall', 'pay_tips_3')
            }, {
                id: 'tips_4',
                label: Mojo.utils.locale('mall', 'pay_tips_4')
            }, {
                id: 'tips_5',
                label: Mojo.utils.locale('mall', 'pay_tips_5')
            }, ];
            var homeContent = $('<div class = "tipHome paragraph"></div>');
            $.each(tips, function (i, tip) {
                var tipLink = $('<div class = ' + tip.id + '></div>').html(tip.label);
                tipLink.appendTo(homeContent);
                if (i != 4) {
                    tipLink.bind("click", function () {
                        self.tipsDlg.hide();
                        self._createTipsContent(i + 1);
                        self._createTipsDlgBtn(false);
                        self.tipsDlg.open(true);
                        self._scroll.refresh();
                    });
                }
            });
            homeContent.appendTo(self.tipsDlg._content);
        },
        _createTipsContent: function (i) {
            var self = this;
            self.tipsDlg._content.find(".tipHome").remove();
            var content = $('<div class = "tipContent paragraph"></div>').html(Mojo.utils.locale('mall', 'pay_tips_content_' + i));
            content.appendTo(self.tipsDlg._content);
        },
        _createTipsDlgBtn: function (isHome) {
            var self = this;
            if (isHome == undefined) isHome = true;
            if (self.contactBtn && self.closeBtn) {
                self.contactBtn.element().remove();
                self.closeBtn.element().remove();
            }
            if (self.backBtn) {
                self.backBtn.element().remove();
            }
            if (isHome) {
                self.contactBtn = new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('settings', 'contact_service'),
                    click: function () {
                        self.tipsDlg.hide();
                        (new Mojo.com.MessageDialog(null, {
                            title: Mojo.utils.locale('common', 'suggestion_title'),
                            isSuggestion: true,
                            close: function () {
                                self.tipsDlg.open();
                            }
                        })).open(true);
                    }
                });
                self.closeBtn = new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('common', 'close'),
                    click: function () {
                        self.tipsDlg.close();
                    }
                });
                self.contactBtn.element().appendTo(self.tipsDlg._footer);
                self.closeBtn.element().appendTo(self.tipsDlg._footer);
            } else {
                self.backBtn = new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('common', 'back'),
                    click: function () {
                        self.tipsDlg.hide();
                        self._createHomeContent();
                        self._createTipsDlgBtn(true);
                        self.tipsDlg.open(true);
                        self._scroll.refresh();
                    }
                });
                self.backBtn.element().appendTo(self.tipsDlg._footer);
            }
        },
        profileUpdated: function (level) {
            var self = this;
            if (self._dataList != undefined && level != self._level) {
                for (var i = 0; i < self._dataList.length; i++) {
                    self._goodsList[i].updateGoButtonStatus(level);
                }
            }
        },
        refreshData: function () {},
        localeCat: function () {
            return 'force';
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.SmallEntity = w.Mojo.Object.extend({
        clsname: function () {
            return "com.SmallEntity";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass("mojo-com-entity-small");
            this.element().append('<div class="minis-flag"></div>');
            this._refresh();
            this._initEvent();
        },
        _refresh: function () {
            var self = this;
            if (typeof this._data == "object") {
                self._setCard();
                this._setMinisFlag();
                if (this._options.callback instanceof Function) {
                    this._options.callback(this);
                }
            } else if (typeof this._data == "string") {
                Mojo.ajax("/entity/detail", {
                    id: this._data,
                    pid: this._options.pid,
                    eid: this._options.eid,
                    rebirth_count: this._options.rebirthCount
                }, function (response) {
                    if (response && response.errorCode === 0) {
                        self._data = response.data;
                        self._setCard();
                        self._setMinisFlag();
                        if (self._options.callback instanceof Function) {
                            self._options.callback(self);
                        }
                    }
                });
            }
        },
        _setCard: function () {
            var self = this;
            $('<img />').addClass("card-image-url").bind("load", function () {
                self.element().find(".card-image-url").show();
            }).hide().prependTo(this.element()).attr({
                src: this._data.small_image
            });
        },
        _setMinisFlag: function () {
            if (this._data && this._data.type_id && Mojo.utils.isWhat(this._data.type_id, "minis")) {
                if (Mojo.utils.isWhat(this._data.entity_type_id, "general")) {
                    this.element().find(".minis-flag").addClass('minis-flag-type-gp-' + this._data.entity_group_id).show();
                } else {
                    this.element().find(".minis-flag").addClass('minis-flag-type-' + this._data.entity_type_id).show();
                }
            } else {
                this.element().find(".minis-flag").hide();
            }
        },
        _initEvent: function () {
            var self = this;
            this.element().bind("click", function () {
                if (self._options.click instanceof Function) {
                    self._options.click(self);
                }
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.BuyFailDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.BuyFailDialog";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-buyfaildlg');
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            var self = this;
            this._message = $('<div class="paragraph"></div>').html(self._options.message).appendTo(this._content);
        },
        _addHandleButtons: function () {
            var self = this;
            if (this._options.useRm == true) {
                this._footer.append((new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('common', 'go_payment'),
                    click: function () {
                        Mojo.app.redirect('/newmall', {
                            selected: 5
                        });
                    },
                    special: 'button-big-red',
                })).element());
            } else {
                this._footer.append((new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('common', 'go_vm'),
                    click: function () {
                        Mojo.app.redirect('/newmall', {
                            selected: 4
                        });
                    },
                    special: 'button-big-red',
                })).element());
            }
            this._footer.append((new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('common', 'buy_fail_title'),
                message: '',
                useRm: true,
                zIndex: 1100,
                deviceaware: true
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.WeiboPublishDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.WeiboPublishDialog";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-weibopublishdlg');
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            var self = this;
            var text = self._options.hintText;
            var lengthLimit = self._options.maxlength;
            if (self._options.appendix != '') {
                lengthLimit = lengthLimit - parseInt(self._options.appendix.length) - 1;
            }
            var lengthDisplay = lengthLimit;
            if (self._options.defaultText != '') {
                text = self._options.defaultText;
                lengthDisplay = lengthDisplay - parseInt(self._options.defaultText.length);
            }
            var paragraph = $("<div class='paragraph'></div>").appendTo(this._content);
            self._bonus = $('<div class="bonus"></div>').html(Mojo.utils.locale('weibo', 'weibo bonus')).appendTo(paragraph);
            self._tip = $('<div class="words-tip"></div>').html(lengthDisplay).appendTo(paragraph);
            self._border = $('<div class="border"></div>').appendTo(paragraph);
            self._content = $('<form name="form" method="post" action=""><textarea name="textarea" maxlength="' + lengthLimit + '" id="message-content" cols="45" rows="5">' + text + '</textarea></form>').appendTo(self._border);
            self._textarea = this._content.find('textarea').focus(function () {
                if (this.value == self._options.hintText) {
                    this.value = '';
                }
            });
            self._textarea.bind("input propertychange", function () {
                var maxLength = $(this).attr('maxlength');
                var v = $(this).val().length;
                if (v <= maxLength) {
                    self._tip.html(maxLength - v);
                    return true;
                } else {
                    $(this).val($(this).val().substring(0, maxLength));
                    return false;
                }
            });
        },
        _sendWeiboFromJs: function (message) {
            Mojo.app.weibo.statusesUpdate({
                access_token: self._data.access_token,
                status: message,
                errorFunc: function () {
                    Mojo.app.toast.show(Mojo.utils.locale('weibo', 'Send Success'));
                    self.close();
                    Mojo.ajax('/player/weiboPublish', {}, function (result) {
                        Mojo.app.refreshCurrentProfile();
                        self.afterPublish();
                    });
                },
                successFunc: function () {
                    Mojo.app.toast.show(Mojo.utils.locale('weibo', 'Send Success'));
                    self.close();
                    Mojo.ajax('/player/weiboPublish', {}, function (result) {
                        Mojo.app.refreshCurrentProfile();
                        self.afterPublish();
                    });
                },
                failedFunc: function () {
                    self.close();
                    Mojo.ajax('/player/weiboPublish', {}, function (result) {
                        self.afterPublish();
                    });
                },
            });
        },
        _sendWeiboFromNative: function () {},
        _addHandleButtons: function () {
            var self = this;
            self._sendBtn = new Mojo.ui.Button(undefined, {
                special: 'button-big-red',
                text: Mojo.utils.locale('ui', 'Send'),
                click: function () {
                    self._sendBtn.disable(true);
                    var message = $("#message-content").val();
                    if (message == self._options.hintText) {
                        message = '';
                    }
                    if (self._options.appendix != '') {
                        message = message + ' ' + self._options.appendix;
                    }
                    if (Mojo.utils.trim(message) == '') {
                        Mojo.app.toast.show(Mojo.utils.locale('weibo', 'Please input weibo content'));
                        self._sendBtn.disable(false);
                        return;
                    }
                    if (Mojo.app.isNativeApp()) {
                        mojo.gap.shareweibo('system', 'shareweibo', ["", message])
                    } else {
                        self._sendWeiboFromJs(message);
                    }
                },
            });
            this._footer.append(self._sendBtn.element());
            this._footer.append((new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                    self.afterPublish();
                },
            })).element());
        },
        afterPublish: function () {},
        close: function () {
            this._super();
            window.scrollTo(0, 0);
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('weibo', 'Send weibo'),
                maxlength: 140,
                hintText: Mojo.utils.locale('weibo', 'Please input weibo content'),
                defaultText: '',
                appendix: '',
                zIndex: 1100,
            });
        },
    });
})(window, jQuery);
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.FacebookFeedDialog = w.Mojo.ui.Dialog.extend({
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-facebookfeeddlg');
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            var self = this;
            var text = self._options.hintText;
            if (self._options.defaultText != '') {
                text = self._options.defaultText;
            }
            self._bonus = $('<div class="bonus"></div>').html(Mojo.utils.locale('facebook', 'weibo bonus')).appendTo(this._content);
            self._border = $('<div class="border"></div>').appendTo(this._content);
            self._content = $('<form name="form" method="post" action=""><textarea name="textarea" ' + '" id="message-content" cols="45" rows="5">' + text + '</textarea></form>').appendTo(self._border);
            self._textarea = this._content.find('textarea').focus(function () {
                if (this.value == self._options.hintText) {
                    this.value = '';
                }
            });
        },
        _addHandleButtons: function () {
            var self = this;
            self._sendBtn = new Mojo.ui.Button(undefined, {
                special: 'button-big-red',
                text: Mojo.utils.locale('ui', 'Send'),
                click: function () {
                    self._sendBtn.disable(true);
                    var message = $("#message-content").val();
                    if (message == self._options.hintText) {
                        message = '';
                    }
                    var linkUrl = "";
                    if (self._options.appendix != '') {
                        linkUrl = self._options.appendix;
                    }
                    if (Mojo.utils.trim(message) == '') {
                        Mojo.app.toast.show(Mojo.utils.locale('facebook', 'Please input weibo content'));
                        self._sendBtn.disable(false);
                        return;
                    }
                    var params = {
                        caption: self._options.defaultTitle,
                        name: self._options.defaultTitle,
                        picture: self._getImgurl(),
                        link: linkUrl,
                        description: self._options.defaultText,
                        access_token: self._data.access_token,
                        actions: [{
                            name: 'go to sanguo',
                            link: linkUrl
                        }],
                    };
                    FB.api('/me/feed', 'post', params, function (response) {
                        if (response && response.id) {
                            Mojo.ajax('/player/weiboPublish', {}, function (result) {
                                Mojo.app.refreshCurrentProfile();
                            });
                        } else {}
                        self.close();
                    });
                },
            });
            this._footer.append(self._sendBtn.element());
            this._footer.append((new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                    self.afterPublish();
                },
            })).element());
        },
        afterPublish: function () {},
        _getImgurl: function () {
            var loc = window.location.href;
            var a = loc.indexOf('/mojo');
            var b = loc.substring(0, a);
            var url = b + '/mojo/resources/classic/mobile/image/ui/icon.jpg';
            if (Mojo.app.data.userLanguage == 'zh_tw') {
                url = b + '/mojo/resources/classic/mobile/image/ui/icon-tw.jpg';
            }
            return url;
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('facebook', 'Send weibo'),
                hintText: Mojo.utils.locale('facebook', 'Please input feed content'),
                defaultTitle: '',
                defaultText: '',
                appendix: '',
                zIndex: 1100,
            });
        },
        debugable: function () {
            return Mojo.utils.debug.vars.com.weibopublishdlg;
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.WeiboExpireDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.WeiboExpireDialog";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-weiboexpiredlg');
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            var self = this;
            self._message = $('<div class="paragraph"></div>').html(Mojo.utils.locale('weibo', 'expire message')).appendTo(this._content);
        },
        _addHandleButtons: function () {
            var self = this;
            this._footer.append((new Mojo.ui.Button('login-btn', {
                special: 'button-big-red',
                text: Mojo.utils.locale('weibo', 'go login'),
                click: function () {
                    Mojo.app.redirect('/settings', {
                        selected: 1
                    });
                    self.close();
                },
            })).element());
            this._footer.append((new Mojo.ui.Button('close-btn', {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('weibo', 'Your weibo account has expired!'),
                zIndex: 1100,
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.WeiboBindDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.WeiboBindDialog";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-weibobinddlg');
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            var self = this;
            self._message = $('<div class="paragraph"></div>').html(Mojo.utils.locale('weibo', 'bind message')).appendTo(this._content);
        },
        _addHandleButtons: function () {
            var self = this;
            this._footer.append((new Mojo.ui.Button('bind-btn', {
                special: 'button-big-red',
                text: Mojo.utils.locale('weibo', 'go bind'),
                click: function () {
                    self._redirectToSettings = 1;
                    Mojo.app.redirect('/settings', {
                        selected: 1
                    });
                    self.close();
                },
            })).element());
            this._footer.append((new Mojo.ui.Button('close-btn', {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _close: function () {
            if (this._redirectToSettings == 1) {
                delete this._redirectToSettings;
                return false;
            }
            if (this._options.level == 120) {
                this._showActiveBarrackDialog();
            }
        },
        _showActiveBarrackDialog: function () {
            var dlg = new Mojo.com.CommonDialog(undefined, {
                title: Mojo.utils.locale('common', 'barrack_active_dlg_title'),
                content: $('<div class="paragraph"></div>').html(Mojo.utils.locale('common', 'barrack_active_dlg_content')),
                leftBtnText: Mojo.utils.locale('common', 'go_look'),
                leftBtnClick: function () {
                    Mojo.app.redirect('/package', {
                        selected: -1
                    });
                    dlg.close();
                },
                rightBtnText: Mojo.utils.locale('common', 'close'),
                rightBtnClick: function () {
                    dlg.close();
                }
            });
            dlg.open();
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('weibo', 'bind title'),
                zIndex: 1100,
                close: function () {
                    self._close();
                }
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.FacebookExpireDialog = w.Mojo.ui.Dialog.extend({
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-facebookexpiredlg');
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            var self = this;
            this._message = $('<div class="paragraph"></div>').html(self.locale('expire message')).appendTo(this._content);
        },
        _addHandleButtons: function () {
            var self = this;
            this._footer.append((new Mojo.ui.Button('login-btn', {
                special: 'button-big-red',
                text: self.locale('go login'),
                click: function () {
                    Mojo.app.redirect('/settings', {
                        selected: 1
                    });
                    self.close();
                },
            })).element());
            this._footer.append((new Mojo.ui.Button('close-btn', {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                title: self.locale('Your weibo account has expired!'),
                zIndex: 1100,
            });
        },
        localeCat: function () {
            return 'facebook';
        },
        debugable: function () {
            return Mojo.utils.debug.vars.com.facebookexpiredlg;
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.FacebookBindDialog = w.Mojo.ui.Dialog.extend({
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-facebookbinddlg');
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            var self = this;
            this._message = $('<div class="paragraph"></div>').html(self.locale('bind message')).appendTo(this._content);
        },
        _addHandleButtons: function () {
            var self = this;
            this._footer.append((new Mojo.ui.Button('bind-btn', {
                special: 'button-big-red',
                text: self.locale('go bind'),
                click: function () {
                    Mojo.app.redirect('/settings', {
                        selected: 1
                    });
                    self.close();
                },
            })).element());
            this._footer.append((new Mojo.ui.Button('close-btn', {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                title: self.locale('bind title'),
                zIndex: 1100,
            });
        },
        localeCat: function () {
            return 'facebook';
        },
        debugable: function () {
            return Mojo.utils.debug.vars.com.facebookbinddlg;
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.PlatformButton = w.Mojo.ui.Button.extend({
        init: function (event, options) {
            this._super(undefined, options);
            this._event = event;
            this.element().addClass('mojo-com-platformbtn');
            this._initData();
            this._addContent();
        },
        _initData: function () {
            var self = this;
            if (self._event != undefined && self._event != null) {
                for (var index in self._event) {
                    if (self._event[index].name == 'weibo.create' || self._event[index].name == 'facebook.create') {
                        self._options.access_token = self._event[index].data.access_token;
                        self._options.defaultText = self._event[index].data.content;
                        self._options.expire = self._event[index].expire;
                        self._options.appendix = self._event[index].data.download_url;
                        self._options.defaultTitle = self._event[index].data.title;
                    }
                }
            }
        },
        _addContent: function () {
            var self = this;
            self._platform = Mojo.app.getPlatform();
            var txt = Mojo.utils.locale('weibo', 'Send weibo');
            self.text(txt);
            var weibocontent = self._options.defaultText || self._options.content;
            var weibotitle = self._options.defaultTitle || self._options.title;
            var appendixtxt = self._options.appendix || self._options.download_url;
            self.click(function () {
                self._options.btnClick();
                Mojo.ajax('/player/weiboToken', {}, function (response) {
                    if (response.errorCode == 0) {
                        var access_token = '';
                        if (response.data) {
                            access_token = response.data.token;
                        }
                        if (access_token != null && access_token != '') {
                            if (self._options.expire == 1) {
                                (new Mojo.com.WeiboExpireDialog()).open(true);
                            } else {
                                (new Mojo.com.WeiboPublishDialog({
                                    access_token: access_token
                                }, {
                                    defaultText: weibocontent,
                                    appendix: appendixtxt
                                })).open(true);
                            }
                        } else {
                            (new Mojo.com.WeiboBindDialog({
                                showGoBindDialog: self._options.showGoBindDialog,
                                level: self._options.level
                            })).open(true);
                        }
                    }
                    self._options.levelUpBtnClick();
                }, function () {}, {
                    showWait: true
                });
            });
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                text: '',
                special: 'button-big-red',
                btnClick: $.noop,
                levelUpBtnClick: $.noop,
                icon: Mojo.app.getPlatform() == 'facebook',
                textWrap: Mojo.app.getPlatform() == 'facebook'
            });
        },
        debugable: function () {
            return Mojo.utils.debug.vars.com.platformbtn;
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceFilterDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.EntityFilterDialog";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-force-filter');
            var self = this;
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            var self = this;
            this._entityFilterPanel = this.element();
            if ($(document.body).find('.mojo-com-entity-filter').length > 0) {
                this.element().show();
                this._typeFilter = this.element().children("." + self._options.typeFilterId).first();
                this._rarityFilter = this.element().children("." + self._options.rarityFilterId).first();
                this._orderFilter = this.element().children("." + self._options.orderFilterId).first();
            } else {
                this.element().show();
                this._typeFilter = $('<div class="typeFilter"><div class="entityType">' + Mojo.utils.locale('force', 'order_conditions') + '</div></div>').appendTo(this._entityFilterPanel);
                this._typeFilterList = $('<div class="filter-list"></div>').appendTo(this._typeFilter);
                this._orderFilter = $('<div class="orderFilter"><div class="entityOrder">' + Mojo.utils.locale('force', 'order_force') + '</div></div>').appendTo(this._entityFilterPanel);
                this._typeFilter = this._entityFilterPanel.children("." + self._options.typeFilterId).first();
                this._typeFilterScroll = new Mojo.ui.Scroll(undefined, this._typeFilterList, {
                    direction: 2
                });
                this._typeFilterScroll.element().appendTo(this._typeFilter);
                Mojo.utils.center(this._entityFilterPanel);
            }
            this._typeArray = this._options.typeId.toString().split(',');
            this._createFilter();
            if ($(document.body).find('#tip-dialog').length == 0) $(this._tipDialog).appendTo(document.body);
        },
        _addHandleButtons: function () {
            var self = this;
            this._footer.append((this._okButton = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'ok'),
                click: function () {
                    self._options.callback(self._options.typeFilterSelected, self._options.orderFilterSelected);
                    self.close();
                },
                special: 'button-big-red'
            })).element());
        },
        _removeFilters: function () {
            var self = this;
            this._typeFilter.find("." + self._options.filterElementClass).remove();
            this._orderFilter.find("." + self._options.filterElementClass).remove();
        },
        _createFilter: function () {
            var self = this;
            if (Mojo.app.data.entityCategory.types.length == 0 || Mojo.app.data.entityCategory.orders.length == 0) {
                if ((self._options.filterUrl == undefined || self._options.filterUrl == '') && self._options.filterDataSource != undefined) {
                    Mojo.app.data.forceCategory = self._options.filterDataSource;
                    self._removeFilters();
                    self._addFilter();
                    return;
                }
                Mojo.ajax(self._options.filterUrl, {}, function (result) {
                    if (result.errorCode == 0) {
                        Mojo.app.data.forceCategory = result.data;
                        self._removeFilters();
                        self._addFilter();
                    } else {
                        self._showDialog(result);
                    }
                    self._typeFilterScroll.refresh();
                });
            } else {
                self._removeFilters();
                self._addFilter();
            }
        },
        _addFilter: function () {
            var self = this;
            if (self._options.type === 'all') {
                if (self._options.typeId.length > 1) {
                    self._options.typeId = 1;
                }
                for (var i in Mojo.app.data.forceCategory.types) {
                    if (!self._options.showAll && (Mojo.app.data.forceCategory.types[i].id == '6' || Mojo.app.data.forceCategory.types[i].id == '7' || Mojo.app.data.forceCategory.types[i].id == '8')) {
                        continue;
                    }
                    self._filter = $('<div></div>').attr("id", "type-" + Mojo.app.data.forceCategory.types[i].id).addClass(self._options.filterElementClass).appendTo(self._typeFilterList).data({
                        id: Mojo.app.data.forceCategory.types[i].id
                    }).html('<div class="radio"></div>' + Mojo.app.data.forceCategory.types[i].name).click(function () {
                        self._filterElements = self._typeFilter.find("." + self._options.filterElementClass);
                        self._filterElements.removeClass(self._options.filterSelectedClass).eq($(this).index()).addClass(self._options.filterSelectedClass);
                        self._filterElements.find('.radio').removeClass('radio-selected-class');
                        $(this).find('.radio').addClass('radio-selected-class');
                        self._options.typeFilterSelected = $(this).data('id');
                    });
                    if (self._options.typeId == Mojo.app.data.forceCategory.types[i].id) {
                        self._filter.addClass(self._options.filterSelectedClass);
                        self._filter.find('.radio').addClass('radio-selected-class');
                        self._options.typeFilterSelected = Mojo.app.data.forceCategory.types[i].id;
                    }
                }
                if (self._options.orderId == 0) {
                    self._options.orderId = 1;
                }
                for (var k in Mojo.app.data.forceCategory.orders) {
                    if (Mojo.app.data.forceCategory.orders[k].id == '5' || Mojo.app.data.forceCategory.orders[k].id == '6')
                        continue;
                    self._filter = $('<div></div>').attr("id", "order-" + Mojo.app.data.forceCategory.orders[k].id).addClass(self._options.filterElementClass).appendTo(self._orderFilter).data({
                        id: Mojo.app.data.forceCategory.orders[k].id
                    }).html('<div class="radio"></div>' + Mojo.app.data.forceCategory.orders[k].name).click(function () {
                        self._filterElements = self._orderFilter.find("." + self._options.filterElementClass);
                        self._filterElements.removeClass(self._options.filterSelectedClass).eq($(this).index()).addClass(self._options.filterSelectedClass);
                        self._filterElements.find('.radio').removeClass('radio-selected-class');
                        $(this).find('.radio').addClass('radio-selected-class');
                        self._options.orderFilterSelected = $(this).data('id');
                    });
                    if (self._options.orderId == Mojo.app.data.forceCategory.orders[k].id) {
                        self._filter.addClass(self._options.filterSelectedClass);
                        self._filter.find('.radio').addClass('radio-selected-class');
                        self._options.orderFilterSelected = Mojo.app.data.forceCategory.orders[k].id;
                    }
                }
            }
        },
        _isInArray: function (v, arr) {
            for (var i = 0; i < arr.length; i++) {
                if (v == arr[i]) return true;
            }
            return false;
        },
        _updateArray: function (v, arr) {
            var tmp = [],
                flag = true;
            for (var i = 0; i < arr.length; i++) {
                if (v == arr[i]) flag = false;
                else if (arr[i] != '') tmp.push(arr[i]);
            }
            if (flag == true) tmp.push(v);
            return tmp;
        },
        _updateOrder: function () {
            var self = this;
            if (self._options.orderId == 0) {
                self._options.orderId = 1;
            }
        },
        _showDialog: function (result) {
            var dialog = new Mojo.com.ErrorDialog(undefined, {
                errorMsg: result.errorMsg
            });
            dialog.open(true);
        },
        _showTipDialog: function (text) {
            var tipDialog = new Mojo.com.TipsDialog({
                message: text,
                zIndex: 1010
            });
            tipDialog.open(true);
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                typeId: 0,
                type: 'all',
                mainCardMode: true,
                mainCardId: 0,
                rarityId: 0,
                orderId: 0,
                isRebirth: false,
                filterUrl: '/force/filter',
                title: Mojo.utils.locale('force', 'order_conditions'),
                callback: $.noop,
                typeFilterSelected: 0,
                rarityFilterSelected: 0,
                orderFilterSelected: 0,
                entityFilterClass: 'mojo-com-entity-filter',
                filtersClass: 'filters',
                filterClass: 'filter',
                typeFilterId: 'typeFilter',
                rarityFilterId: 'rarityFilter',
                orderFilterId: 'orderFilter',
                filterElementClass: 'filterElement',
                filterSelectedClass: 'filterSelected',
                filterDisabledClass: 'filterDisabled',
                okButtonClass: 'okButton',
                okButtonDisabledClass: 'okButtonDisabled',
                cancelButtonClass: 'cancelButton',
                cancelButtonDisabledClass: 'cancelButtonDisabled',
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceAssignTitleDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceAssignTitleDialog";
        },
        init: function (data, options) {
            this._data = data;
            this._super('com-forceassigntitledialog', options);
            this.element().addClass('mojo-com-forceassigntitledialog');
            var self = this;
            this._addHeader();
            this._addList();
        },
        _addHeader: function () {
            this._tips = $('<div class="paragraph"></div>').appendTo(this._content);
            var title = '';
            if (this._data.title_info != undefined && this._data.title_info != '') {
                title = Mojo.utils.playerNameHtmlStr(this._data.title_info);
            }
            this._header = $('<div class="header"></div>').html(Mojo.utils.locale('force', 'select_assign_title', {
                honor: title,
                name: this._data.name
            }));
            this._header.appendTo(this._tips);
        },
        _addList: function () {
            var self = this;
            this._list = new Mojo.ui.ListPanel('forceassigntitle-listpanel', {
                scrollable: true,
                showMore: false,
                pageSize: 10,
                loadFunc: function () {
                    Mojo.ajax('/forceCrazy/SobriquetList', {
                        type: self._options.type
                    }, function (result) {
                        if (result && result.errorCode == 0) {
                            self.data = result.data;
                            if (self.data != undefined) {
                                $.each(self.data, function (i, d) {
                                    self._list.appendData(d);
                                });
                            } else {
                                self._list.appendData(null);
                            }
                        } else {
                            self.close();
                            Mojo.app.toast.show(result.errorMsg);
                        }
                    }, function () {});
                },
                drawFunc: function (data) {
                    return (new Mojo.com.ForceTitle(data, {
                        closeBack: function () {
                            self.close();
                        },
                        OnClickFunc: function () {
                            Mojo.ajax('/forceCrazy/distributSobriquet', {
                                'ids': self._options.playerId,
                                'sid': data.id,
                            }, function (result) {
                                if (result && result.errorCode == 0) {
                                    var dlg = new Mojo.ui.Dialog(undefined, {
                                        title: Mojo.utils.locale('common', 'assign_title'),
                                        content: $('<div class="tip"></div>').html(result.data.dis_result),
                                        close: function () {
                                            self._options.callback();
                                        },
                                    });
                                    (new Mojo.ui.Button(undefined, {
                                        text: Mojo.utils.locale('common', 'close'),
                                        click: function () {
                                            dlg.close();
                                        }
                                    })).element().appendTo(dlg._footer);
                                    dlg.open(true);
                                } else {
                                    var t = Mojo.utils.locale('force', 'cannot_allocatetitle');
                                    if (result.data != undefined && result.data.title != undefined)
                                        t = result.data.title;
                                    var dlg = new Mojo.ui.Dialog(undefined, {
                                        title: t,
                                        content: $('<div class="tip"></div>').html(result.errorMsg),
                                    });
                                    (new Mojo.ui.Button(undefined, {
                                        text: Mojo.utils.locale('common', 'close'),
                                        click: function () {
                                            dlg.close();
                                        }
                                    })).element().appendTo(dlg._footer);
                                    dlg.open(true);
                                }
                            }, function () {});
                        },
                    }));
                },
            });
            this._list.element().appendTo(this._content);
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('common', 'assign_title'),
                type: 2,
                playerId: '',
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceTitle = w.Mojo.Object.extend({
        clsname: function () {
            return "com.forcetitle";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-forcetitle').addClass('box-inner');
            var self = this;
            if (this._options.showTitle) {
                this._FBtitleDiv = $('<div></div>').addClass("force-buff-title").appendTo(this.element());
            }
            if (this._options.showAssignCount) {
                this._FBascountDiv = $('<div></div>').addClass("force-buff-ascount").appendTo(this.element());
            }
            if (this._options.showHr) {
                $('<hr>').appendTo(this.element());
            }
            if (this._options.showBuffs) {
                this._BuffsDiv = $('<div></div>').addClass("force-buff-buffs").appendTo(this.element());
            }
            if (this._options.showBtn) {
                this._BtnDiv = $('<div></div>').addClass("force-buff-btn").appendTo(this.element());
            }
            this.refresh();
        },
        refresh: function (data) {
            if (data === undefined) {
                data = this._data;
            }
            this._addAttributes(data);
        },
        _addAttributes: function (data) {
            var self = this;
            if (this._options.showTitle) {
                this._FBtitleDiv.html(data.name);
            }
            if (this._options.showAssignCount) {
                this._FBascountDiv.html(Mojo.utils.locale('force', 'can_as_title_count') + (data.permit_num - data.num) + '/' + data.permit_num);
            }
            if (this._options.showBuffs) {
                var buffs = '';
                $.each(data.buffs, function (i, b) {
                    buffs += b.name + ":" + b.desc + "<br/>";
                });
                this._BuffsDiv.html(buffs);
            }
            if (this._options.showBtn) {
                if (Mojo.utils.isNone(this._options.btn_text) == false) {
                    var disabled = true;
                    if (data.num < data.permit_num) {
                        disabled = false;
                    }
                    var Btn = new Mojo.ui.Button(undefined, {
                        text: self._options.btn_text,
                        classes: self._options.goBtnClass,
                        special: self._options.goSpecialClass,
                        disabled: disabled,
                        click: function () {
                            self._options.OnClickFunc();
                            self._options.closeBack();
                        },
                        disableClick: function () {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'no_allocatebuff'));
                        }
                    }).element().appendTo(this._BtnDiv);
                }
            }
        },
        _getDefaultOptions: function () {
            return {
                showTitle: true,
                showAssignCount: true,
                showHr: true,
                showBuffs: true,
                showBtn: true,
                btn_text: Mojo.utils.locale('force', 'assignbuff'),
                goBtnClass: ['go-button'],
                goSpecialClass: 'go-assign-btn',
                closeBack: $.noop,
                OnClickFunc: $.noop,
            };
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.CrazyForceWar = w.Mojo.Object.extend({
        clsname: function () {
            return "com.CrazyForceWar";
        },
        init: function (options) {
            this._super(undefined, options);
            var self = this;
            this._timer = undefined;
            this._forceSearch = undefined;
            this._helping = undefined;
            this._expire = undefined;
            this._attackerId = undefined;
            this._defenderId = undefined;
            this._forceSearch = undefined;
            this._forceOpponentListPanel = undefined;
            this._forceBattleHandle = undefined;
            this._isAssist = false;
            $.extend(true, this, this._options);
            if (this.action == 'assistSlave' || this.action == 'assistAlliance') {
                this._isAssist = true;
                this._assistType = this.action;
            }
            this._forcePage = this.parent._options.getController();
            this._forceProfile = this._forcePage.getForceProfile();
            if (this.inBattle == true) {
                self._forceWarAjax("/forceCrazy/battleStatus", {
                    type: self.battleType,
                    force_id: self.partnerIds
                }, function (response) {
                    if (response.errorCode == 0) {
                        if (response.data.attacker) {
                            switch (parseInt(response.data.type)) {
                            case 1:
                                self.action = 'usurp';
                                break;
                            case 2:
                                self.action = 'rebel';
                                break;
                            case 3:
                                self.action = 'uniterebel';
                                break;
                            }
                            self._counting = response.data.counting;
                            self._attLimit = response.data.eta.attacker;
                            self._defLimit = response.data.eta.defender;
                            self._attackerId = response.data.attacker.id;
                            self._defenderId = response.data.defender.id;
                            self._expire = response.data.eta.total;
                            self._createCrazyforceBattle();
                            self._usurpBattleStatusUpdate(response.data);
                        } else {
                            Mojo.app.redirect('/force');
                        }
                    } else if (response.errorCode == 190701 && response.data != undefined) {
                        self._createCrazyForceMarch(response.data);
                    } else {
                        Mojo.app.redirect('/force');
                    }
                });
            } else {
                if (self.action == 'alliance') {
                    var param = {};
                    param['for'] = self.action;
                    param['fpreviewor'] = 1;
                    Mojo.ajax('/forceCrazy/forceList', param, function (response) {
                        if (response.errorCode == 0) {
                            Mojo.app.redirect('/relation', {
                                index: 17
                            });
                        } else {
                            self._createFailedDlg(response);
                            self.parent._crazyForceWar = undefined;
                        }
                    }, function () {}, {
                        showWait: true
                    });
                } else {
                    var param = {};
                    param["for"] = self.action;
                    Mojo.ajax('/forceCrazy/forceList', param, function (response) {
                        if (response.errorCode == 0) {
                            self._createForceSearch(response.data);
                        } else {
                            self._createFailedDlg(response);
                            self.parent._crazyForceWar = undefined;
                        }
                    }, function () {}, {
                        showWait: true
                    });
                }
            }
        },
        _getDefaultOptions: function () {
            return {
                inBattle: false,
                isAttacking: false,
                action: undefined,
                battleType: 'attack',
                partnerIds: undefined,
                opponentName: undefined,
                opponentId: undefined,
                interval: 10,
                backBtnClick: undefined,
                updateChallange: $.noop,
            };
        },
        pause: function () {
            var self = this;
            clearTimeout(self._forceBattleHandle);
        },
        _isForceOwner: function (isViceOwner) {
            var isOwner = false;
            var player = this._forcePage.getPlayerProfile();
            var force = this._forcePage.getForceProfile();
            if (this.battleType == 'defence') {
                if (force.id != this._defenderId) {
                    isOwner = false;
                    return isOwner;
                }
            }
            if (Mojo.utils.isNone(player)) {
                var self = this;
                this._forcePage.sync(function () {
                    player = self._forcePage.getPlayerProfile();
                    if (player && player.position_id == 1) {
                        isOwner = true;
                    } else if (isViceOwner == true && player && player.position_id == 2) {
                        isOwner = true;
                    }
                });
            } else {
                if (player.position_id == 1) {
                    isOwner = true;
                }
                if (isViceOwner == true && player.position_id == 2) {
                    isOwner = true;
                }
            }
            return isOwner;
        },
        _forceWarAjax: function (url, params, success, fail) {
            var self = this;
            Mojo.ajax(url, params, function (response) {
                if (response && response.errorCode === 0) {
                    if (response.data && response.data.result) {
                        clearTimeout(self._forceBattleHandle);
                        self.inbattle = false;
                        self._showForceWarResultDialog(response.data.result, function () {
                            Mojo.app.redirect('/force');
                        });
                    } else if (response.data != undefined && success instanceof Function) {
                        success(response);
                    }
                } else {
                    if (response.data && response.data.prev) {
                        clearTimeout(self._forceBattleHandle);
                        self.inbattle = false;
                        self._showForceWarResultDialog(response.data.prev, function () {
                            Mojo.app.redirect('/force');
                        }, response);
                    } else if (success instanceof Function) {
                        success(response);
                    }
                }
            }, function () {
                if (fail instanceof Function) {
                    fail();
                }
            });
        },
        _fromArrayToString: function (array, isPlayer, noAnd) {
            if (Array.isArray(array) == false) return array;
            var str = "";
            var icount = 0;
            var flag = 0;
            for (var index in array) {
                var word = array[index];
                icount += 1;
                if (word == this._forcePage.getForceProfile().name) continue;
                if (isPlayer) {
                    if (icount == array.length) {
                        str += Mojo.utils.formatPlayerName(word);
                    } else if (icount % 2 == 0) {
                        str += Mojo.utils.formatPlayerName(word) + ",<br/>";
                    } else {
                        str += Mojo.utils.formatPlayerName(word) + ", ";
                    }
                } else {
                    if (flag != 0) {
                        str += "、";
                    } else if (!noAnd) {
                        str += Mojo.utils.locale('common', 'and');
                    }
                    str += "【" + word + "】";
                    flag = 1;
                }
            }
            return str;
        },
        _showForceWarResultDialog: function (result, callback, response) {
            var title = undefined;
            var content = undefined;
            var players = undefined;
            var outcome = '_win';
            var sibling = undefined;
            this.opponentName = result.attacker;
            switch (parseInt(result.type)) {
            case 1:
                this.action = 'usurp';
                break;
            case 2:
                this.action = 'rebel';
                break;
            case 3:
                this.action = 'uniterebel';
                var noAnd = false;
                if (this.battleType == 'defence') {
                    noAnd = true;
                }
                this.opponentName = this._fromArrayToString(result.attacker, false, noAnd);
                break;
            }
            if (result.contribute) {
                players = this._fromArrayToString(result.contribute, true);
            }
            if (this.battleType == 'defence') {
                if (result.status == 1) {
                    outcome = '_lose';
                }
            } else {
                if (result.status == 2 || (this.action == 'usurp' && result.status == 4)) {
                    outcome = '_lose';
                }
                sibling = this._fromArrayToString(result.attacker, false);
                this.opponentName = result.defender;
            }
            if (result.status == 1 || result.status == 2) {
                if (this._isAssist == true) {
                    title = this.locale('assist' + outcome);
                    content = $('<div class="tip"></div> ').html(this.locale(this._assistType + outcome + '_content', {
                        sibling: result.defender,
                        opponent_force: this.opponentName
                    }));
                } else {
                    title = Mojo.utils.locale('force', this.action + '_' + this.battleType + outcome);
                    content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', this.action + '_' + this.battleType + outcome + '_content', {
                        'sibling': sibling,
                        'players': players,
                        'opponent_force': this.opponentName
                    }));
                }
            } else if (result.status == 3) {
                title = Mojo.utils.locale('force', 'forcewar_retreat');
                if (this.action == 'uniterebel' && this.battleType == 'defence') {
                    content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'uniterebel_' + this.battleType + '_retreat_answer', {
                        opponent_force: this.opponentName
                    }));
                } else {
                    content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'crazywar_' + this.battleType + '_retreat_answer', {
                        action: this.locale(this.action),
                        opponent_force: this.opponentName
                    }));
                }
            } else if (result.status == 4) {
                title = Mojo.utils.locale('force', this.action + '_' + this.battleType + outcome);
                content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', this.action + '_' + this.battleType + '_disband', {
                    'sibling': sibling
                }));
            } else if (result.status == 5) {
                title = this.locale(this.action) + this.locale('over');
                content = $('<div class="tip"></div>').html(this.locale('usurp_' + this.battleType + '_terminated'));
            } else {
                title = response.data.title;
                content = $('<div class="tip"></div>').html(response.errorMsg);
            }
            (new Mojo.com.CommonDialog(undefined, {
                title: title,
                content: content,
                rightBtnText: Mojo.utils.locale('common', 'close'),
                rightBtnClick: function (that) {
                    that.close();
                },
                close: function () {
                    if (callback instanceof Function) {
                        callback();
                    }
                }
            })).open();
            this._forcePage.getProfile().sync();
        },
        _actionForCapitulate: function () {
            var self = this;
            new Mojo.com.ForceNoticeDialog({}, {
                title: Mojo.utils.locale('force', 'capitulate'),
                hintText: Mojo.utils.locale('force', 'capture_default_message'),
                hasDefaultMsg: true,
                maxlength: 　100,
                subhead: self.locale('capitulate_subhead'),
                beforeend: self.locale('capitulate_beforeend'),
                okBtnText: Mojo.utils.locale('force', 'capitulate'),
                okBtnClick: function (that) {
                    that.close();
                    Mojo.ajax('/forceCrazy/relationCapture', {
                        target_id: self.opponentId,
                        message: that.getContent()
                    }, function (response) {
                        if (response.errorCode == 0) {
                            (new Mojo.com.CommonDialog(undefined, {
                                title: self.locale('capitulate'),
                                content: $('<div class="tip"></div>').html(self.locale('capitulate_declaration', {
                                    name: self.opponentName
                                })),
                                rightBtnText: Mojo.utils.locale('common', 'close'),
                                rightBtnClick: function (that) {
                                    that.close();
                                }
                            })).open();
                        } else {
                            self._createFailedDlg(response);
                        }
                    }, function () {}, {
                        showWait: true
                    });
                }
            }).open();
        },
        _drawDefenceElement: function (data) {
            var btnDisabled = true;
            var self = this;
            if (self._isForceOwner() == true) {
                btnDisabled = false;
            }
            return (new Mojo.com.ForceWarElement(data, {
                btnText: Mojo.utils.locale('force', 'forcewar_change'),
                btnDisabled: btnDisabled,
                disableClickCallback: function () {
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'forcewar_only_owner_change_defender'));
                },
                clickCallback: function (forceWarElement) {
                    var selectedForceMemberElement = undefined;
                    var forcePage = self._forcePage;
                    forcePage.hideCurrent();
                    self.pause();
                    var forceMember = new Mojo.com.ForceMember({
                        showAssistTabs: true,
                        showHeader: true,
                        showSearch: false,
                        showOrder: false,
                        getController: function () {
                            return forcePage;
                        },
                        forceMemberListOptions: {
                            loadFunc: function (l, s, p, that) {
                                if (p != undefined) {
                                    self._helpflag = true;
                                } else {
                                    self._helpflag = false;
                                }
                                if (Mojo.utils.isNone(forceMember) == true) {
                                    self._helping = 0;
                                } else {
                                    self._helping = forceMember._getTabsId();
                                }
                                Mojo.ajax("/force/battleMembers", {
                                    start: l,
                                    count: s,
                                    helping: (self._helpflag ? p : self._helping)
                                }, function (response) {
                                    if (response && response.errorCode === 0) {
                                        forceMember._setResponseData(response.data);
                                        forceMember._addHelperTabs(response.data);
                                        that.appendData(response.data.list);
                                        if (response.data.list != undefined && response.data.list.length == that._options.pageSize) {
                                            that._more.show();
                                        } else {
                                            that._more.hide();
                                        }
                                        that.resize();
                                    }
                                }, function () {}, {
                                    showWait: true
                                });
                            }
                        },
                        backCallback: function () {
                            forceMember.element().remove();
                            forcePage.showCurrent();
                            self._refreshForceBattleStatus();
                            if (selectedForceMemberElement != undefined) {
                                forceWarElement._data.defender = {};
                                $.extend(true, forceWarElement._data.defender, selectedForceMemberElement._data);
                                forceWarElement.refresh();
                                self._helperId = (forceMember._getTabsId()) <= 0 ? 0 : (selectedForceMemberElement._data.force.id);
                                Mojo.ajax("/force/battleChangeDefender", (self._helperId ? {
                                    lodgment_id: data.id,
                                    defender_id: selectedForceMemberElement._data.id,
                                    helper: self._helperId
                                } : {
                                    lodgment_id: data.id,
                                    defender_id: selectedForceMemberElement._data.id
                                }), function (response) {
                                    forceWarElement._data.defender = {};
                                    $.extend(true, forceWarElement._data.defender, response.data);
                                    forceWarElement.refresh();
                                    Mojo.track.onEvent('24_701');
                                }, function () {
                                    forceWarElement.refresh();
                                }, {
                                    showWait: true
                                });
                            }
                        },
                        forceMemberElementOptions: {
                            showAttack: false,
                            showDefence: true,
                            showOffer: false,
                            showLogin: false,
                            showLevel: true,
                            showHr: false,
                            goBtnClass: ['choose-button', 'radio'],
                            goSpecialClass: '',
                            subClass: 'warClass',
                            goBtnText: "",
                            clickFunc: function (forceMemberElement) {
                                forceMember.element().find(".radio-selected-class").removeClass("radio-selected-class");
                                forceMemberElement.element().find(".choose-button").addClass("radio-selected-class");
                                selectedForceMemberElement = forceMemberElement;
                                forceMember._backBtn.text(Mojo.utils.locale('common', 'ok'));
                            }
                        }
                    });
                    forceMember.element().appendTo(forcePage.element());
                }
            }));
        },
        _createCrazyforceBattle: function () {
            if (Mojo.utils.isNone(this.parent._forceBattlePanel) == false && this.battleType == 'attack') {
                this.parent._forceBattlePanel.element().children().remove();
            }
            var needShowMore = false;
            if (this._isForceOwner(true)) {
                needShowMore = true;
            }
            var self = this;
            this._forceOpponentListPanel = new Mojo.ui.ListPanel("forcewar-opponent-listpanel", {
                scrollable: true,
                showMore: needShowMore,
                alwaysMore: needShowMore,
                pageSize: 20,
                moreLabel: Mojo.utils.locale('force', 'summon'),
                moreClick: function (that) {
                    new Mojo.com.ForceNoticeDialog({}, {
                        title: Mojo.utils.locale('force', 'usurp_war_help_title'),
                        hintText: Mojo.utils.locale('common', 'default_text'),
                        maxlength: 　100,
                        subhead: self.locale('usurp_war_help_subhead'),
                        okBtnClick: function (that) {
                            that.close();
                            Mojo.ajax("/force/sendWarToMember", {
                                content: that.getContent(),
                                type: self.action == 'uniterebel' ? 'urmember' : self.action,
                                isDefender: self.battleType == 'defence' ? 1 : undefined
                            }, function (response) {
                                Mojo.app.toast.show(Mojo.utils.locale('common', 'suggestion_has_send'));
                            }, function () {}, {
                                showWait: true
                            });
                        }
                    }).open();
                },
                loadFunc: function (s, l, p, that) {},
                drawFunc: function (data) {
                    var btnDisabled = false;
                    if (self.battleType == 'defence' && data.captured == undefined) {
                        btnDisabled = true;
                    }
                    if (data.captured) {
                        if (data.captured.defence_min || data.captured.friend == 1) {
                            btnDisabled = true;
                        }
                    }
                    var fwe = (new Mojo.com.ForceWarElement(data, {
                        showForce: true,
                        showDefence: true,
                        showHr: false,
                        showNonRMBPlayerAssistBtn: true,
                        btnText: Mojo.utils.locale('force', 'forcewar_battle_action'),
                        btnSpecial: "go-attack-btn",
                        btnDisabled: btnDisabled,
                        disableClickCallback: function (that) {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'has_captured'));
                        },
                        clickCallback: function (forceWarElement) {
                            var capturedPreviewDialog = new Mojo.com.ForceWarPreviewDialog(undefined, {
                                showtip: false,
                                attackBtnText: Mojo.utils.locale('force', 'forcewar_battle_action'),
                                title: Mojo.utils.locale('force', 'forcewar_battle_preview'),
                                tips: self.locale('usurp_battle_tip'),
                                attackerName: self._forcePage.getPlayerProfile().name,
                                defenderName: (data.defender ? data.defender.name : "?"),
                                actionCallback: function (that) {
                                    that.close();
                                    self._forceWarAjax("/forceCrazy/battleFightingAttack", {
                                        type: self.battleType,
                                        lodgment_id: data.id,
                                        force_id: self.partnerIds
                                    }, function (response) {
                                        if (response && response.errorCode === 0) {
                                            var resultTitle = "";
                                            var resultTip = "";
                                            var reversedTip = "";
                                            var leftBtnText = "";
                                            var rightBtnText = Mojo.utils.locale('common', 'close');
                                            var fight = response.data.attack;
                                            if (fight.player) {
                                                if (parseInt(fight.player.sp) == NaN) {
                                                    fight.player.sp = 0;
                                                }
                                                Mojo.page.Force.getController().updatePlayerProfile({
                                                    sp: fight.player.sp
                                                });
                                                Mojo.page.Force.getController().diffPlayer({
                                                    grain: fight.results.grain
                                                });
                                            }
                                            if (fight != undefined) {
                                                var leftBtnDisabled = false;
                                                var playerLevel = self._forcePage.getPlayerProfile().level;
                                                if (fight.status == 1) {
                                                    self._refreshForceBattleStatus(true);
                                                    forceWarElement.element().addClass("has-captured");
                                                    forceWarElement._elementButton.disable(true);
                                                    leftBtnText = Mojo.utils.locale('package', 'package_switch');
                                                    resultTitle = Mojo.utils.locale('force', 'capture_win');
                                                    if (fight['switch'] == 1) {
                                                        reversedTip = self.locale(self.action + '_' + self.battleType + 'er_win_momentum');
                                                    }
                                                    if (fight.defender == undefined) {
                                                        if (playerLevel < 105) {
                                                            leftBtnDisabled = true;
                                                            leftBtnText = undefined;
                                                        }
                                                        resultTip = Mojo.utils.locale('force', 'win_lodgment_without_defender', {
                                                            'lodgment': data.name
                                                        }) + reversedTip;
                                                    } else {
                                                        if (playerLevel < 105) {
                                                            leftBtnText = Mojo.utils.locale('battle', 'formation detail');
                                                        } else {
                                                            rightBtnText = Mojo.utils.locale('battle', 'formation detail');
                                                        }
                                                        var defendername = Mojo.utils.formatPlayerName(fight.defender);
                                                        resultTip = Mojo.utils.locale('force', 'win_lodgment_with_defender', {
                                                            'defendername': defendername,
                                                            'lodgment': data.name
                                                        }) + reversedTip;
                                                    }
                                                } else {
                                                    forceWarElement.element().removeClass("has-captured");
                                                    forceWarElement._elementButton.disable(false);
                                                    leftBtnText = Mojo.utils.locale('force', 'capture_again');
                                                    resultTitle = Mojo.utils.locale('force', 'capture_lose');
                                                    rightBtnText = Mojo.utils.locale('battle', 'formation detail');
                                                    var defendername = Mojo.utils.formatPlayerName(fight.defender);
                                                    resultTip = Mojo.utils.locale('force', 'lose_lodgment_defender', {
                                                        'defendername': defendername,
                                                        'lodgment': data.name
                                                    });
                                                    if (fight.defender == undefined) {
                                                        rightBtnText = Mojo.utils.locale('common', 'close');
                                                    }
                                                }
                                                var dlgContent = $('<div class="tip"><div class="fight-result">' + resultTip + '</div></div>');
                                                var offer = $('<div class="fight-offer"></div>');
                                                new Mojo.ui.Label(undefined, {
                                                    classes: ['grain'],
                                                    text: "+" + fight.results.grain
                                                }).element().appendTo(offer);
                                                new Mojo.ui.Label(undefined, {
                                                    classes: ['contribute'],
                                                    text: Mojo.utils.locale('force', 'offer1') + "+" + fight.results.contribute
                                                }).element().appendTo(offer);
                                                offer.appendTo(dlgContent);
                                                var onCloseFunc = function (battleDetail) {
                                                    (new Mojo.com.CommonDialog(undefined, {
                                                        title: resultTitle,
                                                        content: dlgContent,
                                                        leftBtnText: leftBtnText,
                                                        leftBtnDisabled: leftBtnDisabled,
                                                        leftBtnClick: function (that) {
                                                            if (fight.status == 1) {
                                                                if (playerLevel >= 105) {
                                                                    Mojo.app.redirect('/package');
                                                                } else {
                                                                    that.hide();
                                                                    (new Mojo.com.BattleDetailDialog(battleDetail, {
                                                                        pid: fight.defender.id,
                                                                        pkMode: true,
                                                                        vm: '+0',
                                                                        xp: '+0',
                                                                        entity: null,
                                                                        close: function () {
                                                                            that.show();
                                                                        },
                                                                    })).open(true);
                                                                }
                                                            } else {
                                                                that.close();
                                                                forceWarElement.doClick();
                                                            }
                                                        },
                                                        rightBtnText: rightBtnText,
                                                        rightBtnClick: function (that) {
                                                            if (fight.defender == undefined || (fight.defender != undefined && fight.status == 1 && playerLevel < 105)) {
                                                                that.close();
                                                            } else {
                                                                that.hide();
                                                                (new Mojo.com.BattleDetailDialog(battleDetail, {
                                                                    pid: fight.defender.id,
                                                                    pkMode: true,
                                                                    vm: '+0',
                                                                    xp: '+0',
                                                                    entity: null,
                                                                    close: function () {
                                                                        that.show();
                                                                    },
                                                                })).open(true);
                                                            }
                                                        }
                                                    })).open();
                                                };
                                                if (fight.defender == undefined) {
                                                    onCloseFunc(undefined);
                                                } else {
                                                    Mojo.ajax('/battle/Detail', {
                                                        type: 'ForceBattleFighting'
                                                    }, function (result) {
                                                        if (result.errorCode == 0) {
                                                            Mojo.ui.BattleAnimation.onclose = function () {
                                                                onCloseFunc(result.data);
                                                            };
                                                            Mojo.ui.BattleAnimation.openBattle(result);
                                                        }
                                                    }, function () {}, {
                                                        showWait: true
                                                    });
                                                }
                                            }
                                        } else {
                                            (new Mojo.com.CommonDialog(undefined, {
                                                title: response.data ? response.data.title : Mojo.utils.locale('force', 'forcewar_tip_title'),
                                                content: $('<div class="tip"></div>').html(response.errorMsg),
                                                leftBtnText: Mojo.utils.locale('common', 'ok'),
                                                leftBtnClick: function (that) {
                                                    that.close();
                                                }
                                            })).open();
                                        }
                                    }, function () {}, {
                                        showWait: true
                                    });
                                }
                            });
                            Mojo.ajax("/forceCrazy/battleFightingAttack", {
                                type: self.battleType,
                                lodgment_id: data.id,
                                force_id: self.partnerIds,
                                preview: 1
                            }, function (response) {
                                if (response && response.errorCode === 0) {
                                    var current = response.data;
                                    if (current != undefined) {
                                        capturedPreviewDialog.setPlayerName(current.attacker.name);
                                        if (current.defender) {
                                            capturedPreviewDialog.setOpponentName(current.defender.name);
                                        } else {
                                            capturedPreviewDialog.setOpponentName("?");
                                        }
                                        var winContent = $('<div><div class="lodgment-name">' + Mojo.utils.locale('force', 'capture_lodgment', {
                                            'name': data.name
                                        }) + '</div></div>');
                                        var offer = $('<div class="capture-offer"></div>');
                                        new Mojo.ui.Label(undefined, {
                                            classes: ['grain'],
                                            text: "+" + current.result.win.grain
                                        }).element().appendTo(offer);
                                        new Mojo.ui.Label(undefined, {
                                            classes: ['contribute'],
                                            text: Mojo.utils.locale('force', 'offer1') + " +" + current.result.win.contribute
                                        }).element().appendTo(offer);
                                        offer.appendTo(winContent);
                                        capturedPreviewDialog.setWinContents(winContent);
                                        var loseoffer = $('<div class="capture-offer"></div>');
                                        new Mojo.ui.Label(undefined, {
                                            classes: ['grain'],
                                            text: "+" + current.result.lose.grain
                                        }).element().appendTo(loseoffer);
                                        new Mojo.ui.Label(undefined, {
                                            classes: ['contribute'],
                                            text: Mojo.utils.locale('force', 'offer1') + " +" + current.result.lose.contribute
                                        }).element().appendTo(loseoffer);
                                        capturedPreviewDialog.setLoseContents($("<div></div>").append(loseoffer));
                                    }
                                    capturedPreviewDialog.open();
                                } else if (response && response.errorCode == 10003 && Mojo.utils.isNone(response.data) == false) {
                                    (new Mojo.com.NeedBuyDialog(undefined, {
                                        title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                        goods: response.data.props,
                                        stamina: response.data.stamina,
                                        restoreCount: response.data.sp,
                                        allRestoreText: Mojo.utils.locale('common', 'time for all sp'),
                                        allRestoreTime: response.data.sp_restore_pp,
                                        nextRestoreText: Mojo.utils.locale('common', 'time for next sp'),
                                        nextRestoreTime: response.data.sp_second,
                                        restoreText: response.errorMsg,
                                        needBuyTip: response.errorMsg,
                                        useBtnClick: function (that, result) {
                                            that.close();
                                            if (result && result.errorCode === 0) {
                                                Mojo.page.Force.getController().updatePlayerProfile({
                                                    sp: result.data.player.sp
                                                });
                                                Mojo.app.toast.show(Mojo.utils.locale('common', 'add_sp', {
                                                    name: that._options.goods.goods_name,
                                                    value: result.data.value
                                                }));
                                            }
                                        },
                                        buyBtnClick: function (that, result) {
                                            Mojo.page.Force.getController().updatePlayerProfile({
                                                rm: result.data.player.rm,
                                                vm: result.data.player.vm
                                            });
                                        }
                                    })).open();
                                } else {
                                    self._createFailedDlg(response);
                                }
                            }, function () {}, {
                                showWait: true
                            });
                        },
                        nonRMBClickCallback: function (forceWarElement, buffType) {
                            self._nonRMBClickCallback(data, forceWarElement, buffType, 0);
                        }
                    }));
                    return fwe;
                }
            });
            this._forceOpponentListPanel.element().addClass('non-rmb-player');
            if (self.battleType == 'defence') {
                this.parent._tabs.setPanel(1, this._forceOpponentListPanel);
            } else {
                this._forceOpponentListPanel._element.appendTo(this.parent._forceBattlePanel.element());
            }
            if (needShowMore) {
                this._forceOpponentListPanel._more.element().removeClass('more').addClass('button-big-red');
            }
            if (self._isForceOwner(true)) {
                if (self.battleType == 'attack') {
                    self._createRetreatButton();
                    this._retreatBtn.element().addClass('footer-btn').appendTo(this._forceOpponentListPanel._list);
                }
            }
            this._addHeaderToListPanel();
            this._refreshForceBattleStatus();
            this.inbattle = true;
        },
        _nonRMBClickCallback: function (data, forceWarElement, buffType, re_buff) {
            var self = this;
            // Mojo.app.toast.show(self.battleType+","+data.id+","+ self.partnerIds+","+buffType+","+re_buff);
            Mojo.ajax("/forceCrazy/battleLodgmentBuff", {
                type: self.battleType,
                lodgment_id: data.id,
                force_id: self.partnerIds,
                buff: buffType,
                re_buff: re_buff
            }, function (response) {
                if (response && response.errorCode === 0) {
                    if (response.data.player) {
                        if (parseInt(response.data.player.sp) == NaN) {
                            response.data.player.sp = 0;
                        }
                        Mojo.page.Force.getController().updatePlayerProfile({
                            sp: response.data.player.sp
                        });
                        Mojo.page.Force.getController().diffPlayer({
                            grain: 5
                        });
                    }
                    if (response.data.value != undefined) {
                        self._refreshForceBattleStatus(true);
                        var contribute = response.data.value;
                        if (buffType == 'decr') {
                            contribute = '-' + contribute;
                        } else if (buffType == 'incr') {
                            contribute = '+' + contribute;
                        }
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'non_rmb_player_assist_result', {
                            name: data.name,
                            percent: contribute
                        }));
                    }
                    setTimeout(function(){self._nonRMBClickCallback(data, forceWarElement, buffType, 1);},100);
                } else if (response && response.errorCode == 10200 && Mojo.utils.isNone(response.data) == false) {
                    Mojo.ajax('/entity/Use', {
                        id: response.data.props.id
                    }, function (result) {
                        if (result.errorCode == 0) {
                            self._nonRMBClickCallback(data, forceWarElement, buffType, 1);
                        } else {
                            Mojo.app.toast.show(result.errorMsg);
                        }
                    }, function () {
                        self._useBtn.disable(false);
                    }, {
                        showWait: false
                    });
                } else if (response && response.errorCode == 200082 || response.errorCode == 200088 || response.errorCode == 200089 || response.errorCode == 200083) {
                    self._nonRMBClickCallback(data, forceWarElement, buffType, 1);
                } else {
                    self._createFailedDlg(response);
                }
            }, function () {}, {
                showWait: false
            });
        },
        _addHeaderToListPanel: function () {
            var self = this;
            var attackForce = '.left';
            var defenceForce = '.left';
            if (self.battleType == 'defence') {
                attackForce = '.right';
            } else {
                defenceForce = '.right';
            }
            this._forceBattleStatus = $("<div></div>").addClass("page-tips  forcewar-battle-notice").appendTo(this._forceOpponentListPanel._header);
            this._forceBattleCountdown = $('<div></div>').addClass('progress-box').appendTo(this._forceOpponentListPanel._header).click(function () {
                new Mojo.com.ExplanationDialog(undefined, {
                    title: self.locale(self.action) + Mojo.utils.locale('common', 'explanation'),
                    picture: 'battle-progress',
                    explanation: self.locale(self.action + '_' + self.battleType + '_explanation')
                }).open();
            });
            this._forceBattleCountdown.append('<div class="left"></div><div class="right"></div>');
            this._ownForceTip = $('<div class="ownforce-tip"></div>').appendTo(this._forceBattleCountdown.find('.left'));
            var attackSide = this._forceBattleCountdown.find(attackForce);
            this._attackCountdown = new Mojo.ui.Progress(undefined, {
                classes: ['countdown'],
                labelTemplate: '',
            });
            this._attackTime = $('<div class="attack-time"></div>').appendTo(this._attackCountdown.element());
            this._attackCountdown.element().appendTo(attackSide);
            $('<div class="countdown-border"></div>').appendTo(attackSide);
            var defenceSide = this._forceBattleCountdown.find(defenceForce);
            this._defenceCountdown = new Mojo.ui.Progress(undefined, {
                classes: ['countdown'],
                labelTemplate: '',
            });
            this._defenceTime = $('<div class="defence-time"></div>').appendTo(this._defenceCountdown.element());
            this._defenceCountdown.element().appendTo(defenceSide);
            $('<div class="countdown-border"></div>').appendTo(defenceSide);
        },
        _usurpTargetForce: function () {
            var self = this;
            Mojo.ajax('/forceCrazy/battleUsurp', {
                preview: 0,
                defender_id: self.opponentId
            }, function (response) {
                if (response.errorCode == 0) {
                    self._forceSearch.element().remove();
                    self._forcePage.showCurrent();
                    if (self.parent._forceBattlePanel) {
                        self._forceWarAjax('/forceCrazy/battleStatus', {
                            type: self.battleType,
                            force_id: self.partnerIds
                        }, function (response) {
                            if (response && response.errorCode === 0) {
                                self._createCrazyforceBattle();
                            } else if (response.errorCode == 190701 && response.data != undefined) {
                                self._createCrazyForceMarch(response.data);
                            } else {
                                clearTimeout(self._forceBattleHandle);
                            }
                        }, function () {});
                    } else {
                        self.parent.refresh();
                    }
                    new Mojo.com.CommonDialog(undefined, {
                        title: Mojo.utils.locale('force', 'usurp'),
                        content: $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'usurp_war_tip', {
                            opponent_force: self.opponentName
                        })),
                        classes: ['rebel-start-dialog'],
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        },
                    }).open();
                    self._forcePage.getProfile().sync();
                } else if (response.errorCode == 190110) {
                    (new Mojo.com.CommonDialog(undefined, {
                        title: self.locale('lake_grain'),
                        content: $('<div class="paragraph"></div>').html(self.locale('grain_not_enouph')),
                        leftBtnText: Mojo.utils.locale('common', 'go_neizheng'),
                        leftBtnClick: function (that) {
                            that.close();
                            Mojo.app.redirect('/force', {
                                index: 1
                            });
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        }
                    })).open();
                } else if (response.errorCode == 200065) {
                    (new Mojo.com.NeedBuyDialog(undefined, {
                        title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                        goods: response.data.props,
                        data: response.data,
                        stamina: response.data.cp_total,
                        restoreCount: response.data.cp_current,
                        allRestoreText: Mojo.utils.locale('force', 'all_chanllenge_get'),
                        allRestoreTime: response.data.cp_restore_pp,
                        nextRestoreText: Mojo.utils.locale('force', 'next_chanllenge_get'),
                        nextRestoreTime: response.data.cp_second,
                        restoreText: response.errorMsg,
                        needBuyTip: response.errorMsg,
                        useBtnClick: function (that, result) {
                            if (result && result.errorCode === 0) {
                                Mojo.page.Force.getController().diffForce({
                                    challenge: parseInt(result.data.challenge)
                                });
                                self._options.updateChallange();
                                Mojo.app.toast.show(Mojo.utils.locale('common', 'add_cp', {
                                    name: that._options.goods.goods_name,
                                    value: result.data.challenge
                                }));
                            }
                        },
                        buyBtnClick: function (that, result) {
                            Mojo.page.Force.getController().updatePlayerProfile({
                                rm: result.data.player.rm,
                                vm: result.data.player.vm
                            });
                        }
                    })).open();
                } else {
                    self._createFailedDlg(response);
                }
            }, function () {}, {
                showWait: true
            });
        },
        _createCrazyForceMarch: function (data) {
            var self = this;
            var expireTime = parseInt(data.wait);
            this.opponentName = (this.battleType == 'attack') ? data.defender.name : data.attacker.name;
            if (Mojo.utils.isNone(this.parent._forceBattlePanel) == false && this.battleType == 'attack') {
                this.parent._forceBattlePanel.element().children().remove();
            }
            switch (parseInt(data.type)) {
            case 1:
                this.action = 'usurp';
                break;
            case 2:
                this.action = 'rebel';
                break;
            case 3:
                this.action = 'uniterebel';
                break;
            }
            this._CrazyForceMarchPanel = new Mojo.com.CrazyForceMarchPanel({
                expireTime: expireTime,
                opponentName: self.opponentName,
                action: self.action,
                battleType: self.battleType,
                partnerIds: self.partnerIds,
            }, {
                isForceOwner: function (isViceOwner) {
                    return self._isForceOwner(isViceOwner);
                },
                createFailedDlg: function (data) {
                    self._createFailedDlg(data);
                },
                createCrazyforceBattle: function () {
                    self._createCrazyforceBattle();
                },
                forceWarAjax: function (url, params, success, fail) {
                    self._forceWarAjax(url, params, success, fail);
                }
            });
            if (self.battleType == 'defence') {
                this.parent._tabs.setPanel(1, this._CrazyForceMarchPanel);
                this.parent._tabs.element().find('ul > li').eq(1).append($("<div class='battleStatus'></div>"));
            } else {
                this._CrazyForceMarchPanel._element.appendTo(this.parent._forceBattlePanel.element());
                this.parent._tabs.element().find('ul > li').eq(0).append($("<div class='battleStatus'></div>"));
            }
            this._refreshForceBattleStatus();
            this.inMarch = true;
        },
        _showBattleTipDialog: function (previewData) {
            var self = this;
            var usurpTipDlg = new Mojo.com.CommonDialog(undefined, {
                title: Mojo.utils.locale('force', 'usurp'),
                content: $('<div class="paragraph"></div>').html('主公~发起霸占需要用2个小时来行军准备，并扣除军令，确定要霸占这个势力吗？'),
                classes: ['usurp-tip-dialog'],
                leftBtnText: 　self.locale('usurp'),
                leftBtnClick: function (that) {
                    that.close();
                    self._usurpTargetForce();
                },
                rightBtnText: Mojo.utils.locale('common', 'close'),
                rightBtnClick: function (that) {
                    that.close();
                }
            });
            var challengeCost = $('<div class="cost-challenge"></div>').html('<div class="cc-content">' + self.locale('challenge_cost') + '</div>').appendTo(usurpTipDlg._content);
            var ccLabel = new Mojo.ui.Label(undefined, {
                text: previewData.challenge,
                classes: ['challenge'],
            });
            ccLabel.element().appendTo(challengeCost);
            $("<div class='tips'></div>").html(self.locale('force_war_tip3')).appendTo(usurpTipDlg._content);
            usurpTipDlg.open();
        },
        _actionForUsurp: function () {
            var self = this;
            Mojo.ajax('/forceCrazy/battleUsurp', {
                preview: 1,
                defender_id: self.opponentId
            }, function (response) {
                if (response.errorCode == 0) {
                    self._showBattleTipDialog(response.data);
                } else {
                    self._createFailedDlg(response);
                }
                if (parseInt(self._forceProfile.protect_status) == 1) {
                    self._forcePage.getProfile().sync();
                }
            }, function () {}, {
                showWait: true
            });
        },
        _createForceSearch: function (forceList) {
            var self = this;
            var temp = {};
            temp["excludes"] = self._forcePage.getForceProfile().id;
            temp["for"] = self.action;
            this._forcePage.hideCurrent();
            this._forceSearch = new Mojo.com.ForceSearch('forcewar-forcesearch', {
                backCallback: function () {
                    if (self.backBtnClick instanceof Function) {
                        self.backBtnClick();
                    } else {
                        self._forceSearch.element().remove();
                        self._forcePage.showCurrent();
                        self.parent._crazyForceWar = undefined;
                    }
                },
                forceSearchParams: temp,
                forceListOptions: {
                    type: self.targetForceId ? 'forceinfo' : 'crazyforce',
                    purpose: self.action,
                    typeOfbattle: self.action,
                    ids: self.targetForceId,
                    listData: forceList,
                    btnText: Mojo.utils.locale('force', self.action),
                    showForceRest: true,
                    moreLabel: Mojo.utils.locale('force', 'refresh'),
                    onBtnClick: function (data) {
                        self.opponentId = data.id;
                        self.opponentName = data.name;
                        switch (self.action) {
                        case 'capture':
                            Mojo.ajax('/forceCrazy/relationCapture', {
                                target_id: data.id,
                                preview: 1
                            }, function (response) {
                                if (response.errorCode == 0) {
                                    self._actionForCapitulate();
                                } else {
                                    self._createFailedDlg(response);
                                }
                                if (parseInt(self._forceProfile.protect_status) == 1) {
                                    self._forcePage.getProfile().sync();
                                }
                            }, function () {}, {
                                showWait: true
                            });
                            break;
                        case 'usurp':
                            self._actionForUsurp();
                            break;
                        }
                    },
                    inDefence: function (data) {
                        if (data.fighting < 0) {
                            this.showBtn = false;
                            switch (data.fighting) {
                            case -1:
                                this.inWarTxt = self.locale('be_usurp');
                                break;
                            case -2:
                                this.inWarTxt = self.locale('be_rebel');
                                break;
                            case -3:
                                this.inWarTxt = self.locale('be_uniterebel');
                                break;
                            }
                            return true;
                        }
                    }
                }
            });
            this._forceSearch.element().appendTo(self._forcePage.element());
        },
        _createFailedDlg: function (errorData) {
            var self = this;
            var t = errorData.data ? errorData.data.title : self.locale('forcewar_tip_title');
            var msg = errorData.errorMsg;
            if (Mojo.utils.isNone(msg) || msg == '') {
                msg = Mojo.utils.locale('common', 'action_error');
            }
            var lBtnTxt = undefined;
            var lBtnClkFun = undefined;
            switch (errorData.errorCode) {
            case 200080:
            case 200086:
                lBtnTxt = Mojo.utils.locale('common', 'go_neizheng');
                lBtnClkFun = function (that) {
                    that.close();
                    Mojo.app.redirect('/force', {
                        index: 1
                    });
                };
                msg = errorData.errorMsg;
                break;
            case 130204:
                lBtnTxt = Mojo.utils.locale('common', 'go_neizheng');
                lBtnClkFun = function (that) {
                    that.close();
                    Mojo.app.redirect('/force', {
                        index: 1
                    });
                };
                msg = errorData.errorMsg + "<br>" + self.locale('force_contribute_not_enough', {
                    force_level: this._forcePage.getForceProfile().level,
                    contribute: errorData.data.contribute
                });
                break;
            case 190101:
                t = self.locale('force_level_not_enough');
                msg = self.locale('force_level_not_enough_msg');
                break;
            case 194005:
            case 200014:
            case 200030:
                lBtnTxt = self.locale('forcewar_defense');
                lBtnClkFun = function (that) {
                    that.close();
                    if (self.parent._tabs) {
                        self.parent._tabs._select(1);
                    } else {
                        self._forcePage.switchTo(2, {
                            refresh: 1,
                            selected: 1
                        });
                    }
                };
                break;
            case 200012:
            case 200015:
            case 200018:
            case 200027:
            case 200028:
                lBtnTxt = self.locale('relation');
                lBtnClkFun = function (that) {
                    that.close();
                    Mojo.app.redirect('/relation');
                };
                break;
            case 200021:
                lBtnTxt = self.locale('forcewar_battle');
                lBtnClkFun = function (that) {
                    that.close();
                    self._forcePage.switchTo(2, {
                        refresh: 1
                    });
                };
                break;
            case 200085:
                if (Mojo.utils.isNone(t) || t == '') {
                    t = Mojo.utils.locale('force', '' + self.action + '_fail');
                }
                if (Mojo.utils.isNone(msg) || msg == '') {
                    msg = Mojo.utils.locale('force', '' + self.action + '_fail_forcerest');
                }
                break;
            default:
                break;
            }
            (new Mojo.com.CommonDialog(undefined, {
                title: t,
                content: $("<div class='tip'></div>").html(msg),
                leftBtnText: lBtnTxt,
                leftBtnClick: lBtnClkFun,
                rightBtnText: Mojo.utils.locale('common', 'close'),
                rightBtnClick: function (that) {
                    that.close();
                },
            })).open();
        },
        _usurpBattleStatusUpdate: function (battleData) {
            var self = this;
            var forceLodgmentsCount = battleData.amount.total;
            var turningPoint = undefined;
            if (this.action == 'uniterebel') {
                turningPoint = Math.ceil(battleData.amount.total / 2);
            } else if (this.action == 'rebel') {
                if (this.battleType == 'defence') {
                    turningPoint = battleData.amount.total;
                } else {
                    turningPoint = 1;
                }
            } else {
                if (this.battleType == 'defence') {
                    turningPoint = 1;
                } else {
                    turningPoint = battleData.amount.total;
                }
            }
            var forceCapturedCount = battleData.amount.captured;
            if (self.battleType == 'defence') {
                forceCapturedCount = battleData.amount.total - forceCapturedCount;
                self.opponentName = battleData.attacker.name;
            } else {
                self.opponentName = battleData.defender.name;
            }
            self._forceOpponentListPanel.element().find('.mojo-com-forcewarelement').remove();
            self._forceOpponentListPanel._children = [];
            self._forceOpponentListPanel.appendData(battleData.lodgments);
            var notice = 'usurp_war_notice';
            if (self.battleType == 'defence') {
                if (self._isAssist) {
                    notice = 'usurp_assist_notice';
                } else {
                    notice = 'usurp_def_notice';
                }
            }
            var statusHtml = Mojo.utils.locale('force', notice, {
                opponent_force: self.opponentName,
                battle_schedule: forceCapturedCount + '/' + forceLodgmentsCount
            });
            self._forceBattleStatus.html(statusHtml);
            if (self._ownTimeIsCount == true) {
                self._ownForceTip.html(self.locale('turning_point_condition') + forceCapturedCount + '/' + turningPoint);
            }
            self._attackTime.html(Mojo.utils.formatTime(battleData.eta.attacker));
            self._defenceTime.html(Mojo.utils.formatTime(battleData.eta.defender));
            self._attackCountdown.value({
                value: battleData.eta.attacker,
                max: self._expire.attacker
            });
            self._defenceCountdown.value({
                value: battleData.eta.defender,
                max: self._expire.defender
            });
        },
        _refreshForceBattleStatus: function (forceUpdate) {
            var self = this;
            if (forceUpdate != true) {
                if (self._counting == 1) {
                    if (self._attLimit > 0) {
                        self._attLimit -= 1;
                    }
                    if (self.battleType == 'attack') {
                        self._ownTimeIsCount = true;
                    } else {
                        self._ownTimeIsCount = false;
                        if (self._attLimit <= 0) {
                            self._ownForceTip.html(Mojo.utils.locale('ui', 'PK Win'));
                        } else {
                            self._ownForceTip.html(self.locale('time_tip_for_own_battle', {
                                time: Mojo.utils.formatSecTime(self._attLimit)
                            }));
                        }
                    }
                    self._timer = self._attLimit;
                    self._attackTime.html(Mojo.utils.formatTime(self._attLimit));
                    self._attackCountdown.value({
                        value: self._attLimit,
                        max: self._expire.attacker
                    });
                } else if (self._counting == 2) {
                    if (self._defLimit > 0) {
                        self._defLimit -= 1;
                    }
                    if (self.battleType == 'defence') {
                        self._ownTimeIsCount = true;
                    } else {
                        self._ownTimeIsCount = false;
                        if (self._defLimit <= 0) {
                            self._ownForceTip.html(Mojo.utils.locale('ui', 'PK Win'));
                        } else {
                            self._ownForceTip.html(self.locale('time_tip_for_own_battle', {
                                time: Mojo.utils.formatSecTime(self._defLimit)
                            }));
                        }
                    }
                    self._timer = self._defLimit;
                    self._defenceTime.html(Mojo.utils.formatTime(self._defLimit));
                    self._defenceCountdown.value({
                        value: self._defLimit,
                        max: self._expire.defender
                    });
                }
            }
            if (forceUpdate == true || self._timer == undefined || self._timer % self._options.interval == 0) {
                self._forceWarAjax('/forceCrazy/battleStatus', {
                    type: self.battleType,
                    force_id: self.partnerIds
                }, function (response) {
                    if (response && response.errorCode === 0) {
                        if (Mojo.utils.isNone(response.data) == false) {
                            self._counting = response.data.counting;
                            self._attLimit = response.data.eta.attacker;
                            self._defLimit = response.data.eta.defender;
                            self._attackerId = response.data.attacker.id;
                            self._defenderId = response.data.defender.id;
                            self._expire = response.data.eta.total;
                            self._usurpBattleStatusUpdate(response.data);
                        }
                    } else {
                        clearTimeout(self._forceBattleHandle);
                    }
                }, function () {});
            }
            if (forceUpdate != true) {
                self._forceBattleHandle = setTimeout(function () {
                    clearTimeout(self._forceBattleHandle);
                    self._refreshForceBattleStatus();
                }, 1000);
            }
        },
        _createRetreatButton: function () {
            var self = this;
            this._retreatBtn = new Mojo.ui.Button(undefined, {
                text: self.locale('forcewar_retreat'),
                click: function () {
                    if (self._isForceOwner(true) == false) {
                        if (self.action == 'uniterebel') {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'uniterebel_retreat_tip'));
                        } else {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'forcewar_retreat_tip'));
                        }
                        return;
                    }
                    (new Mojo.com.CommonDialog(undefined, {
                        title: Mojo.utils.locale('force', 'forcewar_retreat'),
                        content: $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'crazywar_retreat_question', {
                            forcename: self.opponentName,
                            action: self.locale(self.action)
                        })),
                        leftBtnText: Mojo.utils.locale('force', 'forcewar_retreat'),
                        leftBtnClick: function (that) {
                            that.close();
                            self._forceWarAjax("/forceCrazy/battleSurrender", {}, function (response) {
                                if (response.errorCode != 0) {
                                    self._createFailedDlg(response);
                                }
                            });
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        }
                    })).open();
                }
            });
        },
        localeCat: function () {
            return 'force';
        },
        _getUrlParam: function (name) {
            var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
            var r = window.location.search.substr(1).match(reg);
            if (r != null) return unescape(r[2]);
            return null;
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ScrollPanel = w.Mojo.Object.extend({
        init: function (id, options) {
            this._super(id, options);
            this.element().addClass('mojo-ui-listpanel');
            this._children = [];
            this._hasLoaded = false;
            var self = this;
            this._header = $('<div class="header"></div>').appendTo(this.element());
            this._list = $('<div class="list"></div>');
            this._scroll = new Mojo.ui.Scroll(undefined, this._list, {
                direction: 2
            });
            this.element().append(this._scroll.element());
            this._footer = $('<div class="footer"></div>').appendTo(this.element());
        },
        _getDefaultOptions: function () {
            return {
                refreshable: false,
                emptyLabel: null,
                onLoaded: undefined,
                direction: 2,
            };
        },
        _addChild: function (child) {
            if (child != undefined && child != null) {
                this._list.append(child.element().addClass("mojo-ui-listpanel-child"));
                this._children.push(child);
            }
        },
        appendData: function (data) {
            var self = this;
            setTimeout(function () {
                if (self._options.refreshable == true) {
                    self.initial();
                }
                if (data != undefined && data != null) {
                    if (Array.isArray(data)) {
                        $.each(data, function (i, d) {
                            self._addChild(d);
                        });
                    } else {
                        self._addChild(data);
                    }
                    if (self._hasLoaded === false && self._options.onLoaded instanceof Function) {
                        self._options.onLoaded(self);
                    }
                    self._hasLoaded = true;
                }
                self._list.find('.empty').remove();
                if (self._children.length == 0 && self._options.emptyLabel != null) {
                    self._list.append('<div class="empty">' + self._options.emptyLabel + "</div>");
                }
                self.rebinding();
                self.resize();
            }, 10);
        },
        remove: function (index) {
            this._list.children().eq(index).remove();
        },
        removeAll: function () {
            this._hasLoaded = false;
            this._list.empty();
        },
        clsname: function () {
            return "ui.ListPanel";
        },
        child: function (index) {
            return this._children[index];
        },
        children: function () {
            return this._children;
        },
        resize: function () {
            if (this._options.direction != 1) {
                var top = this.element().offset().top;
                var scrollTop = top + this._header.outerHeight(true);
                var scrollBottom = this._footer.outerHeight(true);
                var h = this.element().height() - this._header.outerHeight(true) - this._footer.outerHeight(true);
                var w = this.element().width();
                this._scroll._window.css({
                    'top': scrollTop + "px",
                    'bottom': scrollBottom + "px",
                    'height': h + "px",
                    'width': w + "px"
                });
            }
            this._scroll.refresh();
        },
        initial: function () {
            this._scroll.initial();
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.RelationBaseMenuElement = w.Mojo.Object.extend({
        clsname: function () {
            return "com.RelationBaseMenuElement";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass("mojo-com-relationmenuelement").addClass("relation-no-box-inner");
            this.elementId = options.elementId;
            this._buttonLabel = options.buttonLabel;
            this._buttonClickFun = options.buttonClickFun;
            this._elementName = options.elementName;
            this._elementDescription = options.elementDescription;
            this._elementDynamicInfo = options.elementDynamicInfo;
            this._cold_down = options.cold_down;
            this._messageRemindCount = options.messageRemindCount;
            this._buttonClickInfo = options.buttonClickInfo;
            this.hasColdDown = options.hasColdDown;
            this._coldDownWarning = options.coldDownWarning;
            this._imgClass = options.imgClass;
            this._exchangeClass = options.exchangeClass;
            this._hasHr = options.hasHr;
            this._descriptionImgClass = options.descriptionImgClass;
            this._playerInfo = options.playerInfo;
            this._count = undefined;
            this._setIcon();
            this._setButton();
            this._setDetail();
            if (this._hasHr == true) {
                $('<hr>').appendTo(this.element());
            }
        },
        _setIcon: function () {
            var self = this;
            this._icon = $("<div class='icon'></div>").addClass(this._imgClass);
            this._icon.append("<div class='help'></div>");
            var dlgtitle = self._elementName;
            var dlgdesc = self._elementDescription;
            if (this.elementId == 'fun-enroll') {
                dlgtitle = Mojo.utils.locale('relation', 'election_title');
                dlgdesc = '';
            }
            this._icon.click(function () {
                if (self.elementId == 'diplomacy') {
                    return;
                }
                var infoDlg = new Mojo.ui.Dialog(undefined, {
                    title: dlgtitle + Mojo.utils.locale('ui', 'Introduction'),
                    classes: ['relaion-tip-dialog']
                });
                new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('common', 'close'),
                    click: function () {
                        infoDlg.close();
                    }
                }).element().appendTo(infoDlg._footer);
                $('<div class="paragraph"></div>').html(dlgdesc).appendTo(infoDlg._content);
                if (self._descriptionImgClass != undefined) {
                    $('<div class="cartoon"></div>').addClass(self._descriptionImgClass).appendTo(infoDlg._content);
                }
                infoDlg.open();
            });
            this._icon.appendTo(this.element());
        },
        _setButton: function () {
            var self = this;
            this._goButton = new Mojo.ui.Button(undefined, {
                text: self._buttonLabel,
                click: self._buttonClickFun,
                disableClick: function () {
                    if (self._buttonClickInfo.isClickable == false) {
                        Mojo.app.toast.show(self._buttonClickInfo.warning);
                    } else if (self.hasColdDown && self.cd && self.cd > 0) {
                        if (self.elementId == 'fun-askforquit') {
                            Mojo.app.toast.show(Mojo.utils.locale('relation', 'slave_ask_for_quit_cooldownwarning', {
                                time: self._formatCDTime(self.cd)
                            }));
                            return;
                        }
                        if (self.elementId == 'fun-donateration' || self.elementId == 'fun-alliancedonate') {
                            Mojo.app.toast.show(Mojo.utils.locale('relation', 'can_not_donate_in_cd'));
                            return;
                        }
                        Mojo.app.toast.show(self._coldDownWarning);
                    } else {
                        Mojo.app.toast.show(self._coldDownWarning);
                    }
                },
                special: self._exchangeClass,
            });
            this.element().append(this._goButton.element());
            this._count = $("<div class='count'></div>");
            this._goButton.element().append(self._count);
            if (this._buttonClickInfo && this._buttonClickInfo.isClickable == false) {
                this._goButton.disable(true);
                this._count.hide();
            } else if (this._buttonClickInfo && this._buttonClickInfo.isClickable == true) {
                this._goButton.disable(false);
                this.updateButtonNotice(this._messageRemindCount);
            }
        },
        _setDetail: function () {
            var self = this;
            this.element().append('<div class="goods-detail"></div>');
            this._elementNameDiv = $('<div></div>').addClass("goods-name").html(this._elementName).appendTo(this.element().find('.goods-detail'));
            this._dynamicinfo = $('<div></div>').addClass("goods-dynamicinfo").html(this._elementDynamicInfo || '').appendTo(this.element().find('.goods-detail'));
            this._elementDescriptionDiv = $('<div></div>').addClass("goods-description").html(this._elementDescription).appendTo(this.element().find('.goods-detail'));
            if (self.elementId == 'fun-free') {
                self._freeRelationDesc();
            } else if (this._buttonClickInfo && this._buttonClickInfo.isClickable == true && this.hasColdDown && this._cold_down && this._cold_down > 0) {
                this.cd = this._cold_down;
                this.showCd();
            }
        },
        _freeRelationDesc: function () {
            var self = this;
            if (!self._lblCd) {
                self._lblCd = new Mojo.ui.Label(undefined, {
                    text: '',
                    classes: ['cd', 'free-relation'],
                });
                self._lblCd.element().insertBefore(self.element().find('.goods-description'));
            }
            if (parseInt(self._options.relationInfo.slave_has_taxed) >= parseInt(self._options.relationInfo.tax_to_free)) {
                self._lblCd.element().addClass('text-red');
            } else {
                this._goButton.disable(true);
            }
            self._lblCd.text(Mojo.utils.locale('relation', 'free_expiretax') + self._options.relationInfo.slave_has_taxed + '/' + self._options.relationInfo.tax_to_free);
        },
        showCd: function () {
            var self = this;
            if (self.cd == undefined || self.cd == 0) return;
            this._goButton.disable(true);
            if (this._buttonClickInfo.slave_unite_rebel_status != undefined && this._buttonClickInfo.slave_unite_rebel_status == 1) {
                this._goButton.disable(false);
            }
            if (!self._lblCd) {
                self._lblCd = new Mojo.ui.Label(undefined, {
                    text: '',
                    classes: ['cd', 'text-red'],
                });
                self._lblCd.element().insertBefore(self.element().find('.goods-description'));
            }
            self._lblCd.text(Mojo.utils.locale('common', 'in_cd') + self._formatCDTime(self.cd));
            self._lblCd.show();
            self._interval = w.setInterval(function () {
                if (self.cd != undefined && self.cd > 1) {
                    self.cd--;
                    self._lblCd.text(Mojo.utils.locale('common', 'in_cd') + self._formatCDTime(self.cd));
                } else {
                    self.cd = 0;
                    w.clearInterval(self._interval);
                    self._goButton.disable(false);
                    self._lblCd.hide();
                }
            }, 1000);
        },
        _formatCDTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
        disableButtonStatus: function (level) {
            this._goButton.disable(false);
        },
        undisableButtonStatus: function (level) {
            this._goButton.disable(true);
        },
        updateButtonNotice: function (count) {
            if (count != 0) {
                if (count < 10) {
                    this._count.html(count);
                } else {
                    this._count.html("N");
                }
                this._count.show();
            } else {
                this._count.hide();
            }
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                zIndex: 1300
            });
        },
        update: function (params) {
            if (params.buttonClickInfo != undefined && params.buttonClickInfo != null) {
                this._buttonClickInfo = params.buttonClickInfo;
                if (this._buttonClickInfo.isClickable == false) {
                    this._goButton.disable(true);
                    this._count.hide();
                } else if (this._buttonClickInfo.isClickable == true) {
                    if (this.cd <= 0 || this.cd == undefined)
                        this._goButton.disable(false);
                    if (params.messageRemindCount != undefined && params.messageRemindCount != null) {
                        this.updateButtonNotice(params.messageRemindCount);
                    }
                    if (params.code_down != undefined && params.code_down != null && params.code_down > 0 && (this.cd <= 0 || this.cd == undefined)) {
                        this.cd = params.code_down;
                        if (params.buttonClickInfo.slave_unite_rebel_status != undefined) {
                            this._buttonClickInfo.slave_unite_rebel_status = params.buttonClickInfo.slave_unite_rebel_status;
                        }
                        this.showCd();
                    }
                }
            }
            if (params.elementDynamicInfo != undefined && params.elementDynamicInfo != null) {
                this._dynamicinfo.html(params.elementDynamicInfo);
            }
            if (params.elementName != undefined && params.elementName != null) {
                this._elementNameDiv.html(params.elementName);
            }
            if (params.elementDescription != undefined && params.elementDescription != null) {
                this._elementDescriptionDiv.html(params.elementDescription);
            }
            if (params.buttonLebel != undefined && params.buttonLebel != null) {
                this._goButton.text(params.buttonLebel);
            }
            if (this.elementId == 'fun-free') {
                this._options.relationInfo = params.code_down;
                this._freeRelationDesc();
            }
        },
        _initEvent: function () {
            var self = this;
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ExplanationDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ExplanationDialog";
        },
        init: function (id, options) {
            this._super(id, options);
            this.element().addClass("mojo-com-explanationdialog");
            this._addContent();
            this._addButton();
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('common', 'explanation'),
                picture: undefined,
                explanation: undefined
            });
        },
        _addContent: function () {
            var paragraph = $("<div class='paragraph'></div>").html(Mojo.utils.locale('force', 'explanation_content'));
            paragraph.appendTo(this._content);
            $("<div class='picture'></div>").addClass(this._options.picture).appendTo(this._content);
            $("<div class='paragraph'></div>").html(this._options.explanation).appendTo(this._content);
        },
        _addButton: function () {
            var self = this;
            this._footer.append((new Mojo.ui.Button('close-btn', {
                text: Mojo.utils.locale('ui', 'Close'),
                click: function () {
                    self.close();
                }
            })).element());
        }
    });
})(window, jQuery, undefined);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceEnemyMember = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceEnemyMember";
        },
        init: function (options) {
            this._super('com-force-member', options);
            this.element().addClass('mojo-com-forceenemymember');
            this.forceMemberList = undefined;
            this._forceProfile = this._options.getController().getForceProfile();
            this._playerProfile = this._options.getController().getPlayerProfile();
            this._createList();
        },
        _addTabs: function () {
            this._tabs = new Mojo.ui.Tabs('tabs-enemymember');
            this._tabs.addTab(this._options.forceName);
            this.element().append(this._tabs.element());
            this._panel = this._tabs.element().find('.panel').addClass('box-outter');
        },
        _addHeader: function () {
            this._header = new Mojo.ui.Label(undefined, {
                text: Mojo.utils.locale('force', 'member_count') + this._forceProfile.member_num + '/' + this._forceProfile.member_num_limit,
                classes: ['enemymember-count'],
            });
            if (this._options.showHeader) {
                this._header.element().appendTo(this.forceMemberList._header);
            }
        },
        update: function (data) {
            var self = this;
            if (data != undefined && data.player_num != this._forceProfile.member_num) {
                this._header.text(Mojo.utils.locale('force', 'member_count') + data.player_num + '/' + data.player_num_limit);
            }
            for (var i = 0; i < data.list.length; i++) {
                if (this._playerProfile.id == data.list[i].id) {
                    if (this._playerProfile.position_id != data.list[i].position_id) {
                        this._options.getController().sync(function () {
                            self._forceProfile = self._options.getController().getForceProfile();
                            self._playerProfile = self._options.getController().getPlayerProfile();
                        });
                        break;
                    }
                }
            }
        },
        _createList: function () {
            var self = this;
            var member = {
                id: this._playerProfile.id,
                position_id: parseInt(this._playerProfile.position_id),
                member_count: parseInt(this._forceProfile.member_num),
                forceProfile: this._forceProfile
            };
            var forceMemberListOptions = {
                type: 'member',
                member: member,
                refreshCallback: function () {
                    self.refresh();
                },
                updateCallback: function (data) {
                    self.update(data);
                }
            };
            if (Mojo.utils.isNone(this._options.forceMemberElementOptions) == false) {
                forceMemberListOptions["forceMemberElementOptions"] = this._options.forceMemberElementOptions;
            }
            if (Mojo.utils.isNone(this._options.forceMemberListOptions) == false) {
                $.extend(true, forceMemberListOptions, this._options.forceMemberListOptions);
            }
            this.forceMemberList = new Mojo.com.ForceMemberList(undefined, forceMemberListOptions);
            this.forceMemberList.element().appendTo(this._content);
        },
        _addButton: function () {
            var self = this;
            this._backBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'back'),
                click: function () {
                    if (self._options.backCallback instanceof Function) {
                        self._options.backCallback(self);
                    }
                },
                classes: ['force-back-btn'],
            });
            this._backBtn.element().appendTo(this.element());
        },
        _addCloseButton: function () {
            var self = this;
            this.closeBtn = new Mojo.ui.Button('close-btn', {
                text: Mojo.utils.locale('ui', 'Close'),
                click: function () {
                    self.close();
                },
            });
            this.closeBtn.element().appendTo(this._footer);
        },
        refresh: function () {
            var self = this;
            this._options.getController().sync(function () {
                self._profileUpdate();
            });
        },
        _profileUpdate: function () {
            this._forceProfile = this._options.getController().getForceProfile();
            this.forceMemberList.element().remove();
            this._createList();
            this._addHeader();
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                backCallback: function () {
                    self.element().hide();
                    self._options.getController().switchToHome();
                },
                forceMemberElementOptions: undefined,
                forceMemberListOptions: undefined,
                title: undefined,
            });
        },
        localeCat: function () {
            return 'force';
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.BattlePreviewDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.BattlePreviewDialog";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-battlepreviewdlg');
            this._addContent();
            this._addHandleButtons();
        },
        _addContent: function () {
            var self = this;
            this._name = $('<div class="name"></div>').appendTo(this._content);
            this._player = $('<div class="player"></div>').appendTo(this._name);
            $('<div class="player_icon"></div>').appendTo(this._player);
            this._playerName = $('<div class="player_name"></div>').html(self._data.player_name).appendTo(this._player);
            this._vs = $('<div class="vs"></div>').html('VS').appendTo(this._name);
            this._opp = $('<div class="opp"></div>').appendTo(this._name);
            $('<div class="opp_icon"></div>').appendTo(this._opp);
            this._oppName = $('<div class="opp_name"></div>').html(self._data.opponent_name).appendTo(this._opp);
            if (self._data.info == null || self._data.info == undefined) {
                this._ifwin = $('<div class="ifwin"></div>').appendTo(this._content);
                this._win = $('<div class="win"></div>').html(Mojo.utils.locale('common', 'when win')).appendTo(this._ifwin);
                this._ifwin.append((new Mojo.ui.Label(undefined, {
                    classes: ['winxp'],
                    text: self._data.win_xp,
                })).element());
                this._ifwin.append((new Mojo.ui.Label(undefined, {
                    classes: ['winvm'],
                    text: self._data.win_vm,
                })).element());
                this._iflose = $('<div class="iflose"></div>').appendTo(this._content);
                this._lose = $('<div class="lose"></div>').html(Mojo.utils.locale('common', 'when lose')).appendTo(this._iflose);
                this._iflose.append((new Mojo.ui.Label(undefined, {
                    classes: ['losexp'],
                    text: self._data.lose_xp,
                })).element());
                this._iflose.append((new Mojo.ui.Label(undefined, {
                    classes: ['losevm'],
                    text: self._data.lose_vm,
                })).element());
                if (this._options.atackBtnText == Mojo.utils.locale('battle', 'action')) {
                    if (self._data.is_friend_or_colleague) {
                        $("<div></div>").addClass('tips larger-and-red').appendTo(this._content).html(Mojo.utils.locale('battle', 'battle_friend_or_colleague_tip'));
                    } else {
                        $("<div></div>").addClass('tips').appendTo(this._content).html(Mojo.utils.locale('battle', 'battle_tip'));
                    }
                } else if (this._options.atackBtnText == Mojo.utils.locale('rob', 'rob')) {
                    if (self._data.is_friend_or_colleague) {
                        $("<div></div>").addClass('tips larger-and-red').appendTo(this._content).html(Mojo.utils.locale('battle', 'battle_friend_or_colleague_tip'));
                    }
                }
                if (self._data.entity_rate != null && self._data.entity_rate != undefined && self._data.entity_rate != '') {
                    this._rate = $('<div class="rate"></div>').html(self._data.entity_rate).appendTo(this._ifwin);
                } else if (!self._options.pk_mode && self._options.entity_id == '') {
                    this._rate = $('<div class="rate"></div>').html(Mojo.utils.locale('battle', 'win_message_06')).appendTo(this._ifwin);
                }
            } else {
                this._resultInfo = $('<div class="info"></div>').html(self._data.info).appendTo(this._content);
            }
        },
        _addHandleButtons: function () {
            var self = this;
            if (self._data.info == null || self._data.info == undefined) {
                this._attackBtn = new Mojo.ui.Button('attack-btn', {
                    special: 'button-big-red',
                    text: self._options.atackBtnText,
                    click: function () {
                        self._attackBtn.disable(true);
                        if (self._options.pk_mode) {
                            Mojo.ajax('/friend/Pk', {
                                friend_id: self._options.opponent_id,
                            }, function (result) {
                                if (result.errorCode == 0) {
                                    (new Mojo.com.BattleResultDialog(result.data, {
                                        opponent_id: self._options.opponent_id,
                                        opponent_name: self._options.opponent_name,
                                        pk_mode: true,
                                        type: self._options.type,
                                    })).open(true);
                                    self.close();
                                } else {
                                    (new Mojo.com.TipsDialog({
                                        title: Mojo.utils.locale('common', 'tips'),
                                        message: result.errorMsg,
                                    })).open(true);
                                    self.close();
                                }
                            }, function () {}, {
                                showWait: true,
                            });
                        } else {
                            if (self._options.entity_id != '') {
                                Mojo.track.onEvent('07_041');
                                Mojo.ajax('/battle/Rob', {
                                    opponent_id: self._options.opponent_id,
                                    entity_id: self._options.entity_id,
                                    message_id: self._options.message_id,
                                }, function (result) {
                                    if (result.errorCode == 0) {
                                        if (result.data.win == 1) {
                                            Mojo.track.onEvent('07_042');
                                            self._options.callback(self._options.entity_id, result.data.entity.valid, result.data.entity.medium_image);
                                        } else {
                                            Mojo.track.onEvent('07_043');
                                            self._options.callback(self._options.entity_id, 0, '');
                                        }
                                        self._options.fightProfile.data(result.data.player);
                                        self.close();
                                        var dlgtitle = '';
                                        if (result.data.win == 1) {
                                            dlgtitle = Mojo.utils.locale('battle', 'battle_result_formation_title_win');
                                        } else if (result.data.win == 0) {
                                            dlgtitle = Mojo.utils.locale('battle', 'battle_result_formation_title_lose');
                                        }
                                        setTimeout(function () {
                                            Mojo.ajax('/battle/Detail', {
                                                oid: self._options.opponent_id
                                            }, function (response) {
                                                if (response.errorCode == 0) {
                                                    Mojo.ui.BattleAnimation.onclose = function () {
                                                        var brdlg = new Mojo.com.BattleResultDialog(result.data, {
                                                            prevDlg_atackBtnText: Mojo.utils.locale('rob', 'rob'),
                                                            prevDlg_title: Mojo.utils.locale('rob', 'rob result preview'),
                                                            opponent_id: self._options.opponent_id,
                                                            opponent_name: self._options.opponent_name,
                                                            entity_id: self._options.entity_id,
                                                            message_id: self._options.message_id,
                                                            fightProfile: self._options.fightProfile,
                                                            callback: function (entity_id, entity_valid, entity_img) {
                                                                self._options.callback(entity_id, entity_valid, entity_img);
                                                            },
                                                            show_detail_first: true,
                                                            hideOpplist: function () {
                                                                if (self._options.hideOpplist instanceof Function) {
                                                                    self._options.hideOpplist();
                                                                }
                                                            },
                                                            rBtnClickCallback: function (that) {
                                                                var detailDlg = new Mojo.com.BattleDetailDialog(response.data, {
                                                                    title: dlgtitle,
                                                                    pid: self._options.opponent_id,
                                                                    entityId: self._options.entity_id,
                                                                    vm: result.data.vm,
                                                                    xp: result.data.xp,
                                                                    entity: result.data.entity,
                                                                    show_detail_first: true,
                                                                    close: function () {
                                                                        that.show();
                                                                    },
                                                                });
                                                                detailDlg.open();
                                                            }
                                                        });
                                                        brdlg.open(true);
                                                    };
                                                    Mojo.ui.BattleAnimation.openBattle(response);
                                                } else {}
                                            }, function () {}, {
                                                showWait: true
                                            });
                                        }, 100);
                                    } else {
                                        (new Mojo.com.TipsDialog({
                                            title: Mojo.utils.locale('common', 'tips'),
                                            message: result.errorMsg,
                                        })).open(true);
                                        self.close();
                                    }
                                }, function () {}, {
                                    showWait: true,
                                });
                            } else {
                                if (self._options.type == 'fight') {
                                    Mojo.track.onEvent('08_031');
                                } else if (self._options.type == 'enemy') {
                                    Mojo.track.onEvent('08_061');
                                }
                                Mojo.ajax('/battle/Attack', {
                                    opponent_id: self._options.opponent_id,
                                    message_id: self._options.message_id,
                                    from: self._options.from
                                }, function (result) {
                                    if (result.errorCode == 0) {
                                        if (self._options.fightProfile) {
                                            self._options.fightProfile.data(result.data.player);
                                        } else if (self._options.forceProfile) {
                                            self._options.forceProfile.updatePlayerProfile(result.data.player);
                                        }
                                        self.close();
                                        var dlgtitle = '';
                                        if (result.data.win == 1) {
                                            dlgtitle = Mojo.utils.locale('battle', 'battle_result_formation_title_win');
                                        } else if (result.data.win == 0) {
                                            dlgtitle = Mojo.utils.locale('battle', 'battle_result_formation_title_lose');
                                        }
                                        setTimeout(function () {
                                            Mojo.ajax('/battle/Detail', {
                                                oid: self._options.opponent_id
                                            }, function (response) {
                                                if (response.errorCode == 0) {
                                                    Mojo.ui.BattleAnimation.onclose = function () {
                                                        var brdlg2 = new Mojo.com.BattleResultDialog(result.data, {
                                                            prevDlg_atackBtnText: Mojo.utils.locale('battle', 'action'),
                                                            prevDlg_title: Mojo.utils.locale('battle', 'battle result preview'),
                                                            opponent_id: self._options.opponent_id,
                                                            opponent_name: self._options.opponent_name,
                                                            message_id: self._options.message_id,
                                                            fightProfile: self._options.fightProfile,
                                                            forceProfile: self._options.forceProfile,
                                                            type: self._options.type,
                                                            show_detail_first: true,
                                                            rBtnClickCallback: function (that) {
                                                                var detailDlg2 = new Mojo.com.BattleDetailDialog(response.data, {
                                                                    title: dlgtitle,
                                                                    pid: self._options.opponent_id,
                                                                    vm: result.data.vm,
                                                                    xp: result.data.xp,
                                                                    show_detail_first: true,
                                                                    close: function () {
                                                                        that.show();
                                                                    },
                                                                });
                                                                detailDlg2.open();
                                                            }
                                                        });
                                                        brdlg2.open(true);
                                                    };
                                                    Mojo.ui.BattleAnimation.openBattle(response);
                                                } else {}
                                            }, function () {}, {
                                                showWait: true
                                            });
                                        }, 500);
                                    } else {
                                        self.close();
                                        if (result.errorCode == 160003) {
                                            var dlg = new Mojo.com.CommonDialog(undefined, {
                                                title: Mojo.utils.locale('common', 'capacify_lack'),
                                                content: $('<div class="paragraph"></div>').html(Mojo.utils.locale('common', 'capacify_lack_tip')),
                                                leftBtnText: Mojo.utils.locale('common', 'go_intensify'),
                                                leftBtnClick: function () {
                                                    Mojo.app.redirect('/intensify');
                                                },
                                                rightBtnText: Mojo.utils.locale('common', 'go_sale'),
                                                rightBtnClick: function () {
                                                    Mojo.app.redirect('/entity', {
                                                        selected: 3
                                                    });
                                                },
                                                close: function () {
                                                    Mojo.app.redirect('/home');
                                                }
                                            });
                                            dlg.open();
                                        } else if (result.errorCode == 30100) {
                                            (new Mojo.com.TipsDialog({
                                                title: Mojo.utils.locale('battle', 'battle_fail_title'),
                                                message: Mojo.utils.locale('battle', 'battle_fail_content'),
                                            })).open(true);
                                            self.close();
                                        } else {
                                            (new Mojo.com.TipsDialog({
                                                title: Mojo.utils.locale('common', 'tips'),
                                                message: result.errorMsg,
                                            })).open(true);
                                        }
                                    }
                                }, function () {}, {
                                    showWait: true,
                                });
                            }
                        }
                    },
                });
                this._footer.append(this._attackBtn.element());
            }
            this._footer.append((new Mojo.ui.Button('close-btn', {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                atackBtnText: Mojo.utils.locale('battle', 'action'),
                title: Mojo.utils.locale('battle', 'battle result preview'),
                opponent_id: '',
                opponent_name: '',
                entity_id: '',
                message_id: '',
                pk_mode: false,
                type: '',
                callback: $.noop,
                fightProfile: null,
                from: ''
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.BattleResultDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.BattleResultDialog";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-battleresultdlg');
            this._addContent();
            if (this._options.show_detail_first == true) {
                this._addHandleButtons2();
            } else {
                this._addHandleButtons();
            }
        },
        _addContent: function () {
            var self = this;
            if (self._data.win == 1) {
                self._options.title = Mojo.utils.locale('battle', 'battle_result_title_win');
                if (self._options.entity_id != '') {
                    self._options.title = Mojo.utils.locale('battle', 'battle_result_title_rob_win');
                    if (self._data.entity.valid == 1) {
                        if (self._data.friend_name != undefined) {
                            $('<div class="tip"></div>').html(Mojo.utils.locale('battle', 'win_message_07', {
                                name: self._options.opponent_name,
                                bonus: self._data.entity.name,
                                frdname: self._data.friend_name
                            })).appendTo(this._content);
                        } else {
                            if (Math.random() > 0.5) {
                                $('<div class="tip"></div>').html(Mojo.utils.locale('battle', 'win_message_01', {
                                    name: self._options.opponent_name,
                                    bonus: self._data.entity.name
                                })).appendTo(this._content);
                            } else {
                                $('<div class="tip"></div>').html(Mojo.utils.locale('battle', 'win_message_02', {
                                    name: self._options.opponent_name,
                                    bonus: self._data.entity.name
                                })).appendTo(this._content);
                            }
                        }
                        this._content.append('<div class="reward"></div>');
                        this._entity = new Mojo.com.LargeEntity(self._data.entity);
                        this._content.prepend(this._entity.element());
                    } else if (self._data.entity.valid == 0) {
                        $('<div class="tip"></div>').html(Mojo.utils.locale('battle', 'win_message_04', {
                            bonus: self._data.entity.name
                        })).appendTo(this._content);
                        this._content.append('<div class="reward"></div>');
                    } else if (self._data.entity.valid == -1) {
                        $('<div class="tip"></div>').html(Mojo.utils.locale('battle', 'win_message_05', {
                            name: self._options.opponent_name,
                            bonus: self._data.entity.name
                        })).appendTo(this._content);
                        this._content.append('<div class="reward"></div>');
                    }
                } else {
                    if (self._data.bonus != undefined && self._data.bonus != null) {
                        if (self._options.type == 'fight') {
                            Mojo.track.onEvent('08_032');
                        } else {
                            Mojo.track.onEvent('08_062');
                        }
                        if (Math.random() > 0.5) {
                            $('<div class="tip"></div>').html(Mojo.utils.locale('battle', 'win_message_01', {
                                name: self._options.opponent_name,
                                bonus: self._data.bonus.name
                            })).appendTo(this._content);
                        } else {
                            $('<div class="tip"></div>').html(Mojo.utils.locale('battle', 'win_message_02', {
                                name: self._options.opponent_name,
                                bonus: self._data.bonus.name
                            })).appendTo(this._content);
                        }
                        this._content.append('<div class="reward"></div>');
                        this._entity = new Mojo.com.LargeEntity(self._data.bonus);
                        this._content.prepend(this._entity.element());
                    } else {
                        $('<div class="tip"></div>').html(Mojo.utils.locale('battle', 'win_message_03', {
                            name: self._options.opponent_name
                        })).appendTo(this._content);
                        this._content.append('<div class="reward"></div>');
                    }
                }
                this._xp = self._data.xp;
                this._vm = self._data.vm;
                if (self._options.pk_mode == true) {
                    this._xp = '+0';
                    this._vm = '+0';
                }
                if (this._xp != undefined && this._xp != null) {
                    this._content.find('.reward').append((new Mojo.ui.Label(undefined, {
                        classes: ['xp'],
                        text: self._xp,
                    })).element());
                }
                if (this._vm != undefined && this._vm != null) {
                    this._content.find('.reward').append((new Mojo.ui.Label(undefined, {
                        classes: ['vm'],
                        text: self._vm,
                    })).element());
                }
            } else {
                if (self._options.entity_id != '') {
                    self._options.title = Mojo.utils.locale('battle', 'battle_result_title_rob_lose');
                } else {
                    if (self._options.type == 'fight') {
                        Mojo.track.onEvent('08_033');
                    } else {
                        Mojo.track.onEvent('08_063');
                    }
                    self._options.title = Mojo.utils.locale('battle', 'battle_result_title_lose');
                }
                $('<div class="tip"></div>').html(Mojo.utils.locale('battle', 'lose_message')).appendTo(this._content);
                this._content.append('<div class="reward"></div>');
                this._xp = self._data.xp;
                this._vm = self._data.vm;
                if (self._options.pk_mode == true) {
                    this._xp = '+0';
                    this._vm = '-0';
                }
                this._content.find('.reward').append((new Mojo.ui.Label(undefined, {
                    classes: ['xp'],
                    text: self._xp,
                })).element());
                this._content.find('.reward').append((new Mojo.ui.Label(undefined, {
                    classes: ['vm'],
                    text: self._vm,
                })).element());
            }
            this._title.html(this._options.title);
        },
        _addHandleButtons: function () {
            var self = this;
            if (self._options.entity_id != '' && self._data.entity != null && self._data.entity.valid != -1) {} else {
                if (self._options.tutorial_mode || (self._options.pk_mode == false && self._data.times >= 3)) {} else {
                    this._footer.append((this._attackBtn = new Mojo.ui.Button('attack-btn', {
                        special: 'button-big-red',
                        text: Mojo.utils.locale('common', 'attack_again'),
                        click: function () {
                            if (self._options.pk_mode) {
                                (new Mojo.com.BattlePreviewDialog({
                                    win_xp: '+0',
                                    win_vm: '+0',
                                    lose_xp: '+0',
                                    lose_vm: '-0',
                                    info: undefined,
                                }, {
                                    opponent_id: self._options.opponent_id,
                                    opponent_name: self._options.opponent_name,
                                    pk_mode: true,
                                })).open(true);
                                self.close();
                            } else {
                                if (self._options.entity_id != '') {
                                    Mojo.ajax('/battle/preview', {
                                        opponent_id: self._options.opponent_id,
                                        entity_id: self._options.entity_id,
                                        message_id: self._options.message_id,
                                    }, function (result) {
                                        if (result.errorCode == 0) {
                                            if (result.data.win == 1) {
                                                self._options.callback(self._options.entity_id, result.data.entity.valid, result.data.entity.medium_image);
                                            } else {
                                                self._options.callback(self._options.entity_id, 0, '');
                                            }
                                            self._options.fightProfile.data(result.data.player);
                                            (new Mojo.com.BattlePreviewDialog(result.data, {
                                                title: self._options.prevDlg_title,
                                                atackBtnText: self._options.prevDlg_atackBtnText,
                                                opponent_id: self._options.opponent_id,
                                                opponent_name: self._options.opponent_name,
                                                message_id: self._options.message_id,
                                                entity_id: self._options.entity_id,
                                                fightProfile: self._options.fightProfile,
                                                callback: function (entity_id, entity_valid, entity_img) {
                                                    self._options.callback(entity_id, entity_valid, entity_img);
                                                },
                                            })).open(true);
                                            self.close();
                                        } else if (result.errorCode == 10003) {
                                            self.hide();
                                            (new Mojo.com.SpDialog(result.data, {
                                                title: Mojo.utils.locale('common', 'no enough stamina'),
                                                message: result.errorMsg,
                                                fightProfile: self._options.fightProfile,
                                                close: function () {
                                                    self.show();
                                                },
                                            })).open(true);
                                        } else {
                                            self.hide();
                                            (new Mojo.com.TipsDialog({
                                                title: Mojo.utils.locale('common', 'tips'),
                                                message: result.errorMsg,
                                                close: function () {
                                                    self.show();
                                                },
                                            })).open(true);
                                        }
                                    }, function () {}, {
                                        showWait: true
                                    });
                                } else {
                                    Mojo.ajax('/battle/preview', {
                                        opponent_id: self._options.opponent_id,
                                        message_id: self._options.message_id,
                                    }, function (result) {
                                        if (result.errorCode == 0) {
                                            (new Mojo.com.BattlePreviewDialog(result.data, {
                                                title: self._options.prevDlg_title,
                                                atackBtnText: self._options.prevDlg_atackBtnText,
                                                opponent_id: self._options.opponent_id,
                                                opponent_name: self._options.opponent_name,
                                                message_id: self._options.message_id,
                                                fightProfile: self._options.fightProfile,
                                                forceProfile: self._options.forceProfile,
                                            })).open(true);
                                            self.close();
                                        } else if (result.errorCode == 10003) {
                                            self.hide();
                                            (new Mojo.com.SpDialog(result.data, {
                                                title: Mojo.utils.locale('common', 'no enough stamina'),
                                                message: result.errorMsg,
                                                fightProfile: self._options.fightProfile,
                                                close: function () {
                                                    self.show();
                                                },
                                            })).open(true);
                                        } else if (result.errorCode == 30100) {
                                            (new Mojo.com.TipsDialog({
                                                title: Mojo.utils.locale('battle', 'battle_fail_title'),
                                                message: Mojo.utils.locale('battle', 'battle_fail_content'),
                                            })).open(true);
                                            self.close();
                                        } else {
                                            self.hide();
                                            (new Mojo.com.TipsDialog({
                                                title: Mojo.utils.locale('common', 'tips'),
                                                message: result.errorMsg,
                                                close: function () {
                                                    self.show();
                                                },
                                            })).open(true);
                                        }
                                    }, function () {}, {
                                        showWait: true
                                    });
                                }
                            }
                        },
                    })).element());
                }
            }
            if (this._options.tutorial_mode === false) {
                this._footer.append((this._detailBtn = new Mojo.ui.Button('detail-btn', {
                    text: Mojo.utils.locale('battle', 'formation detail'),
                    click: function () {
                        if (self._options.pk_mode) {
                            Mojo.ajax('/battle/Detail', {
                                type: 'pk',
                                oid: self._options.opponent_id
                            }, function (result) {
                                if (result.errorCode == 0) {
                                    self.hide();
                                    (new Mojo.com.BattleDetailDialog(result.data, {
                                        pid: self._options.opponent_id,
                                        pkMode: true,
                                        vm: '+0',
                                        xp: '+0',
                                        entity: null,
                                        close: function () {
                                            self.show();
                                        },
                                    })).open(true);
                                } else {}
                            }, function () {}, {
                                showWait: true
                            });
                        } else {
                            if (self._options.entity_id != '') {
                                if (self._data.win == 1) {} else {
                                    Mojo.track.onEvent('07_044');
                                }
                                Mojo.ajax('/battle/detail', {
                                    oid: self._options.opponent_id
                                }, function (result) {
                                    if (result.errorCode == 0) {
                                        self.hide();
                                        (new Mojo.com.BattleDetailDialog(result.data, {
                                            pid: self._options.opponent_id,
                                            entityId: self._options.entity_id,
                                            vm: self._data.vm,
                                            xp: self._data.xp,
                                            entity: self._data.entity,
                                            close: function () {
                                                self.show();
                                            },
                                        })).open(true);
                                    } else {}
                                }, function () {}, {
                                    showWait: true
                                });
                            } else {
                                if (self._data.win == 1) {} else if (self._options.type == 'fight') {
                                    Mojo.track.onEvent('08_034');
                                } else {
                                    Mojo.track.onEvent('08_064');
                                }
                                Mojo.ajax('/battle/detail', {
                                    oid: self._options.opponent_id
                                }, function (result) {
                                    if (result.errorCode == 0) {
                                        self.hide();
                                        (new Mojo.com.BattleDetailDialog(result.data, {
                                            pid: self._options.opponent_id,
                                            vm: self._data.vm,
                                            xp: self._data.xp,
                                            close: function () {
                                                self.show();
                                            },
                                        })).open(true);
                                    } else {}
                                }, function () {}, {
                                    showWait: true
                                });
                            }
                        }
                    },
                    special: ((self._options.entity_id != '' && self._data.entity != null && self._data.entity.valid != -1) ? 'button-big-red' : ''),
                })).element());
            }
            if (self._options.entity_id != '' && self._data.entity != null && self._data.entity.valid != -1) {
                this._footer.append((new Mojo.ui.Button('close-btn', {
                    text: Mojo.utils.locale('ui', 'Close'),
                    click: function () {
                        if (self._options.tutorial_mode === true) {
                            self.close();
                            Mojo.app.redirect('/rob');
                        } else {
                            self.close();
                        }
                    },
                })).element());
            } else {
                if (self._options.tutorial_mode === true || (self._options.pk_mode == false && self._data.times >= 3)) {
                    this._footer.append((new Mojo.ui.Button('close-btn', {
                        text: Mojo.utils.locale('ui', 'Close'),
                        click: function () {
                            self.close();
                            if (self._options.tutorial_mode === true) {
                                Mojo.app.redirect('/battle');
                            }
                        },
                    })).element());
                } else {}
            }
            if (self._data.win == 0) {
                this._detailBtn.element().addClass('button-big-red');
                this._attackBtn.element().removeClass('button-big-red');
                this._footer.append(this._attackBtn.element());
            }
        },
        _addHandleButtons2: function () {
            var self = this;
            if (self._options.entity_id != '' && self._data.entity != null && self._data.entity.valid != -1) {
                this._footer.append((this._attackBtn = new Mojo.ui.Button('close-btn', {
                    text: Mojo.utils.locale('battle', 'formation detail'),
                    click: function () {
                        self.hide();
                        if (self._options.rBtnClickCallback instanceof Function) {
                            self._options.rBtnClickCallback(self);
                        }
                    },
                })).element());
            } else {
                if (self._options.tutorial_mode || (self._options.pk_mode == false && self._data.times >= 3)) {
                    this._footer.append((this._attackBtn = new Mojo.ui.Button('close-btn', {
                        text: Mojo.utils.locale('battle', 'formation detail'),
                        click: function () {
                            self.hide();
                            if (self._options.rBtnClickCallback instanceof Function) {
                                self._options.rBtnClickCallback(self);
                            }
                        },
                    })).element());
                } else {
                    this._footer.append((this._attackBtn = new Mojo.ui.Button('attack-btn', {
                        special: 'button-big-red',
                        text: Mojo.utils.locale('common', 'attack_again'),
                        click: function () {
                            if (self._options.pk_mode) {
                                (new Mojo.com.BattlePreviewDialog({
                                    win_xp: '+0',
                                    win_vm: '+0',
                                    lose_xp: '+0',
                                    lose_vm: '-0',
                                    info: undefined,
                                }, {
                                    opponent_id: self._options.opponent_id,
                                    opponent_name: self._options.opponent_name,
                                    pk_mode: true,
                                })).open(true);
                                self.close();
                            } else {
                                if (self._options.entity_id != '') {
                                    Mojo.ajax('/battle/preview', {
                                        opponent_id: self._options.opponent_id,
                                        entity_id: self._options.entity_id,
                                        message_id: self._options.message_id,
                                    }, function (result) {
                                        if (result.errorCode == 0) {
                                            if (result.data.win == 1) {
                                                self._options.callback(self._options.entity_id, result.data.entity.valid, result.data.entity.medium_image);
                                            } else {
                                                self._options.callback(self._options.entity_id, 0, '');
                                            }
                                            self._options.fightProfile.data(result.data.player);
                                            (new Mojo.com.BattlePreviewDialog(result.data, {
                                                title: self._options.prevDlg_title,
                                                atackBtnText: self._options.prevDlg_atackBtnText,
                                                opponent_id: self._options.opponent_id,
                                                opponent_name: self._options.opponent_name,
                                                message_id: self._options.message_id,
                                                entity_id: self._options.entity_id,
                                                fightProfile: self._options.fightProfile,
                                                callback: function (entity_id, entity_valid, entity_img) {
                                                    self._options.callback(entity_id, entity_valid, entity_img);
                                                },
                                                hideOpplist: function () {
                                                    if (self._options.hideOpplist instanceof Function) {
                                                        self._options.hideOpplist();
                                                    }
                                                },
                                            })).open(true);
                                            self.close();
                                        } else if (result.errorCode == 10003) {
                                            self.hide();
                                            (new Mojo.com.SpDialog(result.data, {
                                                title: Mojo.utils.locale('common', 'no enough stamina'),
                                                message: result.errorMsg,
                                                fightProfile: self._options.fightProfile,
                                                close: function () {
                                                    self.show();
                                                },
                                            })).open(true);
                                        } else {
                                            self.hide();
                                            (new Mojo.com.TipsDialog({
                                                title: Mojo.utils.locale('common', 'tips'),
                                                message: result.errorMsg,
                                                close: function () {
                                                    self.show();
                                                },
                                            })).open(true);
                                        }
                                    }, function () {}, {
                                        showWait: true
                                    });
                                } else {
                                    Mojo.ajax('/battle/preview', {
                                        opponent_id: self._options.opponent_id,
                                        message_id: self._options.message_id,
                                    }, function (result) {
                                        if (result.errorCode == 0) {
                                            (new Mojo.com.BattlePreviewDialog(result.data, {
                                                title: self._options.prevDlg_title,
                                                atackBtnText: self._options.prevDlg_atackBtnText,
                                                opponent_id: self._options.opponent_id,
                                                opponent_name: self._options.opponent_name,
                                                message_id: self._options.message_id,
                                                fightProfile: self._options.fightProfile,
                                                forceProfile: self._options.forceProfile,
                                            })).open(true);
                                            self.close();
                                        } else if (result.errorCode == 10003) {
                                            self.hide();
                                            (new Mojo.com.SpDialog(result.data, {
                                                title: Mojo.utils.locale('common', 'no enough stamina'),
                                                message: result.errorMsg,
                                                fightProfile: self._options.fightProfile,
                                                close: function () {
                                                    self.show();
                                                },
                                            })).open(true);
                                        } else if (result.errorCode == 30100) {
                                            (new Mojo.com.TipsDialog({
                                                title: Mojo.utils.locale('battle', 'battle_fail_title'),
                                                message: Mojo.utils.locale('battle', 'battle_fail_content'),
                                            })).open(true);
                                            self.close();
                                        } else {
                                            self.hide();
                                            (new Mojo.com.TipsDialog({
                                                title: Mojo.utils.locale('common', 'tips'),
                                                message: result.errorMsg,
                                                close: function () {
                                                    self.show();
                                                },
                                            })).open(true);
                                        }
                                    }, function () {}, {
                                        showWait: true
                                    });
                                }
                            }
                        },
                    })).element());
                }
            }
            if (this._options.tutorial_mode === false) {
                if (self._data.times >= 3 || (self._options.entity_id != '' && self._data.entity != null && self._data.entity.valid != -1)) {
                    if (self._data.times >= 3) {
                        this._footer.append((this._detailBtn = new Mojo.ui.Button('close-btn', {
                            text: Mojo.utils.locale('ui', 'Close'),
                            click: function () {
                                self.close();
                            },
                        })).element());
                    } else {
                        this._footer.append((this._detailBtn = new Mojo.ui.Button('close-btn', {
                            text: Mojo.utils.locale('rob', 'backToRob'),
                            click: function () {
                                self.close();
                                if (self._options.hideOpplist instanceof Function) {
                                    self._options.hideOpplist();
                                }
                            },
                        })).element());
                    }
                } else {
                    this._footer.append((this._detailBtn = new Mojo.ui.Button('close-btn', {
                        text: Mojo.utils.locale('battle', 'formation detail'),
                        click: function () {
                            self.hide();
                            if (self._options.rBtnClickCallback instanceof Function) {
                                self._options.rBtnClickCallback(self);
                            }
                        },
                    })).element());
                }
            }
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                prevDlg_atackBtnText: Mojo.utils.locale('battle', 'action'),
                prevDlg_title: Mojo.utils.locale('battle', 'battle result preview'),
                title: Mojo.utils.locale('battle', 'battle_result_title'),
                opponent_id: '',
                opponent_name: '',
                entity_id: '',
                message_id: '',
                pk_mode: false,
                tutorial_mode: false,
                fightProfile: null,
                type: '',
                zIndex: 1003,
                callback: $.noop,
                deviceaware: true
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.SpDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.SpDialog";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-spdlg');
            var self = this;
            this._message = $('<div class="paragraph"></div>').appendTo(this._content);
            self._goods = $('<div class="goods"></div>').appendTo(this._content);
            self._card = $('<div class="card"></div>').appendTo(self._goods);
            self._img = $('<img></img>').attr('src', '' + this._data.props.goods_small_image).appendTo(self._card);
            this._count = $('<div class="count"></div>').html(this._data.props.count).appendTo(self._card);
            self._name = $('<div class="name"></div>').html(this._data.props.goods_name).appendTo(self._goods);
            self._desc = $('<div class="desc"></div>').html(this._data.props.goods_description).appendTo(self._goods);
            self._price = $('<div class="price"></div>').appendTo(self._goods);
            self._priceTitle = $('<div class="price-title"></div>').html(Mojo.utils.locale('common', 'price in mall')).appendTo(self._price);
            self._priceIcon = $('<div class="price-icon"></div>').appendTo(self._price);
            self._priceValue = $('<div class="price-value"></div>').appendTo(self._price);
            if (this._data.props.goods_vm > 0) {
                self._priceValue.html(this._data.props.goods_vm);
            } else {
                self._priceValue.html(this._data.props.goods_rm);
            }
            this._interval = w.setInterval(function () {
                self._calcSp();
                self._refresh();
            }, 1000);
            this._addHandleButtons();
            $("<div class='tip'></div>").text(Mojo.utils.locale("common", "not enough sp")).appendTo(this.element());
            this._refresh();
            Mojo.track.onEvent('18_000');
        },
        _refresh: function () {
            this._count.html(this._data.props.count);
            this._message.html(this._genSptip(this._data));
            if (this._data.props.count <= 0) {
                this._useBtn.disable(true);
            } else {
                this._useBtn.disable(false);
            }
        },
        _genSptip: function (data) {
            var str = "" + this._options.message + "<br>" +
                Mojo.utils.locale('common', 'time for next sp') + this._genSpRestore(data) + "<br>" +
                Mojo.utils.locale('common', 'time for all sp') + this._genSpFullRestore(data) + "<br>";
            return str;
        },
        _genSpRestore: function (data) {
            var str = '';
            if (data.sp == data.stamina) {
                str = Mojo.utils.locale('common', 'has reached the maximum');
            } else {
                str = Mojo.utils.formatTime(data.sp_second);
            }
            return str;
        },
        _genSpFullRestore: function (data) {
            var str = '';
            if (data.sp == data.stamina) {
                str = Mojo.utils.locale('common', 'has reached the maximum');
            } else {
                str = Mojo.utils.formatTime((data.stamina - data.sp - 1) * data.sp_restore_pp + data.sp_second);
            }
            return str;
        },
        _calcSp: function () {
            if (this._data.sp < this._data.stamina) {
                this._data.sp_second--;
                if (this._data.sp_second < 0) {
                    this._data.sp_second = this._data.sp_restore_pp;
                    this._data.sp++;
                }
            }
        },
        _addBuyBtn: function () {
            var self = this;
            self._buyBtn = (new Mojo.ui.Button('buy-btn', {
                text: Mojo.utils.locale('common', 'buy'),
                click: function () {
                    self.hide();
                    var buyWarningDialog = new Mojo.ui.Dialog(undefined, {
                        title: Mojo.utils.locale('common', 'buy_warning_title'),
                        content: $('<div class="tip">' + Mojo.utils.locale('common', 'buy_warning_content') + '</div>'),
                        deviceaware: true
                    });
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'sure_buy'),
                        special: "button-big-red",
                        click: function () {
                            buyWarningDialog.close();
                            self.show();
                            Mojo.track.onEvent('18_001');
                            Mojo.ajax('/mall/Buy', {
                                id: self._data.props.goods_id,
                            }, function (result) {
                                self._buyBtn.disable(false);
                                if (result.errorCode == 0) {
                                    self._data.props.count = parseInt(self._data.props.count) + 1;
                                    self._data.props.id = result.data.entities[0].player_entity_id;
                                    self._refresh();
                                    Mojo.app.toast.show(Mojo.utils.locale("common", "buy sp succ"));
                                    if (self._options.forceProfile) {
                                        self._options.forceProfile.updatePlayerProfile(result.data.player);
                                    } else if (self._options.bgProfile) {
                                        self._options.bgProfile.data(result.data.player);
                                    }
                                } else {
                                    (new Mojo.com.BuyFailDialog({
                                        message: result.errorMsg,
                                    })).open(true);
                                }
                            });
                            self._buyBtn.disable(true);
                        }
                    }).element().appendTo(buyWarningDialog._footer);
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'think_again'),
                        special: 'button-big-blue',
                        click: function () {
                            buyWarningDialog.close();
                            self.show();
                        }
                    }).element().appendTo(buyWarningDialog._footer);
                    buyWarningDialog.open(true);
                }
            }));
            this._footer.append(self._buyBtn.element());
        },
        _addUseBtn: function () {
            var self = this;
            this._useBtn = (new Mojo.ui.Button('use-btn', {
                text: Mojo.utils.locale('common', 'use'),
                special: 'button-big-red',
                click: function () {
                    Mojo.track.onEvent('18_002');
                    Mojo.ajax('/entity/Use', {
                        id: self._data.props.id,
                    }, function (result) {
                        if (result.errorCode == 0) {
                            self._data.sp_second = result.data.player.sp_second;
                            self._data.sp_restore_pp = result.data.player.sp_restore_pp;
                            self._data.sp = result.data.player.sp;
                            self._data.stamina = result.data.player.stamina;
                            self._data.props.count = parseInt(self._data.props.count) - 1;
                            self._refresh();
                            if (self._options.fightProfile) {
                                self._options.fightProfile.spRefresh(self._data.sp);
                            } else if (self._options.bgProfile) {
                                self._options.bgProfile.data(result.data.player);
                            } else if (self._options.forceProfile) {
                                self._options.forceProfile.updatePlayerProfile(result.data.player);
                            }
                            Mojo.app.toast.show(Mojo.utils.locale('common', 'add_sp', {
                                name: self._data.props.goods_name
                            }));
                            if (result.data.player.sp >= result.data.player.stamina) {
                                w.clearInterval(self._interval);
                                self.close();
                            }
                        } else {}
                    }, function () {}, {
                        showWait: true
                    });
                },
            }));
            this._footer.append(this._useBtn.element());
        },
        _addHandleButtons: function () {
            this._addUseBtn();
            this._addBuyBtn();
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('common', 'no enough stamina'),
                message: '',
                zIndex: 1021,
                close: function () {
                    w.clearInterval(self._interval);
                },
                fightProfile: null,
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.CrazyForceMarchPanel = w.Mojo.Object.extend({
        clsname: function () {
            return "com.crazyforcemarchpanel";
        },
        init: function (data, options) {
            this._super('com-crazyforce-march-panel', options);
            var self = this;
            self._data = data;
            this.element().addClass('com-relation-free-panel');
            this._forceProfile = Mojo.page.Force.getController().getForceProfile();
            this._playerProfile = Mojo.page.Force.getController().getPlayerProfile();
            this._elementsList = [];
            this._list = new Mojo.com.ScrollPanel(undefined);
            this.element().append(this._list.element());
            this._addHeader();
            this._marchExpireTime = undefined;
            this._showExpire();
            this._list.appendData(this._marchExpireTime);
            this._elementsList.push(this._marchExpireTime);
            var march_content = undefined;
            if (this._data.battleType == 'attack') {
                march_content = "<br/><br/>" + Mojo.utils.locale("force", "march_content_" + self._data.action + '_attack', {
                    forcename: self._data.opponentName
                });
            } else {
                march_content = "<br/><br/>" + Mojo.utils.locale("force", "march_content_" + self._data.action + '_defence');
            }
            this._marchContent = new Mojo.ui.Label(undefined, {
                text: march_content,
                classes: ['march-content'],
            });
            this._list.appendData(this._marchContent);
            this._elementsList.push(this._marchContent);
            if (self._options.isForceOwner(true)) {
                if (self._data.battleType == 'attack') {
                    this._createRetreatButton();
                    this._list.appendData(this._retreatBtn);
                    this._elementsList.push(this._retreatBtn);
                }
            }
            self._updateinterval = w.setInterval(function () {
                self._updateStatus();
            }, 30000);
        },
        _addHeader: function () {
            var self = this;
            this._forceWarNoticeDiv = new Mojo.ui.Label(undefined, {
                classes: ['page-tips'],
            });
            if (this._data.battleType == "attack") {
                Mojo.page.Force.getController().sync(function () {
                    self._forceProfile = Mojo.page.Force.getController().getForceProfile();
                    self._forceWarNoticeDiv.text(Mojo.utils.locale('force', 'forcewar_no_battle', {
                        challenge: self._forceProfile.challenge,
                        challenge_limit: self._forceProfile.challenge_limit
                    }));
                    self._list._header.append(self._forceWarNoticeDiv.element());
                });
            } else {
                self._forceWarNoticeDiv.text(Mojo.utils.locale('force', 'forcewar_march_header'));
            }
        },
        _updateChallange: function (that, data) {
            if (that._forceWarNoticeDiv != undefined) {
                var force = data.force_info;
                that._forceWarNoticeDiv.html(Mojo.utils.locale('force', 'forcewar_no_battle', {
                    challenge: force.challenge,
                    challenge_limit: force.challenge_limit
                }));
            }
        },
        _showExpire: function () {
            var self = this;
            var march_expiretime = "march_expiretime_" + self._data.action + "_" + self._data.battleType;
            if (Mojo.utils.isNone(self._marchExpireTime)) {
                self._marchExpireTime = new Mojo.ui.Label(undefined, {
                    classes: ['march-time'],
                });
            } else {
                w.clearInterval(self._showinterval);
            }
            self._marchExpireTime.text("<br/>" + Mojo.utils.locale("force", march_expiretime, {
                expiretime: self._formatExpireTime(self._data.expireTime),
                forcename: self._data.opponentName
            }));
            self._showinterval = w.setInterval(function () {
                if (self._data.expireTime != undefined && self._data.expireTime > 1) {
                    self._data.expireTime--;
                    self._marchExpireTime.text("<br/>" + Mojo.utils.locale("force", march_expiretime, {
                        expiretime: self._formatExpireTime(self._data.expireTime),
                        forcename: self._data.opponentName
                    }));
                } else {
                    self._data.expireTime = 0;
                    w.clearInterval(self._showinterval);
                    self._marchExpireTime.text("<br/>" + Mojo.utils.locale("force", march_expiretime, {
                        expiretime: self._formatExpireTime(self._data.expireTime),
                        forcename: self._data.opponentName
                    }));
                    self._updateStatus();
                    w.clearInterval(self._showinterval);
                    w.clearInterval(self._updateinterval);
                }
            }, 1000);
        },
        _updateStatus: function () {
            var self = this;
            var partnerIds = Mojo.utils.getSomething("partnerId", false);
            self._options.forceWarAjax('/forceCrazy/battleStatus', {
                type: self._data.battleType,
                force_id: partnerIds
            }, function (response) {
                w.clearInterval(self._showinterval);
                if (response && response.errorCode == 0) {
                    w.clearInterval(self._updateinterval);
                    self._options.createCrazyforceBattle();
                } else if (response.errorCode == 190701) {
                    self._data.expireTime = response.data.wait;
                    self._showExpire();
                } else if (response.errorMsg != undefined && response.data.title != undefined) {
                    w.clearInterval(self._updateinterval);
                    (new Mojo.com.CommonDialog(undefined, {
                        title: response.data.title,
                        content: $("<div class='tip'></div>").html(response.errorMsg),
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                            Mojo.app.redirect('/force', {
                                index: 2
                            });
                        },
                    })).open();
                }
            }, function () {});
        },
        _formatExpireTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
        _createRetreatButton: function () {
            var self = this;
            this._retreatBtn = new Mojo.ui.Button(self._data.action + "-march-retreat-btn", {
                text: self.locale('forcewar_retreat'),
                click: function () {
                    if (self._options.isForceOwner(true) == false) {
                        if (self.action == 'uniterebel') {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'uniterebel_retreat_tip'));
                        } else {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'forcewar_retreat_tip'));
                        }
                        return;
                    }
                    (new Mojo.com.CommonDialog(undefined, {
                        title: Mojo.utils.locale('force', 'forcewar_retreat'),
                        content: $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'crazywar_retreat_question', {
                            forcename: self._data.opponentName,
                            action: self.locale(self._data.action)
                        })),
                        leftBtnText: Mojo.utils.locale('force', 'forcewar_retreat'),
                        leftBtnClick: function (that) {
                            that.close();
                            self._options.forceWarAjax("/forceCrazy/battleSurrender", {}, function (response) {
                                var sucesscontent = undefined;
                                if (response.errorCode == 0) {
                                    if (self._data.battleType == "attack") {
                                        sucesscontent = Mojo.utils.locale('force', "crazywar_attack_retreat_answer", {
                                            action: self.locale(self._data.action)
                                        });
                                    } else {
                                        sucesscontent = Mojo.utils.locale('force', "crazywar_defence_retreat_answer", {
                                            forcename: self._data.opponentName
                                        });
                                    }
                                    (new Mojo.com.CommonDialog(undefined, {
                                        title: Mojo.utils.locale('force', 'forcewar_retreat'),
                                        content: $('<div class="tip"></div>').html(sucesscontent),
                                        rightBtnText: Mojo.utils.locale('common', 'close'),
                                        rightBtnClick: function (that) {
                                            that.close();
                                            Mojo.app.redirect('/force', {
                                                index: 1
                                            });
                                        }
                                    })).open();
                                } else {
                                    self._options.createFailedDlg(response);
                                }
                            });
                        },
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                        }
                    })).open();
                }
            });
        },
        localeCat: function () {
            return 'force';
        }
    });
})(window, jQuery);;;
(function (w, $) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceRestDialog = w.Mojo.ui.Dialog.extend({
        init: function (data, options) {
            this._super(undefined, options);
            this._forceData = data;
            this.element().addClass('mojo-com-forcerestdlg');
            this._paragraph = $("<div class='paragraph'></div>").appendTo(this._content);
            this._addContent();
            this._addButtons();
        },
        _addContent: function () {
            var self = this;
            $('<div id="adjust_time_tips1" class="adjust-time-tips1"><div>').appendTo(this._paragraph).html(self.locale('adjust_times_tips1'));
            this._addInput();
            $('<div id="adjust_time_tips2" class="adjust-time-tips2"><div>').appendTo(this._paragraph).html(self.locale('adjust_times_tips2'));
            this._paragraph.find('.shareitem .input input').click(function () {
                this.selectionStart = 0;
                this.selectionEnd = this.value.length;
            });
            this._paragraph.find('.shareitem .input input').bind("change paste keyup input", function () {
                self._checkInput();
            });
        },
        _reset: function () {
            var self = this;
            self._invalid = false;
            self.okBtn.disable(false);
            self.okBtn.element().removeClass('err');
        },
        _checkInput: function () {
            var self = this;
            self._reset();
            var endTime = 0;
            self._paragraph.find('.shareitem .input input').each(function (i, e) {
                var v = $(e).val().trim();
                if (self._isValid(v)) {
                    var value = v == "" ? 0 : parseInt(v);
                    endTime = value + 10;
                    if (endTime >= 24) {
                        endTime = Mojo.utils.locale("force", "nextday") + (endTime - 24);
                    }
                } else {
                    self._invalid = true;
                    return;
                }
            });
            if (self._invalid) {
                self.okBtn.disable(true);
                self.okBtn.element().addClass('err');
            } else {
                self._adjustEndTime.element().html(Mojo.utils.locale("force", "until") + endTime + Mojo.utils.locale("force", "hour"));
            }
        },
        _isValid: function (v) {
            var regex = /^([0-9]|[1-4]\d)$/;
            if (v != "" && regex.test(v) && parseInt(v) >= 0 && parseInt(v) <= 23) {
                return true;
            }
            return false;
        },
        _addInput: function () {
            var self = this;
            var input_value = undefined;
            if (this._forceData.from != undefined) {
                input_value = parseInt(this._forceData.next);
            }
            var inputarea = $("<div class='input'></div>").append($("<div class='fromlabel'></div>").html(self.locale("from")));
            var _input = $("<input id = 'inputtext' type='text' maxlength='6' value='" + input_value + "'/>").attr('name', 'adjust_time_input').appendTo(inputarea);
            inputarea.append($("<div class='label'></div>").html(self.locale("hour")));
            self._adjustEndTime = new Mojo.ui.Label("adjust-end-time");
            inputarea.append(self._adjustEndTime.element());
            var restEndTime = undefined;
            var restEndText = undefined;
            restEndTime = parseInt(this._forceData.next) + 10;
            if (restEndTime >= 24) {
                restEndTime = restEndTime - 24;
            }
            if (parseInt(restEndTime) <= parseInt(self._forceData.next)) {
                restEndText = Mojo.utils.locale("force", "until") + Mojo.utils.locale("force", "nextday") + restEndTime + Mojo.utils.locale("force", "hour");
            } else {
                restEndText = Mojo.utils.locale("force", "until") + restEndTime + Mojo.utils.locale("force", "hour");
            }
            self._adjustEndTime.element().html(restEndText);
            var element = $("<div class='shareitem'></div>").append(inputarea).appendTo(this._paragraph);
        },
        _addButtons: function () {
            var self = this;
            self.okBtn = new Mojo.ui.Button(undefined, {
                special: 'button-big-red',
                text: Mojo.utils.locale('force', 'adjust'),
                disableClick: function () {
                    if (self.okBtn.element().hasClass('err')) {
                        if (self._invalid == true) {
                            Mojo.app.toast.show(self.locale('adjust_time_input_err'));
                        } else {
                            Mojo.app.toast.show(self.locale('adjust_time_input_update'));
                        }
                    } else {}
                },
                click: function () {
                    self.okBtn.element().trigger("focus");
                    self._setRestTime();
                }
            });
            self.okBtn.element().appendTo(this._footer);
            self.okBtn.disable(true);
            self.okBtn.element().addClass('err');
            var closeBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                }
            });
            closeBtn.element().appendTo(this._footer);
        },
        _setRestTime: function () {
            var self = this;
            var taxdata = self._paragraph.find('input[name="adjust_time_input"]').val().trim();
            var callBackData = {};
            callBackData['next'] = taxdata;
            this._content.append('<div class="waiting"></div>');
            this.okBtn.disable(true);
            Mojo.ajax("/forceCrazy/avoidingWar", {
                'start': taxdata,
            }, function (response) {
                if (response.errorCode == 0) {
                    self.close();
                    new Mojo.com.CommonDialog(undefined, {
                        title: Mojo.utils.locale('force', 'adjust_times_title'),
                        classes: ['tip-dialog'],
                        content: $("<div class='tip'></div>").html(self.locale("set_resttime_sucess")),
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                            self._options.callBackFunc(callBackData);
                        },
                        close: function () {
                            self._options.callBackFunc(callBackData);
                        },
                    }).open();
                } else {
                    var errDlg = new Mojo.ui.Dialog(undefined, {
                        title: Mojo.utils.locale('force', 'adjust_times_title'),
                        classes: ['tip-dialog'],
                        content: $("<div class='paragraph'></div>").html(response.errorMsg),
                    });
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'close'),
                        click: function () {
                            errDlg.close();
                        }
                    }).element().appendTo(errDlg._footer);
                    errDlg.open();
                }
            }, function () {}, {
                showWait: true
            });
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('force', 'adjust_times_title')
            });
        },
        localeCat: function () {
            return 'force';
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.PaymentElement = w.Mojo.Object.extend({
        clsname: function () {
            return "com.PaymentElement";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this._rmLabel = undefined;
            this._moneyLabel = undefined;
            this.element().addClass("mojo-com-payment-element").addClass("box-inner");
            if (parseInt(this._data.type) == 0) {
                this.element().addClass('payment-award');
            } else {
                this.element().addClass(Mojo.utils.getSomething("advertising") || this._options.advertising.status);
            }
            if (this._data.sub_id && (('' + this._data.sub_id).indexOf('month_ticket') >= 0)) {
                this.element().addClass('vip-recharge month-ticket-recharge');
                if ('super_month_ticket' == this._data.sub_id) {
                    this.element().addClass('super-month-ticket');
                }
            }
            if (this._data.sub_id && (('' + this._data.sub_id).indexOf('vip_recharge') >= 0)) {
                this.element().addClass('vip-recharge');
            }
            this._nameDiv = $('<div class="name"></div>').appendTo(this.element());
            this._prepaidDiv = $('<div class="prepaid"></div>').appendTo(this.element());
            this._advPrepaidDiv = $('<div class="advertising-prepaid"></div>').appendTo(this.element());
            this._descriptionDiv = $('<div class="description"></div>').appendTo(this.element());
            this._refresh();
        },
        _refresh: function () {
            var self = this;
            if (parseInt(this._data.type) == 0) {
                if (Mojo.utils.isNone(this._data.name) == false) {
                    this._nameDiv.html(this._data.name);
                }
            }
            if (Mojo.utils.isNone(this._data.description) == false) {
                this._descriptionDiv.html(this._data.description);
            }
            this._rmLabel = new Mojo.ui.Label(undefined, {
                text: this._data.rm
            });
            this._rmLabel.element().addClass("payment-rm-price").appendTo(this.element().find(".prepaid"));
            $('<div class="need"></div>').html("=").appendTo(this.element().find(".prepaid"));
            this._moneyLabel = new Mojo.ui.Label(undefined, {
                text: this._data.money
            });
            this._moneyLabel.element().addClass("payment-money-price").appendTo(this.element().find(".prepaid"));
            if (true === Mojo.gap.isPPZhushou) {
                this._moneyLabel.element().addClass("ppzhushou-money-price");
            }
            var btnTxt = Mojo.utils.locale('common', 'buy');
            var btnDisable = false;
            if (parseInt(this._data.type) == 0) {
                if (parseInt(this._data.status) == 1) {
                    btnTxt = Mojo.utils.locale('mall', 'has_buy');
                    btnDisable = true;
                } else if (('' + this._data.sub_id).indexOf('month_ticket') >= 0 && this._data.player_ticket && parseInt(this._data.player_ticket.buy_status) >= 3) {
                    if (3 == parseInt(this._data.player_ticket.status)) {
                        btnTxt = Mojo.utils.locale('mall', 'wait_buy_result');
                    } else {
                        btnTxt = Mojo.utils.locale('mall', 'has_buy');
                    }
                    btnDisable = true;
                } else if (('' + this._data.sub_id).indexOf('vip_recharge') >= 0 && 3 == parseInt(this._data.status)) {
                    btnTxt = Mojo.utils.locale('mall', 'wait_buy_result');
                    btnDisable = true;
                }
            }
            if (false == this._options.isRechargeSelf) {
                btnTxt = Mojo.utils.locale('mall', 'to_recharge_friend', {
                    '__default__': '赠送'
                });
            }
            var buyBtn = (new Mojo.ui.Button(undefined, {
                text: btnTxt,
                special: "button-small-red",
                disabled: btnDisable,
                click: function () {
                    if (parseInt(self._data.type) == 0) {
                        buyBtn.disable(true);
                        buyBtn.text(Mojo.utils.locale('mall', 'wait_buy_result'));
                    }
                    if (self._options.click instanceof Function) {
                        self._options.click(self._data, self);
                    }
                },
                disableClick: function () {
                    if (('' + self._data.sub_id).indexOf('month_ticket') >= 0 && parseInt(self._data.player_ticket.buy_status) == 4) {
                        Mojo.app.toast.show(Mojo.utils.locale('mall', 'month_ticket_has_buy', {
                            '__default__': '主公~再过{{:days}}天才能再次购买这个东东哦~',
                            'days': self._data.player_ticket.buy_days
                        }));
                    }
                }
            }));
            buyBtn.element().addClass("payment-btn").appendTo(this.element());
            if (this._data.sub_id && ('' + this._data.sub_id).indexOf('vip_recharge') >= 0) {
                var showAllVipRechargeBtn = new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('mall', 'show_all_vip_recharge', {
                        '__default__': '查看各级礼包'
                    }),
                    click: function () {
                        $('#payment-dialog').hide();
                        (new Mojo.com.VipRechargeListDialog(self._data.viplist, {
                            close: function () {
                                $('#payment-dialog').show();
                            }
                        })).open(true);
                    }
                });
                showAllVipRechargeBtn.element().addClass("show-all-vip-recharge").appendTo(this.element());
            }
            this._setAdvertising();
        },
        _setAdvertising: function () {
            var advertising = this._options.advertising.status;
            var discountMoney = this._data.discount_money;
            advertising = Mojo.utils.getSomething("advertising") || advertising;
            discountMoney = Mojo.utils.getSomething("discount") || discountMoney;
            if (advertising == "first" || advertising == "first_discount") {
                this._rmLabel.element().addClass("payment-before-price");
                new Mojo.ui.Label(undefined, {
                    text: parseInt((this._data.rm) * (isNaN(parseFloat(this._options.advertising.value)) ? 1 : parseFloat(this._options.advertising.value)))
                }).element().addClass("payment-rm-new-price").appendTo(this.element().find(".advertising-prepaid"));
            }
            if (advertising == "discount" || advertising == "first_discount") {
                this._moneyLabel.element().addClass("payment-before-price");
                new Mojo.ui.Label(undefined, {
                    text: discountMoney
                }).element().addClass("payment-money-new-price").appendTo(this.element().find(".advertising-prepaid"));
            }
        },
        _getDefaultOptions: function () {
            return {
                isRechargeSelf: true,
                click: undefined,
                advertising: {}
            };
        }
    });
})(window, jQuery);
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.VipRechargeListDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.VipRechargeListDialog";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-viprechargelistdialog');
            this.refreshList();
            this.refreshButton();
            var self = this;
            setTimeout(function () {
                if (self.list) {
                    self.list.resize();
                }
            }, 0);
        },
        refreshList: function () {
            var self = this;
            this.list = (new Mojo.ui.ListPanel(undefined, {
                scrollable: true,
                showMore: false,
                pageSize: 200,
                loadFunc: function (len, count, params, that) {
                    $('<div class="vip-recharge-tip box-inner"></div>').html(Mojo.utils.locale('mall', 'vip_recharge_tip', {
                        '__default__': '每级腾龙大礼包只能购买一次，购买完当前级别礼包后可获得购买下级礼包权利。'
                    })).appendTo(that._list);
                    that.appendData(self._data);
                },
                drawFunc: function (recharge) {
                    var rechargeObj = new Mojo.Object();
                    rechargeObj.element().addClass('box-inner vip-recharge-element');
                    $('<div class="image"><img src="' + recharge.small_image + '" /></div>').appendTo(rechargeObj.element());
                    var info = $('<div class="recharge-info"></div>').appendTo(rechargeObj.element());
                    $('<div class="recharge-name"></div>').html(recharge.name).appendTo(info);
                    $('<div class="recharge-description"></div>').html(recharge.description).appendTo(info);
                    var price = $('<div class="price"></div>').appendTo(info);
                    $('<div class="price-title"></div>').html(Mojo.utils.locale('common', 'price_title')).appendTo(price);
                    var moneyLabel = new Mojo.ui.Label(undefined, {
                        text: recharge.money
                    });
                    moneyLabel.element().addClass("payment-money-price").appendTo(price);
                    return rechargeObj;
                }
            }));
            this.list.element().appendTo(this._content);
        },
        refreshButton: function () {
            var self = this;
            (new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                }
            })).element().appendTo(this._footer);
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('mall', 'vip_recharge_list_dialog_title', {
                    '__default__': '礼包详情'
                })
            });
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceChallengePanel = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceChallengePanel";
        },
        init: function (options) {
            this._super('com-force-challenge-panel', options);
            this.element().addClass('com-force-challenge-panel');
            var self = this;
            this._playerProfile = this._options.getController().getPlayerProfile();
            this._forceProfile = this._options.getController().getForceProfile();
            this._elementsList = [];
            this._PRE_CHALLENGE_CODE = 230001;
            this._IN_CHALLENGE_CODE = 230002;
            this._CHALLENGE_FINISH_CODE = 230300;
            this._createChallengePanel();
        },
        pause: function () {
            var self = this;
            clearTimeout(self._forceBattleHandle);
        },
        _createChallengePanel: function () {
            var self = this;
            self._forceWarAjax("/forceBoss/index", {
                msgid: 0
            }, function (response) {
                if (response && response.errorCode == self._PRE_CHALLENGE_CODE) {
                    self._data = response.data;
                    self._createPreChallengePanel();
                } else if (response && response.errorCode == self._IN_CHALLENGE_CODE) {
                    response.data.boss = response.data.boss[response.data.battle.bossLevel];
                    self._data = response.data;
                    self._persistenceData = response.data;
                    self._createInChallengePanel();
                }
            }, function () {});
        },
        _addHeader: function () {
            this._header = $("<div class='page-tips'></div>");
            this._header.appendTo(this._content._header);
        },
        _createPreChallengePanel: function () {
            var self = this;
            if (this._content != undefined) {
                this._content.element().remove();
            }
            this._content = new Mojo.Object(undefined, {
                classes: ['pre-challenge-panel']
            });
            this._content._header = $('<div class="header"></div>').appendTo(this._content.element());
            this.element().append(this._content.element());
            this._addHeader();
            if (parseInt(self._data.challenge.free) > 0) {
                this._header.html(Mojo.utils.locale('force', 'force_boss_challenge_limit', {
                    num: self._data.challenge.free
                }));
            } else {
                this._header.html(Mojo.utils.locale('force', 'force_boss_challenge_limit2', {
                    num: self._data.limit
                }));
            }
            var preContent = $('<div class="mojo-com-forceboss-challenge-pre-content"></div>').appendTo(this._content.element());
            this._bossNameAndLevel = new Mojo.Object(undefined, {
                classes: ['com-force-challenge-boss-name']
            });
            this._bossNameAndLevel.element().html(Mojo.utils.locale('force', 'force_boss_name_level_title', {
                '__default__': Mojo.utils.locale('force', 'force_challenge_model_huangjin')
            }));
            preContent.append(this._bossNameAndLevel.element());
            this._detailButton = new Mojo.ui.Button('detail-btn', {
                text: Mojo.utils.locale('force', 'force_boss_challenge_detail'),
                click: function () {
                    new Mojo.com.ForceBossChallengeDetailDialog({
                        "detail": Mojo.utils.locale('force', 'force_boss_challenge_detail_content'),
                    }).open();
                },
            });
            preContent.append(this._detailButton.element());
            this._bossImage = new Mojo.Object(undefined, {
                classes: ['com-force-challenge-boss-img']
            });
            preContent.append(this._bossImage.element());
            this._bossInformation = new Mojo.Object(undefined, {
                classes: ['com-force-challenge-boss-information']
            });
            this._bossInformation.element().html(Mojo.utils.locale('force', 'force_boss_challenge_txt', {
                '__default__': Mojo.utils.locale('force', 'force_challenge_model_deadGod')
            }));
            preContent.append(this._bossInformation.element());
            this._bossChallengeNotice = new Mojo.Object(undefined, {
                classes: ['com-force-challenge-boss-challenge-notice']
            });
            this._bossChallengeNotice.element().html(Mojo.utils.locale('force', 'force_boss_challenge_btntip', {
                '__default__': Mojo.utils.locale('force', 'force_challenge_model_alert')
            }));
            preContent.append(this._bossChallengeNotice.element());
            this._challengeButton = new Mojo.ui.Button('challenge-btn', {
                text: Mojo.utils.locale('force', 'force_boss_challenge_newstart', {
                    '__default__': Mojo.utils.locale('force', 'force_challenge_model_attack')
                }),
                special: 'button-big-red',
                click: function () {
                    var bossLevelSelectDlg = new Mojo.com.ForceBossChallengeLevelSelectDialog(self._data, {
                        startChallenge: function (boss) {
                            bossLevelSelectDlg.close();
                            var dlg = new Mojo.com.ForceBossChallengePreviewDialog({
                                challenge_num: self._data.challenge.free,
                                challenge_rm: self._data.challenge.rm,
                                challenge_vm: self._data.challenge.vm,
                                niudanlist: self._data.rewards,
                                niudanId: self._data.rewards[0].id,
                                callback: function (niudanId) {
                                    if ((self._data.challenge.free > 0 && parseInt(self._playerProfile.vm) < parseInt(self._data.challenge.vm)) || (self._data.challenge.free == 0 && parseInt(self._playerProfile.rm) < parseInt(self._data.challenge.rm))) {
                                        var failDialog = new Mojo.ui.Dialog(undefined, {
                                            title: Mojo.utils.locale('force', "force_boss_challenge_lack_title")
                                        });
                                        if (self._data.challenge.free > 0) {
                                            $('<div class="tip"></div>').html(Mojo.utils.locale('force', "force_boss_challenge_lack_vm")).appendTo(failDialog._content);
                                            new Mojo.ui.Button(undefined, {
                                                text: Mojo.utils.locale('mall', 'go_vm'),
                                                special: "button-big-red",
                                                click: function () {
                                                    failDialog.close();
                                                    Mojo.app.redirect("/newmall", {
                                                        selected: 4
                                                    });
                                                }
                                            }).element().appendTo(failDialog._footer);
                                        } else if (self._data.challenge.free == 0) {
                                            $('<div class="tip"></div>').html(Mojo.utils.locale('force', "force_boss_challenge_lack_rm")).appendTo(failDialog._content);
                                            new Mojo.ui.Button(undefined, {
                                                text: Mojo.utils.locale('mall', 'go_payment'),
                                                special: "button-big-red",
                                                click: function () {
                                                    failDialog.close();
                                                    Mojo.app.redirect("/newmall", {
                                                        selected: 5
                                                    });
                                                }
                                            }).element().appendTo(failDialog._footer);
                                        }
                                        new Mojo.ui.Button(undefined, {
                                            text: Mojo.utils.locale('common', 'close'),
                                            special: "button-big-blue",
                                            click: function () {
                                                failDialog.close();
                                            }
                                        }).element().appendTo(failDialog._footer);
                                        failDialog.open();
                                        return;
                                    }
                                    var skip_cd = 0;
                                    if (self._data.challenge.free == 0) {
                                        skip_cd = 1;
                                    }
                                    self._forceWarAjax("/forceBoss/challenge", {
                                        niudan_id: niudanId,
                                        skip_cd: skip_cd,
                                        boss_level: boss.level
                                    }, function (response) {
                                        if (response && response.errorCode === 0) {
                                            self._createChallengePanel();
                                            new Mojo.com.CommonDialog(undefined, {
                                                title: Mojo.utils.locale('force', 'force_boss_challenge_start5'),
                                                content: $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'force_boss_challenge_tip_content').replace('{{:opponent_force}}', boss.name)),
                                                leftBtnText: Mojo.utils.locale('force', 'usurp_war_help'),
                                                leftBtnClick: function (that) {
                                                    that.close();
                                                    new Mojo.com.ForceNoticeDialog({}, {
                                                        title: Mojo.utils.locale('force', 'force_boss_challenge_start5'),
                                                        hasDefaultMsg: true,
                                                        hintText: Mojo.utils.locale('force', 'force_boss_challenge_hint_text'),
                                                        okBtnClick: function (that) {
                                                            that.close();
                                                            Mojo.ajax("/forceBoss/callingMember", {
                                                                content: that.getContent()
                                                            }, function (response) {
                                                                Mojo.app.toast.show(Mojo.utils.locale('common', 'suggestion_has_send'));
                                                            });
                                                        }
                                                    }).open();
                                                },
                                                rightBtnText: Mojo.utils.locale('common', 'close'),
                                                rightBtnClick: function (that) {
                                                    that.close();
                                                },
                                            }).open();
                                            self._options.getController().getProfile().sync();
                                        } else {
                                            if (response.errorCode == 230201) {
                                                var t = Mojo.utils.locale('force', 'forcewar_tip_title');
                                                if (response.data != undefined && response.data.title != undefined) {
                                                    t = response.data.title;
                                                }
                                                (new Mojo.com.CommonDialog(undefined, {
                                                    title: t,
                                                    content: $('<div class="tip"></div>').html(response.errorMsg),
                                                    leftBtnText: Mojo.utils.locale('common', 'ok'),
                                                    leftBtnClick: function (that) {
                                                        that.close();
                                                        Mojo.app.redirect('/force', {
                                                            index: 7
                                                        });
                                                    }
                                                })).open();
                                            } else {
                                                if (Mojo.utils.isNone(response.errorMsg) || response.errorMsg == '') {
                                                    response.errorMsg = Mojo.utils.locale('common', 'action_error');
                                                }
                                                (new Mojo.com.CommonDialog(undefined, {
                                                    title: response.data ? response.data.title : Mojo.utils.locale('force', 'forcewar_tip_title'),
                                                    content: $('<div class="tip"></div>').html(response.errorMsg),
                                                    leftBtnText: Mojo.utils.locale('common', 'ok'),
                                                    leftBtnClick: function (that) {
                                                        that.close();
                                                    }
                                                })).open();
                                            }
                                        }
                                    });
                                }
                            });
                            if (parseInt(self._data.challenge.rm) > 0) {
                                Mojo.ajax('/force/checkPlayerBuyedRm', {
                                    type: 'forceboss'
                                }, function (res2) {
                                    if (res2.errorCode == 0) {
                                        dlg.open();
                                    } else {
                                        (new Mojo.com.CommonDialog(undefined, {
                                            title: res2.data ? res2.data.title : Mojo.utils.locale('force', 'force_assistant_prompt_title'),
                                            content: $('<div class="tip"></div>').html(res2.errorMsg),
                                            leftBtnText: Mojo.utils.locale('common', 'ok'),
                                            leftBtnClick: function (that) {
                                                that.close();
                                            }
                                        })).open();
                                    }
                                }, function () {}, {
                                    showWait: true
                                });
                            } else {
                                dlg.open();
                            }
                        },
                    });
                    bossLevelSelectDlg.open();
                },
                disableClick: function () {
                    if (!(self._playerProfile.force_rights.__all__ || self._playerProfile.force_rights.start_challenge)) {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'force_boss_challenge_no_right'));
                    } else if (self._data.limit == 0) {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'force_boss_challenge_no_right2'));
                    }
                },
            });
            preContent.append(this._challengeButton.element());
            if (parseInt(self._playerProfile.position_id) > 3 || self._data.limit == 0) {
                self._challengeButton.disable(true);
            }
        },
        _createInChallengePanel: function () {
            var self = this;
            if (this._content != undefined) {
                this._content.element().remove();
            }
            this._content = new Mojo.Object(undefined, {
                classes: ['in-challenge-panel']
            });
            this._content._header = $('<div class="header"></div>').appendTo(this._content.element());
            this.element().append(this._content.element());
            this._addHeader();
            if (parseInt(self._data.challenge.free) > 0) {
                this._header.html(Mojo.utils.locale('force', 'force_boss_challenge_limit', {
                    num: self._data.challenge.free
                }));
            } else {
                this._header.html(Mojo.utils.locale('force', 'force_boss_challenge_limit2', {
                    num: self._data.limit
                }));
            }
            this._bossImage = new Mojo.Object(undefined, {
                classes: ['com-force-challenge-boss-img']
            });
            this._content.element().append(this._bossImage.element());
            this._bossNameAndLevel = new Mojo.Object(undefined, {
                classes: ['com-force-challenge-boss-name']
            });
            this._bossNameAndLevel.element().html(Mojo.utils.locale('force', 'force_boss_name_level2', {
                name: self._data.boss.name,
                level: self._data.boss.level
            }));
            this._bossImage.element().append(this._bossNameAndLevel.element());
            this._bossLeft = new Mojo.Object(undefined, {
                classes: ['com-force-challenge-boss-left']
            });
            this._bossLeft.element().html(Mojo.utils.locale('force', 'force_boss_left', {
                num: self._data.battle.left,
                wholenum: self._data.boss.life
            }));
            this._bossImage.element().append(this._bossLeft.element());
            this._bossFleeTime = new Mojo.Object(undefined, {
                classes: ['com-force-challenge-boss-flee-time']
            });
            this._bossImage.element().append(this._bossFleeTime.element());
            this._challengeProgress = new Mojo.ui.Progress(undefined, {
                classes: ['xp'],
                labelTemplate: '#{divide}',
            });
            this._challengeProgress.element().appendTo(this._bossImage.element());
            $('<div class="challenge-progress-border"></div>').appendTo(this._bossImage.element());
            this._channel = new Mojo.com.ForceBossMsgChannel('force_boss_msg_channel', {
                bossName: self._data.boss.name
            });
            this._content.element().append(this._channel.element());
            this._channel.appendChatMessages(this._data.list, this._data.time);
            var c = this._channel.getLatestChat();
            if (c == null) {
                this._defaultMsg = $('<div class="challenge-default-msg"></div>').html(Mojo.utils.locale('force', 'force_boss_challenge_attack_default_msg')).appendTo(this._channel.element());
            }
            this._bossAttackCD = new Mojo.Object(undefined, {
                classes: ['com-force-challenge-boss-attack-cd']
            });
            this._content.element().append(this._bossAttackCD.element());
            if (this._data.battle.attack.free > 0 && (this._cd == undefined || this._cd <= 0)) {
                this._bossAttackCD.element().html(Mojo.utils.locale('force', 'force_boss_challenge_freetimes', {
                    times: self._data.battle.attack.free
                }));
            }
            this._challengeButton = new Mojo.ui.Button('challenge-btn', {
                text: Mojo.utils.locale('force', 'force_boss_challenge_start4'),
                special: 'button-big-red',
                click: function () {
                    if (self._data.battle.attack.cost != undefined && parseInt(self._data.battle.attack.cost) > 0) {
                        var content = $('<div class="paragraph"></div>');
                        $('<div class="mojo-com-forceboss-attack-preview-header"></div>').html(Mojo.utils.locale('force', 'force_boss_challenge_attack_rm')).appendTo(content);
                        $('<div class="mojo-com-forceboss-attack-preview-cost"></div>').html(Mojo.utils.locale('force', 'force_boss_challenge_attack_preview_cost')).appendTo(content);
                        this._rm = new Mojo.ui.Label(undefined, {
                            classes: ['rm'],
                            text: '0',
                        });
                        this._rm.text(self._data.battle.attack.cost);
                        this._rm.element().appendTo(content);
                        var dlg = new Mojo.com.CommonDialog(undefined, {
                            title: Mojo.utils.locale('force', 'force_boss_challenge_attack_preview_not'),
                            content: content,
                            classes: ['force-boss-challenge-dlg-with-label'],
                            leftBtnText: Mojo.utils.locale('force', 'force_boss_challenge_attack_preview_speedup'),
                            leftBtnClick: function (that) {
                                that.close();
                                if (parseInt(self._playerProfile.rm) < parseInt(self._data.battle.attack.cost)) {
                                    var failDialog = new Mojo.ui.Dialog(undefined, {
                                        title: Mojo.utils.locale('force', "force_boss_challenge_speed_fail_title")
                                    });
                                    $('<div class="tip"></div>').html(Mojo.utils.locale('force', "force_boss_challenge_lack_rm")).appendTo(failDialog._content);
                                    new Mojo.ui.Button(undefined, {
                                        text: Mojo.utils.locale('mall', 'go_payment'),
                                        special: "button-big-red",
                                        click: function () {
                                            failDialog.close();
                                            Mojo.app.redirect("/newmall", {
                                                selected: 5
                                            });
                                        }
                                    }).element().appendTo(failDialog._footer);
                                    failDialog.open();
                                } else {
                                    self._attackBoss(1, 1);
                                }
                            },
                            rightBtnText: Mojo.utils.locale('common', 'close'),
                            rightBtnClick: function (that) {
                                that.close();
                            },
                        });
                        dlg.open();
                    } else {
                        self._attackBoss(1, 0);
                    }
                },
                disableClick: function () {
                    if (self._cd > 0) {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'force_boss_challenge_cd_content'));
                    }
                }
            });
            this._content.element().append(this._challengeButton.element());
            this._refreshForceBossStatus();
        },
        _attackBoss: function (is_preview, is_skip_cd) {
            var self = this;
            self._forceWarAjax("/forceBoss/attack", {
                preview: is_preview,
                skip_cd: is_skip_cd
            }, function (response) {
                if (response && response.errorCode === 0) {
                    response.data.opponent_army = ['huangjinjun.png'];
                    var capturedPreviewDialog = new Mojo.com.ForceWarPreviewDialog(undefined, {
                        attackBtnText: Mojo.utils.locale('force', 'force_boss_challenge_start4'),
                        title: Mojo.utils.locale('force', 'forcewar_battle_preview'),
                        attackerName: self._options.getController().getPlayerProfile().name,
                        defenderName: self._persistenceData.boss.name,
                        showtip: false,
                        actionCallback: function (that) {
                            that.close();
                            var c = self._channel.getLatestChat();
                            var mid = 0;
                            if (c != null) {
                                mid = c.id;
                            }
                            Mojo.ajax("/forceBoss/attack", {
                                preview: 0,
                                msgid: mid,
                                skip_cd: is_skip_cd
                            }, function (result) {
                                if (result && result.errorCode === 0) {
                                    var resultTitle = "";
                                    var resultTip = "";
                                    if (result.data.player) {
                                        if (parseInt(result.data.player.sp) == NaN) {
                                            result.data.player.sp = 0;
                                        }
                                        Mojo.page.Force.getController().updatePlayerProfile({
                                            sp: result.data.player.sp,
                                            rm: result.data.player.rm
                                        });
                                        Mojo.page.Force.getController().diffPlayer({
                                            grain: result.data.rewards.grain
                                        });
                                    }
                                    self._refreshForceBossStatus(true);
                                    var resultDlg = undefined;
                                    var dlgtitle = '';
                                    if (result.data.status == 1) {
                                        dlgtitle = Mojo.utils.locale('battle', 'battle_result_formation_title_win');
                                    } else if (result.data.status == 2) {
                                        dlgtitle = Mojo.utils.locale('battle', 'battle_result_formation_title_lose');
                                    }
                                    setTimeout(function () {
                                        Mojo.ajax('/battle/Detail', {}, function (res) {
                                            if (res.errorCode == 0) {
                                                res.data.defender.player.level = self._persistenceData.boss.level;
                                                Mojo.ui.BattleAnimation.onclose = function () {
                                                    if (result.data.rewards.entity != undefined) {
                                                        resultDlg = self._showAwardResult(result, res, dlgtitle);
                                                    } else {
                                                        resultDlg = self._showGrainAwardResult(result, res, dlgtitle);
                                                    }
                                                    resultDlg.open();
                                                };
                                                Mojo.ui.BattleAnimation.openBattle(res);
                                            } else {}
                                        }, function () {}, {
                                            showWait: true
                                        });
                                    }, 500);
                                } else if (result.errorCode === self._CHALLENGE_FINISH_CODE) {
                                    clearTimeout(self._forceBattleHandle);
                                    var dlgtitle = '';
                                    if (result.data.status == 1) {
                                        dlgtitle = Mojo.utils.locale('battle', 'battle_result_formation_title_win');
                                    } else if (result.data.status == 2) {
                                        dlgtitle = Mojo.utils.locale('battle', 'battle_result_formation_title_lose');
                                    }
                                    setTimeout(function () {
                                        Mojo.ajax('/battle/Detail', {}, function (res) {
                                            if (res.errorCode == 0) {
                                                res.data.defender.player.level = self._persistenceData.boss.level;
                                                Mojo.ui.BattleAnimation.onclose = function () {
                                                    var resultDlg2 = self._showForceWarResultDialog(result, function () {
                                                        Mojo.app.redirect('/force', {
                                                            index: 7
                                                        });
                                                    }, res, dlgtitle);
                                                };
                                                Mojo.ui.BattleAnimation.openBattle(res);
                                            } else {}
                                        }, function () {}, {
                                            showWait: true
                                        });
                                    }, 500);
                                } else if (result.errorCode === 230202) {
                                    var t = Mojo.utils.locale('force', 'forcewar_tip_title');
                                    if (result.data != undefined && result.data.title != undefined) {
                                        t = result.data.title;
                                    }
                                    (new Mojo.com.CommonDialog(undefined, {
                                        title: t,
                                        content: $('<div class="tip"></div>').html(result.errorMsg),
                                        leftBtnText: Mojo.utils.locale('force', 'force_boss_challenge_attack_reattack'),
                                        leftBtnClick: function (that) {
                                            that.close();
                                            self._attackBoss(1, 1);
                                        },
                                        rightBtnText: Mojo.utils.locale('common', 'close'),
                                        rightBtnClick: function (that) {
                                            that.close();
                                        }
                                    })).open();
                                } else {
                                    var t = Mojo.utils.locale('force', 'forcewar_tip_title');
                                    if (result.data != undefined && result.data.title != undefined) {
                                        t = result.data.title;
                                    }
                                    (new Mojo.com.CommonDialog(undefined, {
                                        title: t,
                                        content: $('<div class="tip"></div>').html(result.errorMsg),
                                        leftBtnText: Mojo.utils.locale('common', 'close'),
                                        leftBtnClick: function (that) {
                                            that.close();
                                        }
                                    })).open();
                                }
                            }, function () {}, {
                                showWait: true
                            });
                            Mojo.track.onEvent('24_703');
                        }
                    });
                    var winContent = $('<div><div class="win-time">' + Mojo.utils.locale('force', 'force_boss_challenge_attack_preview_win') + '</div></div>');
                    var loseContent = $('<div><div class="lose-time">' + Mojo.utils.locale('force', 'force_boss_challenge_attack_preview_lose') + '</div></div>');
                    capturedPreviewDialog.setWinContents(winContent);
                    capturedPreviewDialog.setLoseContents(loseContent);
                    capturedPreviewDialog.open();
                } else if (response && response.errorCode == 10003 && Mojo.utils.isNone(response.data) == false) {
                    (new Mojo.com.NeedBuyDialog(undefined, {
                        title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                        goods: response.data.props,
                        stamina: response.data.stamina,
                        restoreCount: response.data.sp,
                        allRestoreText: Mojo.utils.locale('common', 'time for all sp'),
                        allRestoreTime: response.data.sp_restore_pp,
                        nextRestoreText: Mojo.utils.locale('common', 'time for next sp'),
                        nextRestoreTime: response.data.sp_second,
                        restoreText: response.errorMsg,
                        needBuyTip: response.errorMsg,
                        useBtnClick: function (that, result) {
                            that.close();
                            if (result && result.errorCode === 0) {
                                Mojo.page.Force.getController().updatePlayerProfile({
                                    sp: result.data.player.sp
                                });
                                Mojo.app.toast.show(Mojo.utils.locale('common', 'add_sp', {
                                    name: that._options.goods.goods_name,
                                    value: result.data.value
                                }));
                            }
                        },
                        buyBtnClick: function (that, result) {
                            Mojo.page.Force.getController().updatePlayerProfile({
                                rm: result.data.player.rm,
                                vm: result.data.player.vm
                            });
                        }
                    })).open();
                } else {
                    var t = Mojo.utils.locale('force', 'forcewar_tip_title');
                    if (response.data != undefined && response.data.title != undefined) {
                        t = response.data.title;
                    }
                    (new Mojo.com.CommonDialog(undefined, {
                        title: t,
                        content: $('<div class="tip"></div>').html(response.errorMsg),
                        leftBtnText: Mojo.utils.locale('common', 'close'),
                        leftBtnClick: function (that) {
                            that.close();
                        }
                    })).open();
                }
            }, function () {}, true);
        },
        _showAwardResult: function (result, res, dlgtitle) {
            var self = this;
            var resultDlg = undefined;
            if (result && result.errorCode === 0) {
                var entity = result.data.rewards.entity;
                resultDlg = new Mojo.ui.Dialog(undefined, {
                    title: Mojo.utils.locale('force', 'force_boss_challenge_reward'),
                    content: (new Mojo.com.LargeEntity(entity)).element(),
                    classes: ['force-boss-challenge-dlg-with-label']
                });
                var tip = $('<div></div>').addClass('tip').appendTo(resultDlg._content);
                tip.html(Mojo.utils.locale('force', 'force_boss_challenge_reward_des', {
                    num: result.data.killed,
                    name: self._persistenceData.boss.name
                }));
                var tip2 = $('<div></div>').addClass('tip').appendTo(resultDlg._content);
                tip2.html(Mojo.utils.locale('force', 'force_boss_challenge_reward_get'));
                this._grain = new Mojo.ui.Label(undefined, {
                    classes: ['grain'],
                    text: '0',
                });
                this._grain.text(result.data.rewards.grain);
                this._grain.element().appendTo(tip2);
                new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('force', 'formation detail'),
                    click: function () {
                        resultDlg.element().hide();
                        var detailDlg = new Mojo.com.BattleDetailDialog(res.data, {
                            title: dlgtitle,
                            pid: self._options.opponent_id,
                            pkMode: true,
                            vm: '+0',
                            xp: '+0',
                            show_detail_first: true,
                            entity: null,
                            non_show_base_def: true,
                            close: function () {
                                resultDlg.element().show();
                            }
                        });
                        detailDlg.open(true);
                    },
                    special: 'button-big-red',
                }).element().appendTo(resultDlg._footer);
                new Mojo.ui.Button(undefined, {
                    text: Mojo.utils.locale('common', 'close'),
                    click: function () {
                        resultDlg.close();
                    },
                }).element().appendTo(resultDlg._footer);
            }
            return resultDlg;
        },
        _showGrainAwardResult: function (result, res, dlgtitle) {
            var self = this;
            var resultDlg = undefined;
            if (result && result.errorCode === 0) {
                var content = $('<div class="tip"></div>');
                var title = Mojo.utils.locale('force', 'force_boss_challenge_reward');
                var temp = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'force_boss_challenge_reward_des', {
                    num: result.data.killed,
                    name: self._persistenceData.boss.name
                })).appendTo(content);
                if (result.data.killer == 1) {
                    title = Mojo.utils.locale('force', 'force_boss_challenge_reward_killboss');
                    temp.html(Mojo.utils.locale('force', 'force_boss_challenge_reward_des2', {
                        level: self._persistenceData.boss.level,
                        name: self._persistenceData.boss.name
                    }));
                }
                var tip2 = $('<div></div>').addClass('tip').appendTo(content);
                tip2.html(Mojo.utils.locale('force', 'force_boss_challenge_reward_get'));
                this._grain = new Mojo.ui.Label(undefined, {
                    classes: ['grain'],
                    text: '0',
                });
                this._grain.text(result.data.rewards.grain);
                this._grain.element().appendTo(tip2);
                resultDlg = new Mojo.com.CommonDialog(undefined, {
                    title: title,
                    content: content,
                    classes: ['force-boss-challenge-dlg-with-label'],
                    leftBtnText: Mojo.utils.locale('force', 'formation detail'),
                    leftBtnClick: function (that) {
                        that.hide();
                        var detailDlg = new Mojo.com.BattleDetailDialog(res.data, {
                            title: dlgtitle,
                            pid: self._options.opponent_id,
                            pkMode: true,
                            vm: '+0',
                            xp: '+0',
                            show_detail_first: true,
                            entity: null,
                            non_show_base_def: true,
                            close: function () {
                                that.show();
                            }
                        });
                        detailDlg.open(true);
                    },
                    rightBtnText: Mojo.utils.locale('common', 'close'),
                    rightBtnClick: function (that) {
                        that.close();
                    },
                });
            }
            return resultDlg;
        },
        _refreshForceBossStatus: function (forceUpdate) {
            var self = this;
            if (self._forceBattleTime != undefined) {
                self._forceBattleTime -= 1;
            }
            if (self._cd != undefined) {
                self._cd -= 1;
            }
            var c = self._channel.getLatestChat();
            var mid = 0;
            if (c != null) {
                mid = c.id;
            }
            if (forceUpdate == true || self._forceBattleTime == undefined || self._cd == undefined || self._forceBattleTime % self._options.interval == 0) {
                self._forceWarAjax("/forceBoss/index", {
                    msgid: mid
                }, function (response) {
                    if (response && response.errorCode === self._IN_CHALLENGE_CODE) {
                        if (response.data.boss) {
                            response.data.boss = response.data.boss[response.data.battle.bossLevel];
                        }
                        if (Mojo.utils.isNone(response.data) == false) {
                            self._data = response.data;
                            self._forceBattleTime = self._data.battle.timeout;
                            self._cd = self._data.battle.attack.timeout;
                            self._bossLeft.element().html(Mojo.utils.locale('force', 'force_boss_left', {
                                num: self._data.battle.left,
                                wholenum: self._persistenceData.boss.life
                            }));
                            self._challengeProgress.value({
                                value: self._data.battle.left,
                                max: self._persistenceData.boss.life
                            });
                            if (self._forceBattleTime != undefined) {
                                self._bossFleeTime.element().html(Mojo.utils.locale('force', 'force_boss_flee_time', {
                                    time: self._formatCDTime(self._forceBattleTime)
                                }));
                            } else {
                                clearTimeout(self._forceBattleHandle);
                                self._createChallengePanel();
                            }
                            if (self._cd != undefined && self._cd > 0) {
                                self._bossAttackCD.element().html(Mojo.utils.locale('force', 'force_boss_challenge_cd', {
                                    time: self._formatCDTime(self._cd)
                                }));
                                self._challengeButton.disable(true);
                                if (self._data.battle.attack.cost != undefined && parseInt(self._data.battle.attack.cost) > 0) {
                                    if (self._rm == undefined) {
                                        self._rm = new Mojo.ui.Label(undefined, {
                                            classes: ['rm'],
                                            text: '0',
                                        });
                                    }
                                    self._rm.text(self._data.battle.attack.cost);
                                    self._challengeButton.text(Mojo.utils.locale('force', 'force_boss_challenge_start3'));
                                    self._challengeButton.element().append(self._rm.element());
                                    if (parseInt(self._data.battle.attack.cost) < 10) {
                                        self._challengeButton.element().addClass("challenge-button-with-rm1");
                                    } else if (parseInt(self._data.battle.attack.cost) < 100) {
                                        self._challengeButton.element().addClass("challenge-button-with-rm2");
                                    } else if (parseInt(self._data.battle.attack.cost) < 1000) {
                                        self._challengeButton.element().addClass("challenge-button-with-rm3");
                                    } else if (parseInt(self._data.battle.attack.cost) < 10000) {
                                        self._challengeButton.element().addClass("challenge-button-with-rm4");
                                    } else if (parseInt(self._data.battle.attack.cost) < 100000) {
                                        self._challengeButton.element().addClass("challenge-button-with-rm5");
                                    } else {
                                        self._challengeButton.element().addClass("challenge-button-with-rm");
                                    }
                                }
                            } else {
                                self._challengeButton.disable(false);
                                if (self._data.battle.attack.cost != undefined && parseInt(self._data.battle.attack.cost) > 0) {
                                    if (self._rm == undefined) {
                                        self._rm = new Mojo.ui.Label(undefined, {
                                            classes: ['rm'],
                                            text: '0',
                                        });
                                    }
                                    self._rm.text(self._data.battle.attack.cost);
                                    self._challengeButton.text(Mojo.utils.locale('force', 'force_boss_challenge_start3'));
                                    self._challengeButton.element().append(self._rm.element());
                                    if (parseInt(self._data.battle.attack.cost) < 10) {
                                        self._challengeButton.element().addClass("challenge-button-with-rm1");
                                    } else if (parseInt(self._data.battle.attack.cost) < 100) {
                                        self._challengeButton.element().addClass("challenge-button-with-rm2");
                                    } else if (parseInt(self._data.battle.attack.cost) < 1000) {
                                        self._challengeButton.element().addClass("challenge-button-with-rm3");
                                    } else if (parseInt(self._data.battle.attack.cost) < 10000) {
                                        self._challengeButton.element().addClass("challenge-button-with-rm4");
                                    } else if (parseInt(self._data.battle.attack.cost) < 100000) {
                                        self._challengeButton.element().addClass("challenge-button-with-rm5");
                                    } else {
                                        self._challengeButton.element().addClass("challenge-button-with-rm");
                                    }
                                }
                                self._bossAttackCD.element().html('');
                                if (self._data.battle.attack.free > 0) {
                                    self._bossAttackCD.element().html(Mojo.utils.locale('force', 'force_boss_challenge_freetimes', {
                                        times: self._data.battle.attack.free
                                    }));
                                }
                            }
                            var d = self._channel.getLatestChat();
                            var mid2 = 0;
                            if (d != null) {
                                mid2 = d.id;
                            }
                            if (mid == mid2) {
                                self._channel.appendChatMessages(self._data.list, self._data.time);
                            }
                            var e = self._channel.getLatestChat();
                            if (e != null && self._defaultMsg != undefined) {
                                self._defaultMsg.remove();
                                self._defaultMsg = undefined;
                            }
                        } else {
                            clearTimeout(self._forceBattleHandle);
                            self._createChallengePanel();
                        }
                    }
                }, function () {
                    clearTimeout(self._forceBattleHandle);
                    self._createChallengePanel();
                });
            }
            if (self._forceBattleTime != undefined) {
                self._bossFleeTime.element().html(Mojo.utils.locale('force', 'force_boss_flee_time', {
                    time: self._formatCDTime(self._forceBattleTime)
                }));
            }
            if (self._cd != undefined && self._cd > 0) {
                self._bossAttackCD.element().html(Mojo.utils.locale('force', 'force_boss_challenge_cd', {
                    time: self._formatCDTime(self._cd)
                }));
                self._challengeButton.disable(true);
            } else {
                self._challengeButton.disable(false);
                if (self._data.battle.attack.cost != undefined && parseInt(self._data.battle.attack.cost) > 0) {
                    if (self._rm == undefined) {
                        self._rm = new Mojo.ui.Label(undefined, {
                            classes: ['rm'],
                            text: '0',
                        });
                    }
                    self._rm.text(self._data.battle.attack.cost);
                    self._challengeButton.text(Mojo.utils.locale('force', 'force_boss_challenge_start3'));
                    self._challengeButton.element().append(self._rm.element());
                    if (parseInt(self._data.battle.attack.cost) < 10) {
                        self._challengeButton.element().addClass("challenge-button-with-rm1");
                    } else if (parseInt(self._data.battle.attack.cost) < 100) {
                        self._challengeButton.element().addClass("challenge-button-with-rm2");
                    } else if (parseInt(self._data.battle.attack.cost) < 1000) {
                        self._challengeButton.element().addClass("challenge-button-with-rm3");
                    } else if (parseInt(self._data.battle.attack.cost) < 10000) {
                        self._challengeButton.element().addClass("challenge-button-with-rm4");
                    } else if (parseInt(self._data.battle.attack.cost) < 100000) {
                        self._challengeButton.element().addClass("challenge-button-with-rm5");
                    } else {
                        self._challengeButton.element().addClass("challenge-button-with-rm");
                    }
                }
                self._bossAttackCD.element().html('');
                if (self._data.battle.attack.free > 0) {
                    self._bossAttackCD.element().html(Mojo.utils.locale('force', 'force_boss_challenge_freetimes', {
                        times: self._data.battle.attack.free
                    }));
                }
            }
            if (forceUpdate != true) {
                self._forceBattleHandle = setTimeout(function () {
                    self._refreshForceBossStatus();
                }, 1000);
            }
        },
        _forceWarAjax: function (url, params, success, fail, ashowWait) {
            var self = this;
            if (ashowWait == undefined) {
                ashowWait = false;
            }
            Mojo.ajax(url, params, function (response) {
                if (response.errorCode === self._CHALLENGE_FINISH_CODE) {
                    clearTimeout(self._forceBattleHandle);
                    self._showForceWarResultDialog(response, function () {
                        Mojo.app.redirect('/force', {
                            index: 7
                        });
                    });
                } else {
                    if (success instanceof Function) {
                        success(response);
                    }
                }
            }, function () {
                if (fail instanceof Function) {
                    fail();
                }
            }, {
                showWait: ashowWait
            });
        },
        _showForceWarResultDialog: function (result, callback, res, dlgtitle) {
            var self = this;
            var resultDlg = undefined;
            var superBonusDlg = undefined;
            var content = $('<div class="tip"></div>');
            var title = "";
            var rightBtnText = Mojo.utils.locale('common', 'close');
            var rightBtnClick = function (that) {
                that.close();
            };
            if (res != undefined && dlgtitle != undefined) {
                rightBtnText = Mojo.utils.locale('force', 'formation detail');
                rightBtnClick = function (that) {
                    that.hide();
                    (new Mojo.com.BattleDetailDialog(res.data, {
                        title: dlgtitle,
                        pid: self._options.opponent_id,
                        pkMode: true,
                        vm: '+0',
                        xp: '+0',
                        show_detail_first: true,
                        entity: null,
                        non_show_base_def: true,
                        close: function () {
                            that.show();
                        }
                    })).open(true);
                };
            }
            if (result.data.status == 1) {
                if (result.data.rewards != undefined) {
                    title = Mojo.utils.locale('force', 'force_boss_challenge_final_win');
                    var temp = $('<div class="paragraph"></div>').appendTo(content);
                    if (result.data.killer == 1) {
                        if (result.data.lucky != undefined) {
                            if (result.data.super_bonus) {
                                temp.html(Mojo.utils.locale('force', 'force_boss_challenge_final_des7_superbonus', {
                                    level: result.data.boss.level,
                                    name: result.data.boss.name
                                }));
                            } else {
                                temp.html(Mojo.utils.locale('force', 'force_boss_challenge_final_des7', {
                                    level: result.data.boss.level,
                                    name: result.data.boss.name
                                }));
                            }
                        } else {
                            if (result.data.super_bonus) {
                                temp.html(Mojo.utils.locale('force', 'force_boss_challenge_final_des2_superbonus', {
                                    level: result.data.boss.level,
                                    name: result.data.boss.name
                                }));
                            } else {
                                temp.html(Mojo.utils.locale('force', 'force_boss_challenge_final_des2', {
                                    level: result.data.boss.level,
                                    name: result.data.boss.name
                                }));
                            }
                        }
                    } else {
                        if (result.data.lucky != undefined) {
                            if (result.data.super_bonus) {
                                temp.html(Mojo.utils.locale('force', 'force_boss_challenge_final_des6_superbonus', {
                                    level: result.data.boss.level,
                                    name: result.data.boss.name
                                }));
                            } else {
                                temp.html(Mojo.utils.locale('force', 'force_boss_challenge_final_des6', {
                                    level: result.data.boss.level,
                                    name: result.data.boss.name
                                }));
                            }
                        } else {
                            if (result.data.super_bonus) {
                                temp.html(Mojo.utils.locale('force', 'force_boss_challenge_final_des1_superbonus', {
                                    level: result.data.boss.level,
                                    name: result.data.boss.name
                                }));
                            } else {
                                temp.html(Mojo.utils.locale('force', 'force_boss_challenge_final_des1', {
                                    level: result.data.boss.level,
                                    name: result.data.boss.name
                                }));
                            }
                        }
                    }
                    var sumgrain = 0;
                    if (result.data.rewards.grain.k != undefined) {
                        sumgrain = parseInt(result.data.rewards.grain.a) + parseInt(result.data.rewards.grain.k);
                    } else {
                        sumgrain = result.data.rewards.grain.a;
                    }
                    var grainObj = {
                        id: "d08",
                        name: Mojo.utils.locale('force', 'force_boss_challenge_final_win_grain'),
                        count: sumgrain,
                        small_image: "\/mojo\/resources\/classic\/mobile\/image\/entity\/23\/small\/player_grain.png"
                    };
                    if (Array.isArray(result.data.rewards.entities)) {
                        for (var i = result.data.rewards.entities.length; i > 0; i--) {
                            result.data.rewards.entities[i] = result.data.rewards.entities[i - 1];
                        }
                        result.data.rewards.entities[0] = grainObj;
                    } else {
                        result.data.rewards.entities = [];
                        result.data.rewards.entities[0] = grainObj;
                    }
                    if (result.data.rewards.entities != undefined) {
                        var _award = $('<div class="awards"></div>');
                        _award.appendTo(content);
                        var _award2 = undefined;
                        if (result.data.rewards.entities.length > 4) {
                            _award.addClass("awards1");
                            _award2 = $('<div class="awards"></div>');
                            _award2.addClass("awards2");
                            _award2.appendTo(content);
                        }
                        var _card = undefined;
                        $.each(result.data.rewards.entities, function (i, a) {
                            if (result.data.rewards.entities.length > 4 && i < Math.floor(result.data.rewards.entities.length / 2)) {
                                _card = $('<div class="card-gift image"></div>');
                                _card.appendTo(_award);
                            } else if (result.data.rewards.entities.length > 4 && i >= Math.floor(result.data.rewards.entities.length / 2)) {
                                _card = $('<div class="card-gift image"></div>');
                                _card.appendTo(_award2);
                            } else if (result.data.rewards.entities.length <= 4) {
                                _card = $('<div class="card-gift image"></div>');
                                _card.appendTo(_award);
                            }
                            if (a.rarity_id != undefined) {
                                if (parseInt(a.rarity_id + "") == 1)
                                    $('<div class = "tip">' + Mojo.utils.locale('illustration', 'rarity_notice') + '</div>').appendTo(_card);
                                if (parseInt(a.rarity_id + "") == 2)
                                    $('<div class = "tip">' + Mojo.utils.locale('illustration', 'rarity_notice2') + '</div>').appendTo(_card);
                                if (parseInt(a.rarity_id + "") == 3)
                                    $('<div class = "tip">' + Mojo.utils.locale('illustration', 'rarity_notice3') + '</div>').appendTo(_card);
                                if (parseInt(a.rarity_id + "") == 4)
                                    $('<div class = "tip">' + Mojo.utils.locale('illustration', 'rarity_notice4') + '</div>').appendTo(_card);
                            }
                            self._setCard(a, _card);
                            if (a.count > 1) {
                                _card.append('<div class="count">' + a.count + '</div>');
                            }
                            _card.append('<div class="name">' + a.name + '</div>');
                        });
                    }
                    $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'force_boss_challenge_final_des3')).appendTo(content);
                    resultDlg = new Mojo.com.CommonDialog(undefined, {
                        title: title,
                        content: content,
                        classes: ['force-boss-challenge-dlg-with-label'],
                        close: function () {
                            if (callback instanceof Function) {
                                callback();
                            }
                        },
                        leftBtnText: Mojo.utils.locale('force', 'force_boss_challenge_final_goexchange'),
                        leftBtnClick: function (that) {
                            Mojo.app.redirect('/force', {
                                index: 3,
                                selected: 1
                            });
                        },
                        rightBtnText: rightBtnText,
                        rightBtnClick: function (that) {
                            rightBtnClick(that);
                        },
                    });
                    if (result.data.super_bonus) {
                        superBonusDlg = new Mojo.ui.Dialog(undefined, {
                            title: self.locale('exchange'),
                            content: (new Mojo.com.LargeEntity(result.data.super_bonus.entity)).element()
                        });
                        superBonusDlg.element().addClass('with-extra-entity');
                        $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'force_boss_challenge_final_des8', {
                            boss: result.data.boss.name,
                            name: result.data.super_bonus.entity.name
                        })).appendTo(superBonusDlg._content);
                        var closeBtn = new Mojo.ui.Button(undefined, {
                            text: Mojo.utils.locale('common', 'close'),
                            special: 'button-bg-red',
                            click: function () {
                                superBonusDlg.close();
                            }
                        });
                        closeBtn.element().appendTo(superBonusDlg._footer);
                    }
                } else {
                    title = Mojo.utils.locale('force', 'force_boss_challenge_final_win');
                    var temp = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'force_boss_challenge_final_des5', {
                        killername: result.data.killer,
                        level: result.data.boss.level,
                        name: result.data.boss.name,
                        num: result.data.grain
                    })).appendTo(content);
                    resultDlg = new Mojo.com.CommonDialog(undefined, {
                        title: title,
                        content: content,
                        classes: ['force-boss-challenge-dlg-with-label'],
                        close: function () {
                            if (callback instanceof Function) {
                                callback();
                            }
                        },
                        leftBtnText: Mojo.utils.locale('force', 'force_boss_challenge_final_goexchange'),
                        leftBtnClick: function (that) {
                            Mojo.app.redirect('/force', {
                                index: 3,
                                selected: 1
                            });
                        },
                        rightBtnText: rightBtnText,
                        rightBtnClick: function (that) {
                            rightBtnClick(that);
                        },
                    });
                }
            } else {
                title = Mojo.utils.locale('force', 'force_boss_challenge_final_lose');
                var temp = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'force_boss_challenge_final_des4', {
                    level: result.data.boss.level,
                    name: result.data.boss.name
                })).appendTo(content);
                resultDlg = new Mojo.com.CommonDialog(undefined, {
                    title: title,
                    content: content,
                    close: function () {
                        if (callback instanceof Function) {
                            callback();
                        }
                    },
                    rightBtnText: rightBtnText,
                    rightBtnClick: function (that) {
                        rightBtnClick(that);
                    },
                });
            }
            if (result.data.super_bonus) {
                superBonusDlg.open();
            }
            resultDlg.open();
        },
        _setCard: function (item, _car) {
            var self = this;
            var se = new Mojo.com.SmallEntity(item, {
                callback: function (card) {
                    _car.append(card.element());
                },
                click: function () {}
            });
            return se;
        },
        _getDefaultOptions: function () {
            return {
                backCallback: $.noop,
                interval: 10
            };
        },
        _formatCDTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
        localeCat: function () {
            return 'force';
        }
    });
})(window, jQuery);
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceBossChallengeLevelSelectDialog = Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceBossChallengeLevelSelectDialog";
        },
        init: function (data, options) {
            this._super('com-force-challenge-levelselectdialog', options);
            this._data = data;
            this._list = undefined;
            this._title.html(Mojo.utils.locale("force", "force_challenge_model_title"));
            this.refresh();
        },
        refresh: function () {
            this._refreshList();
        },
        _refreshList: function () {
            var self = this;
            if (false === Mojo.utils.isNone(this._list)) {
                this._list.element().remove();
            }
            this._list = new Mojo.ui.ListPanel('boss-level-select-listpanel', {
                showMore: false,
                scrollable: true,
                loadFunc: function (l, s, p, that) {
                    for (var bossIndex in self._data.boss) {
                        var boss = self._data.boss[bossIndex];
                        boss.duration = self._data.duration;
                        that.appendData(boss);
                    }
                },
                drawFunc: function (boss) {
                    var bossObj = new Mojo.Object(undefined, {
                        classes: ['challenge-level-element', 'box-inner']
                    });
                    $('<img />').hide().appendTo(bossObj.element()).attr({
                        src: boss.large_image
                    });
                    var bossImage = new Mojo.Object(undefined, {
                        classes: ['com-force-challenge-boss-img']
                    });
                    bossImage.element().bind("click", function () {
                        self.element().hide();
                        new Mojo.com.ForceBossInfoDialog(boss, {
                            rightBtnText: Mojo.utils.locale('common', 'close'),
                            rightBtnClick: function (that) {
                                that.close();
                            },
                            close: function () {
                                self.element().show();
                            }
                        }).open(true);
                    });
                    bossObj.element().append(bossImage.element());
                    var bossInfo = new Mojo.Object(undefined, {
                        classes: ['com-force-callenge-boss-info']
                    });
                    $('<div></div>').addClass('level').html(Mojo.utils.locale("force", "force_challenge_model_" + boss.difficulty, {
                        name: boss.name,
                        level: boss.level
                    })).appendTo(bossInfo.element());
                    $('<div></div>').addClass('duration').html(Mojo.utils.locale("force", "force_challenge_model_duration", {
                        "duration": boss.duration
                    })).appendTo(bossInfo.element());
                    var str = "";
                    if (boss.difficulty == "hard") {
                        str = Mojo.utils.locale("force", "force_challenge_model_skill_hard", {
                            level: boss.level - 5
                        });
                    } else {
                        str = Mojo.utils.locale("force", "force_challenge_model_skill_" + boss.difficulty);
                    }
                    $('<div></div>').addClass('skill').html(str).appendTo(bossInfo.element());
                    bossObj.element().append(bossInfo.element());
                    var challengeButton = new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('force', 'force_boss_challenge_start'),
                        click: function () {
                            self._options.startChallenge(boss);
                        }
                    });
                    var challengeButtonEle = challengeButton.element();
                    challengeButtonEle.appendTo(bossObj.element());
                    if (parseInt(self._data.challenge.free) == 0 && self._data.limit > 0) {
                        self._rm = new Mojo.ui.Label(undefined, {
                            classes: ['rm'],
                            text: '0',
                        });
                        self._rm.text(self._data.challenge.rm);
                        challengeButtonEle.append(self._rm.element());
                        if (parseInt(self._data.challenge.rm) < 10) {
                            challengeButtonEle.addClass("challenge-button-with-rm1");
                        } else if (parseInt(self._data.challenge.rm) < 100) {
                            challengeButtonEle.addClass("challenge-button-with-rm2");
                        } else if (parseInt(self._data.challenge.rm) < 1000) {
                            challengeButtonEle.addClass("challenge-button-with-rm3");
                        } else if (parseInt(self._data.challenge.rm) < 10000) {
                            challengeButtonEle.addClass("challenge-button-with-rm4");
                        } else if (parseInt(self._data.challenge.rm) < 100000) {
                            challengeButtonEle.addClass("challenge-button-with-rm5");
                        } else {
                            challengeButtonEle.addClass("challenge-button-with-rm");
                        }
                    }
                    return bossObj;
                }
            });
            if (parseInt(self._data.challenge.free) > 0) {
                this._list._header.html(Mojo.utils.locale('force', 'force_boss_challenge_limit', {
                    num: self._data.challenge.free
                }));
            } else {
                this._list._header.html(Mojo.utils.locale('force', 'force_boss_challenge_limit2', {
                    num: self._data.limit
                }));
            }
            setTimeout(function () {
                self._list.element().appendTo(self._content);
                self._list.resize();
            });
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                id: undefined,
                startChallenge: $.noop,
            });
        },
    });
})(window, jQuery);
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceBossInfoDialog = Mojo.com.CommonDialog.extend({
        clsname: function () {
            return "com.ForceBossInfoDialog";
        },
        init: function (data, options) {
            this._super('com-force-challenge-bossinfodialog', options);
            this._data = data;
            this._list = undefined;
            this._title.html(Mojo.utils.locale("force", "force_challenge_model_bossinfo_title"));
            this._addContent(data);
        },
        _addContent: function (boss) {
            var bossObj = new Mojo.Object(undefined, {
                classes: ['boss-info-content', 'box-inner']
            });
            var bossInfo = new Mojo.Object(undefined, {
                classes: ['com-force-callenge-boss-info']
            });
            bossObj.element().append(bossInfo.element());
            var bossImage = new Mojo.Object(undefined, {
                classes: ['boss-info-content-img']
            });
            bossInfo.element().append(bossImage.element());
            var bossInfoText = new Mojo.Object(undefined, {
                classes: ['com-force-callenge-boss-text']
            });
            bossInfoText.element().appendTo(bossInfo.element());
            $('<div></div>').addClass('level').html(Mojo.utils.locale("force", "force_challenge_model_bossinfo_name", {
                "name": boss.name,
                "level": boss.level
            })).appendTo(bossInfoText.element());
            $('<div></div>').addClass('life').html(Mojo.utils.locale("force", "force_challenge_model_bossinfo_life", {
                "life": boss.life
            })).appendTo(bossInfoText.element());
            $('<div></div>').addClass('defence').html(Mojo.utils.locale("force", "force_challenge_model_bossinfo_defence", {
                min: boss.defence.min,
                max: boss.defence.max
            })).appendTo(bossInfoText.element());
            bossObj.element().append(bossInfo.element());
            var bossSkill = new Mojo.Object(undefined, {
                classes: ['com-force-challenge-boss-skill']
            });
            bossSkill.element().html(Mojo.utils.locale("force", "force_challenge_model_bossinfo_skill", {
                skill: boss.skill
            }));
            bossSkill.element().appendTo(bossObj.element());
            this._content.append(bossObj.element());
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceBossChallengeDetailDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ElectionDetailDlg";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-forceboss-challenge-detail-dlg');
            var self = this;
            this._initContent();
            this._addButtons();
        },
        open: function (force) {
            this._super(force);
            this._panel.resize();
        },
        _initContent: function () {
            var self = this;
            this._panel = new Mojo.ui.ListPanel('mojo-com-forceboss-challenge-detail-listpanel', {
                scrollable: true,
                showMore: false,
                pageSize: 20,
                loadFunc: function (count, pagesize, params) {
                    setTimeout(function () {
                        self._panel.appendData(self._options.detail);
                    }, 100);
                },
                drawFunc: function (data) {
                    return (new Mojo.com.ForceBossChallengeDetail(data, {
                        that: self,
                    }));
                }
            });
            this._panel.element().appendTo(this._content);
        },
        _addButtons: function () {
            var self = this;
            this._footer.append((new Mojo.ui.Button('close-btn', {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('force', 'force_boss_challenge_detail_dlg'),
                detail: undefined,
            });
        }
    });
})(window, jQuery);
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceBossChallengeDetail = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceBossChallengeDetail";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass("mojo-com-forceboss-challenge-detail");
            this._contentDiv = $('<div></div>').addClass("mojo-com-forceboss-challenge-detail-content").appendTo(this.element());
            this.refresh();
        },
        refresh: function (data) {
            if (data === undefined) {
                data = this._data;
            }
            this.setContent(data);
        },
        setContent: function (data) {
            this._contentDiv.html(data);
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceBossChallengePreviewDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.ForceBossChallengePreviewDialog";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-forceboss-challenge-preview-dlg');
            var self = this;
            this._initContent();
            this._addButtons();
        },
        open: function (force) {
            this._super(force);
            this._niudanScroll.refresh();
        },
        _initContent: function () {
            var self = this;
            $('<div class="mojo-com-forceboss-challenge-preview-header"></div>').html(Mojo.utils.locale('force', 'force_boss_challenge_preview_header')).appendTo(this._content);
            $('<div class="mojo-com-forceboss-challenge-preview-cost"></div>').html(Mojo.utils.locale('force', 'force_boss_challenge_preview_cost')).appendTo(this._content);
            if (parseInt(self._options.challenge_num) == 0) {
                this._rm = new Mojo.ui.Label(undefined, {
                    classes: ['rm'],
                    text: '0',
                });
                this._rm.text(self._options.challenge_rm);
                this._rm.element().appendTo(this._content);
            } else {
                this._vm = new Mojo.ui.Label(undefined, {
                    classes: ['vm'],
                    text: '0',
                });
                this._vm.text(self._options.challenge_vm);
                this._vm.element().appendTo(this._content);
            }
            var chooseDiv = $('<div class="mojo-com-forceboss-challenge-preview-choose"></div>').appendTo(this._content);
            $('<div class="mojo-com-forceboss-challenge-preview-choose-niudan"></div>').html(Mojo.utils.locale('force', 'force_boss_challenge_preview_choose_niudan')).appendTo(chooseDiv);
            this._niudanList = $('<div class="mojo-com-forceboss-challenge-preview-choose-niudan-list"></div>');
            this._niudanScroll = new Mojo.ui.Scroll(undefined, this._niudanList, {
                direction: 2
            });
            this._niudanScroll.element().appendTo(chooseDiv);
            for (var k in self._options.niudanlist) {
                self._filter = $('<div></div>').attr("id", "order-" + self._options.niudanlist[k].id).addClass("niudanElement").addClass("box-inner").appendTo(self._niudanList).data({
                    id: self._options.niudanlist[k].id
                }).html('<div class="radio"></div>' + self._options.niudanlist[k].name).click(function () {
                    self._niudanElements = self._niudanList.find(".niudanElement");
                    self._niudanElements.removeClass("filterSelected").eq($(this).index()).addClass("filterSelected");
                    self._niudanElements.find('.radio').removeClass('radio-selected-class');
                    $(this).find('.radio').addClass('radio-selected-class');
                    self._options.niudanSelected = $(this).data('id');
                });
                if (self._options.niudanId == self._options.niudanlist[k].id) {
                    self._filter.addClass("filterSelected");
                    self._filter.find('.radio').addClass('radio-selected-class');
                    self._options.niudanSelected = self._options.niudanlist[k].id;
                }
            }
        },
        _addButtons: function () {
            var self = this;
            this._footer.append((new Mojo.ui.Button('challenge-btn', {
                text: Mojo.utils.locale('force', 'force_boss_challenge_start2'),
                special: 'button-big-red',
                click: function () {
                    self.close();
                    self._options.callback(self._options.niudanSelected);
                },
            })).element());
            this._footer.append((new Mojo.ui.Button('close-btn', {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('force', 'force_boss_challenge_start'),
                detail: undefined,
            });
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceBossMsgChannel = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ChatChannel";
        },
        init: function (id, options) {
            this._super(id, options);
            this.element().addClass('mojo-com-chat-channel');
            this._list = $('<div class="list"></div>');
            this._scroller = new Mojo.ui.Scroll(undefined, this._list, {
                direction: 2
            });
            this.element().append(this._scroller.element());
            this._chatList = [];
            this._lastSend = this._localLastSend();
        },
        _localLastSend: function (time) {
            var key = 'chat-channel-cold-' + this._options.channelId;
            if (time == undefined || time == null) {
                if (sessionStorage[key] != undefined) {
                    return sessionStorage[key];
                }
                return 0;
            }
            sessionStorage[key] = time;
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                cold: 1000,
                channelId: 0,
                max: 1000,
            });
        },
        getLatestChat: function () {
            if (this._chatList.length == 0) {
                return null;
            }
            return this._chatList[this._chatList.length - 1];
        },
        _addChatMessage: function (data) {
            this._chatList.push(data);
            this._list.append((this._createChat(data)).element());
            if (this._chatList.length > this._options.max) {
                this._chatList.shift();
                this._list.children().eq(0).remove();
            }
            this._scroller.refresh();
        },
        _refreshTime: function (nowtime) {
            var self = this;
            $.each(this.element().find(".mojo-com-chat-message"), function (i, e) {
                var timestamp = $(e).find(".send-timestamp").text();
                var distance = parseInt(nowtime) - parseInt(timestamp);
                if (distance < 0) distance = 1;
                $(e).find(".send-time1").html(Mojo.utils.locale('force', 'force_boss_challenge_msg_content2', {
                    time: self._formatCDTime(distance)
                }));
            });
        },
        _formatCDTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
        _createChat: function (data) {
            var self = this;
            return new Mojo.com.ForceBossMessage(data, {
                callback: function (uid) {},
                channelId: self._options.channelId
            });
        },
        appendChatMessages: function (data, nowtime) {
            if (Array.isArray(data)) {
                for (var i = data.length - 1; i >= 0; i--) {
                    data[i].boss = this._options.bossName;
                    this._addChatMessage(data[i]);
                }
                if (data.length > 0) {
                    this._scroller.scrollTo(0, this._list.height());
                }
            } else {
                this._addChat(data);
                this._scroller.scrollTo(0, this._list.height());
            }
            this._refreshTime(nowtime);
            this._scroller.refresh();
        },
        notifySend: function () {
            this._lastSend = Date.now();
            this._localLastSend(this._lastSend);
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceBossMessage = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceBossMessage";
        },
        init: function (data, options) {
            this.data = data;
            this._super(undefined, options);
            var self = this;
            this.element().addClass('mojo-com-chat-message');
            var type = "default";
            if (data.type != undefined) {
                type = data.type;
            }
            var honor = '';
            if (data.forceTitle != undefined && data.forceTitle != '') {
                honor = '[<span class="official">' + data.forceTitle + '</span>]';
            }
            this.element().html('<span class="send-timestamp"></span>' + '<span class="send-content">' + Mojo.utils.locale('force', 'force_boss_challenge_msg_content', {
                name: honor + data.player,
                boss: data.boss,
                num: data.killed
            }) + '</span><span class="send-time1"></span>');
            this.element().find('.send-timestamp').html(data.time).hide();
        },
        _getSendTime: function (time) {
            var d = new Date(time);
            var year = d.getFullYear();
            var month = d.getMonth() + 1;
            var date = d.getDate();
            var hours = d.getHours();
            var minutes = d.getMinutes();
            return year + '-' + month + '-' + date + ' ' + (hours < 10 ? '0' + hours : hours) + ':' + (minutes < 10 ? '0' + minutes : minutes);
        },
        _getDefaultOptions: function () {
            return {
                callback: $.noop,
                channelId: 0
            };
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.AvoidWarDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.AvoidWarDialog";
        },
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-avoidwardlg');
            this._addContent();
            this._addHandleButtons();
            var self = this;
            this._interval = w.setInterval(function () {
                if (self._options.avoid_war_time > 0) {
                    self._options.avoid_war_time--;
                    self._message.html(Mojo.utils.locale('common', 'avoid_war_content', {
                        avoid_war_time: Mojo.utils.formatTime(self._options.avoid_war_time)
                    }));
                }
            }, 1000);
        },
        _addContent: function () {
            var self = this;
            this._message = $('<div class="paragraph"></div>').html(self._options.message).appendTo(this._content);
        },
        _addHandleButtons: function () {
            var self = this;
            this._footer.append((new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'revocation_of_war_free'),
                click: function () {
                    Mojo.ajax('/player/revokeAvoid', {}, function (result) {
                        if (result.errorCode == 0) {
                            self._options.callback();
                            Mojo.app.toast.show(Mojo.utils.locale('common', 'clear_avoid_war'));
                        }
                    }, function () {});
                    self.close();
                },
                special: 'button-big-red',
            })).element());
            this._footer.append((new Mojo.ui.Button('close-btn', {
                text: Mojo.utils.locale('common', 'close'),
                click: function () {
                    self.close();
                },
            })).element());
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('common', 'avoid_war_title'),
                message: '',
                avoid_war_time: '',
                zIndex: 1100,
                callback: $.noop,
                close: function () {
                    w.clearInterval(self._interval);
                },
                deviceaware: true
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceBossChallenge = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceBossChallenge";
        },
        init: function (options) {
            this._super('com-force-internal', options);
            this.element().addClass('mojo-com-forceinternal');
            this._playerProfile = this._options.getController().getPlayerProfile();
            this._addTabs();
            this._addButton();
        },
        _createForceChallengePanel: function (selected) {
            var self = this;
            this._challengePanel = new Mojo.com.ForceChallengePanel({
                getController: self._options.getController
            });
            this._tabs.setPanel(selected, this._challengePanel);
        },
        _addTabs: function () {
            var self = this;
            this._panels = [{
                type: 2,
                label: 'force_boss_challenge'
            }];
            this._tabs = new Mojo.ui.Tabs('tabs-internal', {
                selectionChange: function (i) {
                    if (self._challengePanel) {
                        self._challengePanel.pause();
                    }
                    if (i == 0) {
                        self._createForceChallengePanel(i);
                    }
                },
            });
            $.each(this._panels, function (i, p) {
                self._tabs.addTab(self.locale(p.label));
            });
            this.element().append(this._tabs.element());
            this._tabs.element().find('.panel').addClass('box-outter');
            if (Mojo.app.request('index') == 1)
                this._selected = Mojo.app.request('selected');
            if (Mojo.utils.isNone(this._selected) == true) {
                this._selected = 0;
            } else {
                this._selected = parseInt(this._selected);
            }
            this._tabs._select(this._selected);
        },
        _addButton: function () {
            var self = this;
            this._backBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'back'),
                click: function () {
                    if (self._challengePanel) {
                        self._challengePanel.pause();
                    }
                    self.element().hide();
                    self._options.getController().switchToHome();
                },
                classes: ['force-back-btn'],
            });
            this._backBtn.element().appendTo(this.element());
        },
        _addRefreshButton: function () {
            var self = this;
            var refreshTxt = Mojo.utils.locale('force', 'refresh_internal_mission');
            self.refreshBtn = new Mojo.ui.Button(undefined, {
                text: refreshTxt,
                classes: ['more'],
                click: function () {
                    Mojo.ajax('/force/refreshTaskPreview', {}, function (result) {
                        if (result.errorCode == 0) {
                            self._showRefreshDialog(result.data);
                        }
                    });
                },
                disableClick: function () {
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'only_official_can_refresh'));
                },
            });
            if (parseInt(self._playerProfile.position_id) > 3) {
                self.refreshBtn.disable(true);
            }
            self.refreshBtn.element().appendTo(self._list._list).show();
            this._list.resize();
        },
        _showRefreshDialog: function (data) {
            var self = this;
            var refreshdlg = new Mojo.com.HandleDialog({
                title: Mojo.utils.locale('force', 'refresh_internal_mission'),
                message: '',
                btn1: Mojo.utils.locale('common', 'ok'),
                handle1: function () {
                    if (self._inRefreshing == true)
                        return;
                    self._inRefreshing = true;
                    Mojo.ajax('/force/refreshTask', {}, function (result) {
                        self._inRefreshing = false;
                        if (result.errorCode == 0) {
                            var i = 0,
                                player = {};
                            if (parseInt(data.vm) > 0) {
                                i = parseInt(data.vm);
                                player.vm = -i;
                            } else if (parseInt(data.rm) > 0) {
                                i = parseInt(data.rm);
                                player.rm = -i;
                            }
                            self._onTrack(i);
                            self._list.refresh(result.data.taskList);
                            var grain = result.data.awardGrain;
                            Mojo.page.Force.getController().diffPlayer({
                                grain: grain
                            });
                            self._list._scroll.scrollTo(0, 0);
                            self._options.getController().diffPlayer(player);
                            var c = $("<div class='paragraph'></div>").html(Mojo.utils.locale('force', 'refresh_award'));
                            var tip2 = $("<div class='info2'></div>").appendTo(c).html(Mojo.utils.locale('force', 'refresh_award1'));
                            new Mojo.ui.Label(undefined, {
                                classes: ['grain', 'award'],
                                text: grain
                            }).element().appendTo(tip2);
                            var dlg = new Mojo.ui.Dialog(undefined, {
                                title: Mojo.utils.locale('ui', 'Refresh Succ'),
                                classes: ['force-refresh-succdlg'],
                                content: c
                            });
                            new Mojo.ui.Button(undefined, {
                                text: Mojo.utils.locale('ui', 'Close'),
                                click: function () {
                                    dlg.close();
                                }
                            }).element().appendTo(dlg._footer);
                            dlg.open();
                        } else {
                            (new Mojo.com.BuyFailDialog({
                                message: result.errorMsg,
                                useRm: (parseInt(data.vm) > 0 ? false : true),
                            })).open();
                        }
                    }, function () {}, {
                        showWait: true
                    });
                },
            });
            var info1 = $('<div class="info1"></div>').html(Mojo.utils.locale('force', 'refresh_info1')).appendTo(refreshdlg._message);
            var info2 = $('<div class="info2"></div>').appendTo(refreshdlg._message);
            var cost = $('<div class="cost"></div>').html(Mojo.utils.locale('force', 'refresh_cost')).appendTo(info2);
            var i = 0;
            if (parseInt(data.vm) > 0) {
                (new Mojo.ui.Label(undefined, {
                    text: data.vm,
                    classes: ['vm'],
                })).element().appendTo(info2);
            } else if (parseInt(data.rm) > 0) {
                (new Mojo.ui.Label(undefined, {
                    text: data.rm,
                    classes: ['rm'],
                })).element().appendTo(info2);
            }
            var param = {};
            param.cost = (parseInt(data.next_vm) > 0 ? data.next_vm : data.next_rm);
            param.yb = (parseInt(data.next_vm) > 0 ? Mojo.utils.locale('force', 'vm') : Mojo.utils.locale('force', 'rm'));
            param.point = data.time;
            var info3 = $('<div class="info3"></div>').html(Mojo.utils.locale('force', 'refresh_info3', param)).appendTo(refreshdlg._message);
            refreshdlg.open();
        },
        _onTrack: function (i) {
            var code = '';
            switch (i) {
            case 30000:
                code = '24_001';
                break;
            case 500:
                code = '24_002';
                break;
            case 1000:
                code = '24_003';
                break;
            case 2000:
                code = '24_004';
                break;
            case 5000:
                code = '24_005';
                break;
            }
            Mojo.track.onEvent(code);
        },
        _getDefaultOptions: function () {
            return {
                backCallback: $.noop,
            };
        },
        localeCat: function () {
            return 'force';
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceCity = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceCity";
        },
        init: function (options) {
            this._super('com-force-city', options);
            this.element().addClass('mojo-com-forcecity');
            this._playerProfile = this._options.getController().getPlayerProfile();
            this._options.getController().getProfile().element().hide();
            this._addTabs();
            this._addButton();
        },
        _createForceCityPanel: function (selected) {
            var self = this;
            this._cityPanel = new Mojo.com.ForceCityPanel({
                getController: self._options.getController
            });
            this._tabs.setPanel(selected, this._cityPanel);
        },
        _addTabs: function () {
            var self = this;
            this._panels = [{
                type: 2,
                label: 'city'
            }];
            this._tabs = new Mojo.ui.Tabs('tabs-internal', {
                selectionChange: function (i) {
                    if (i == 0) {
                        self._createForceCityPanel(i);
                    }
                },
            });
            $.each(this._panels, function (i, p) {
                self._tabs.addTab(self.locale(p.label));
            });
            this.element().append(this._tabs.element());
            this._tabs.element().find('.panel').addClass('box-outter');
            if (Mojo.app.request('index') == 1)
                this._selected = Mojo.app.request('selected');
            if (Mojo.utils.isNone(this._selected) == true) {
                this._selected = 0;
            } else {
                this._selected = parseInt(this._selected);
            }
            this._tabs._select(this._selected);
        },
        _addButton: function () {
            var self = this;
            this._viewCitysBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('force', 'force_city_all_citys'),
                click: function () {
                    self._createForceSearchSiege();
                },
                classes: ['force-city-view-btn'],
            });
            this._viewCitysBtn.element().appendTo(this.element());
            this._backBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'back'),
                click: function () {
                    self.element().hide();
                    self._options.getController().getProfile().element().show();
                    self._options.getController().switchToHome();
                },
                classes: ['force-back-btn'],
            });
            this._backBtn.element().appendTo(this.element());
        },
        _createForceSearchSiege: function (targetCityId) {
            var self = this;
            var forcePage = self._options.getController();
            forcePage.hideCurrent();
            var citySearch = new Mojo.com.CitySearch('citywar-citysearch', {
                backCallback: function () {
                    citySearch.element().remove();
                    forcePage.showCurrent();
                },
                from: 'forcecity',
                viewMode: true,
                citySearchParams: {},
                cityListOptions: {
                    targetCityId: targetCityId,
                    showBtn: false,
                    btnText: Mojo.utils.locale('force', 'siege_button_txt'),
                    moreLabel: Mojo.utils.locale('force', 'more'),
                    onBtnClick: function (data) {
                        self._actionForSiege(citySearch, data);
                    },
                    erroCallback: function (response) {
                        if (response.errorCode == 130012) {
                            Mojo.app.redirect('/force', {
                                index: 2,
                                refresh: 1
                            });
                        }
                    }
                }
            });
            citySearch.element().appendTo(forcePage.element());
        },
        _getDefaultOptions: function () {
            return {
                backCallback: $.noop,
            };
        },
        localeCat: function () {
            return 'force';
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceCityPanel = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceCityPanel";
        },
        init: function (options) {
            this._super('com-force-city-panel', options);
            this.element().addClass('com-force-city-panel');
            var self = this;
            this._playerProfile = this._options.getController().getPlayerProfile();
            this._forceProfile = this._options.getController().getForceProfile();
            this._elementsList = [];
            this._PRE_CHALLENGE_CODE = 230001;
            this._IN_CHALLENGE_CODE = 230002;
            this._CHALLENGE_FINISH_CODE = 230300;
            this._createPanel();
        },
        _createPanel: function () {
            var self = this;
            Mojo.ajax("/forceCity/index", {
                msgid: 0
            }, function (response) {
                if (response && response.errorCode == 0) {
                    self._data = response.data;
                    self._createCityPanel();
                }
                if (response && response.event != undefined) {
                    self._showSiegeCityWarResultDialog(response.event);
                }
            }, function () {});
        },
        _showSiegeCityWarResultDialog: function (result, callback) {
            var self = this;
            var title = undefined;
            var content = undefined;
            var leftBtnText = undefined;
            var leftBtnClick = undefined;
            var rightBtnText = Mojo.utils.locale('common', 'close');
            var rightBtnClick = function (that) {
                that.close();
            };
            self._forceSiegeCityName = result.attr.name;
            if (result.battle.status == 1) {
                title = Mojo.utils.locale('force', 'siege_city_war_win');
                content = $('<div class="tip"></div>');
                $('<div></div>').html(Mojo.utils.locale('force', 'siege_city_war_win_content', {
                    forcename: result.owner.name,
                    name: self._forceSiegeCityName,
                    niudanname: result.attr.name_exchange
                })).appendTo(content);
                $('<div></div>').html(Mojo.utils.locale('force', 'forcewar_win_commend')).appendTo(content);
                var commend = "";
                var icount = 1;
                for (var index in result.contribute) {
                    var commendplayer = result.contribute[index];
                    if (icount == result.contribute.length) {
                        commend += Mojo.utils.formatPlayerName(commendplayer);
                    } else if (icount % 2 == 0) {
                        commend += Mojo.utils.formatPlayerName(commendplayer) + ",<br/>";
                    } else {
                        commend += Mojo.utils.formatPlayerName(commendplayer) + ", ";
                    }
                    icount += 1;
                }
                $('<div></div>').html(commend).appendTo(content);
                leftBtnText = Mojo.utils.locale('force', 'force_boss_challenge_final_goexchange');
                leftBtnClick = function () {
                    Mojo.app.redirect('/force', {
                        index: 3,
                        selected: 1
                    });
                };
            } else if (result.battle.status == 2) {
                title = Mojo.utils.locale('force', 'siege_city_war_lose');
                content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'siege_city_war_lose_content', {
                    forcename: result.owner.name,
                    name: self._forceSiegeCityName
                }));
            } else if (result.battle.status == 3) {
                title = Mojo.utils.locale('force', 'force_city_war_result_title1');
                content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'force_city_war_result_content1', {
                    forcename: result.force.name,
                    name: self._forceSiegeCityName
                }));
            } else if (result.battle.status == 4) {
                title = Mojo.utils.locale('force', 'force_city_war_result_title2');
                content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'force_city_war_result_content2', {
                    forcename: result.owner.name,
                    name: self._forceSiegeCityName
                }));
            } else if (result.battle.status == 5) {
                title = Mojo.utils.locale('force', 'force_city_war_result_title1');
                content = $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'force_city_war_result_content3', {
                    name: self._forceSiegeCityName
                }));
            }
            (new Mojo.com.CommonDialog(undefined, {
                title: title,
                content: content,
                leftBtnText: leftBtnText,
                leftBtnClick: leftBtnClick,
                rightBtnText: rightBtnText,
                rightBtnClick: rightBtnClick,
                close: function () {
                    if (callback instanceof Function) {
                        callback();
                    }
                }
            })).open();
        },
        _createCityPanel: function () {
            var self = this;
            if (this._content != undefined) {
                this._content.element().remove();
            }
            this._content = new Mojo.Object(undefined, {
                classes: ['force-city-manage-panel']
            });
            this.element().append(this._content.element());
            this._cityProfile = new Mojo.Object(undefined, {
                classes: ['com-force-city-profile']
            });
            self._content.element().append(this._cityProfile.element());
            this._cityNameAndLevel = new Mojo.Object(undefined, {
                classes: ['com-force-city-name']
            });
            if (self._data.city == undefined) {
                this._cityNameAndLevel.element().html(Mojo.utils.locale('force', 'city_name'));
            } else {
                this._cityNameAndLevel.element().html(Mojo.utils.locale('force', 'city_name_and_level2', {
                    name: self._data.attr.name,
                    minlevel: self._data.attr.lv_min,
                    maxlevel: self._data.attr.lv_max
                }));
            }
            self._cityProfile.element().append(this._cityNameAndLevel.element());
            this._bossImage = new Mojo.Object(undefined, {
                classes: ['com-force-city-img']
            });
            $('<img />').addClass("card-image-url").bind("load", function () {
                self._bossImage.element().find(".card-image-url").show();
            }).hide().appendTo(this._bossImage.element()).attr({
                src: self._data.attr.image
            });
            self._cityProfile.element().append(this._bossImage.element());
            if (self._data.city == undefined) {
                this._cityInformation = new Mojo.Object(undefined, {
                    classes: ['com-force-city-information']
                });
                this._cityInformation.element().html(Mojo.utils.locale('force', 'city_introduce'));
                self._content.element().append(this._cityInformation.element());
            } else {
                this._subContent = new Mojo.Object(undefined, {
                    classes: ['com-force-city-information']
                });
                this._content.element().append(this._subContent.element());
                this._citySiegeRecord = new Mojo.Object(undefined, {
                    classes: ['com-force-city-siege-record']
                });
                this._citySiegeRecord.element().html(Mojo.utils.locale('force', 'city_siege_record', {
                    name: self._data.histories[0].force.name,
                    time: self._formatCDTime(self._data.histories[0].last)
                }));
                self._subContent.element().append(this._citySiegeRecord.element());
                this._mySiegeTime = new Mojo.Object(undefined, {
                    classes: ['com-force-my-siege-time']
                });
                this._mySiegeTime.element().html(Mojo.utils.locale('force', 'city_my_siege_time', {
                    time: self._formatCDTime(self._data.city.last)
                }));
                if (self._data.city.protection != undefined && 　self._data.city.protection　 > 0) {
                    this._mySiegeTime.element().hide();
                }
                self._subContent.element().append(this._mySiegeTime.element());
                this._protectTime = new Mojo.Object(undefined, {
                    classes: ['com-force-my-siege-time']
                });
                this._protectTime.element().html(Mojo.utils.locale('force', 'city_my_protect_time', {
                    time: self._formatCDTime(self._data.city.protection)
                }));
                if (self._data.city.protection == undefined || self._data.city.protection <= 0) {
                    this._protectTime.element().hide();
                }
                self._subContent.element().append(this._protectTime.element());
                this._cityHeart = new Mojo.Object(undefined, {
                    classes: ['com-force-city-heart']
                });
                if (parseInt(self._data.city.defence) >= 0) {
                    self._cityDefence = '+' + self._data.city.defence;
                } else {
                    self._cityDefence = self._data.city.defence;
                }
                this._cityHeart.element().html(Mojo.utils.locale('force', 'city_heart2', {
                    city_heart: self._data.city.popular,
                    city_heart_max: self._data.attr.popular,
                    city_heart_defence: self._cityDefence
                }));
                self._subContent.element().append(this._cityHeart.element());
                if (self._data.city.popular >= 60) {
                    this._cityHeart.element().find('span').addClass("city-heart-highlight-green");
                } else {
                    this._cityHeart.element().find('span').addClass("city-heart-highlight-red");
                }
                var cityHeartDetailBtn = $('<span class="chat hear-detail-btn"></span>').html('详细').appendTo(this._cityHeart.element());
                cityHeartDetailBtn.click(function (e) {
                    self._cityHeartDetailDlg();
                });
                if (self._recordTimeHandle != undefined) {
                    clearTimeout(self._recordTimeHandle);
                }
                self._recordTimeHandle = setTimeout(function () {
                    self._refreshRecordAndTime();
                }, 1000);
            }
            this._cityBuff = new Mojo.Object(undefined, {
                classes: ['com-force-city-buff']
            });
            this._cityBuff.element().html(Mojo.utils.locale('force', 'city_buff', {
                self_buff: self._data.attr.ad_grain_idio,
                force_buff: self._data.attr.ad_grain_pub
            }));
            self._content.element().append(this._cityBuff.element());
            this._cityGrain = new Mojo.Object(undefined, {
                classes: ['com-force-city-grain']
            });
            this._cityGrain.element().html(Mojo.utils.locale('force', 'city_grain'));
            this._grain = new Mojo.ui.Label(undefined, {
                classes: ['grain'],
                text: '0',
            });
            this._grain.text(Mojo.utils.locale('force', 'city_grain2', {
                self_grain: self._data.store_grain,
                max_grain: self._data.attr.store_grain
            }));
            this._grain.element().appendTo(this._cityGrain.element());
            self._content.element().append(this._cityGrain.element());
            this._cityButtons = new Mojo.Object(undefined, {
                classes: ['com-force-city-buttons']
            });
            self._content.element().append(this._cityButtons.element());
            if (self._data.city == undefined) {
                this._goForceWarButton = new Mojo.ui.Button('go-force-war-btn', {
                    text: Mojo.utils.locale('force', 'go_forcewar'),
                    special: 'button-big-red',
                    click: function () {
                        Mojo.app.redirect('/force', {
                            index: 2
                        });
                    }
                });
                self._cityButtons.element().append(this._goForceWarButton.element());
            } else {
                this._placateButton = new Mojo.ui.Button('placate-btn', {
                    text: Mojo.utils.locale('force', 'city_placate'),
                    special: 'button-big-red',
                    click: function () {
                        var dlg = new Mojo.com.CommonDialog(undefined, {
                            title: Mojo.utils.locale('force', 'city_placate_dlg_title'),
                            content: $('<div class="tip"></div>').html(Mojo.utils.locale('force', 'city_placate_dlg_content', {
                                rm: self._data.city.cost,
                                popular: self._data.attr.popular
                            })),
                            leftBtnText: Mojo.utils.locale('force', 'city_placate'),
                            leftBtnClick: function (that) {
                                that.close();
                                if (parseInt(self._playerProfile.rm) < parseInt(self._data.city.cost)) {
                                    var failDialog = new Mojo.ui.Dialog(undefined, {
                                        title: Mojo.utils.locale('force', "city_placate_fail_title")
                                    });
                                    $('<div class="tip"></div>').html(Mojo.utils.locale('force', "force_boss_challenge_lack_rm")).appendTo(failDialog._content);
                                    new Mojo.ui.Button(undefined, {
                                        text: Mojo.utils.locale('mall', 'go_payment'),
                                        special: "button-big-red",
                                        click: function () {
                                            failDialog.close();
                                            Mojo.app.redirect("/newmall", {
                                                selected: 5
                                            });
                                        }
                                    }).element().appendTo(failDialog._footer);
                                    new Mojo.ui.Button(undefined, {
                                        text: Mojo.utils.locale('common', 'close'),
                                        click: function () {
                                            failDialog.close();
                                        }
                                    }).element().appendTo(failDialog._footer);
                                    failDialog.open();
                                } else {
                                    self._placateCity(self._data.city.cost);
                                }
                            },
                            rightBtnText: Mojo.utils.locale('common', 'close'),
                            rightBtnClick: function (that) {
                                that.close();
                            },
                        });
                        dlg._content.append($('<div class="city-special-tip"></div>').html(Mojo.utils.locale('force', "city_placate_special_tip")));
                        dlg.open();
                    },
                    disableClick: function () {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'city_placate_no_right'));
                    }
                });
                self._cityButtons.element().append(this._placateButton.element());
                this._rm = new Mojo.ui.Label(undefined, {
                    classes: ['rm'],
                    text: '0',
                });
                this._rm.text(self._data.city.cost);
                this._placateButton.element().append(this._rm.element());
                if (parseInt(self._data.city.cost) < 10) {
                    this._placateButton.element().addClass("placate-button-with-rm1");
                } else if (parseInt(self._data.city.cost) < 100) {
                    this._placateButton.element().addClass("placate-button-with-rm2");
                } else if (parseInt(self._data.city.cost) < 1000) {
                    this._placateButton.element().addClass("placate-button-with-rm3");
                } else if (parseInt(self._data.city.cost) < 10000) {
                    this._placateButton.element().addClass("placate-button-with-rm4");
                } else if (parseInt(self._data.city.cost) < 100000) {
                    this._placateButton.element().addClass("placate-button-with-rm5");
                } else {
                    this._placateButton.element().addClass("placate-button-with-rm");
                }
                if (parseInt(self._playerProfile.position_id) > 19) {
                    self._placateButton.disable(true);
                }
            }
            this._getGrainButton = new Mojo.ui.Button('city-get-grain-btn', {
                text: Mojo.utils.locale('force', 'city_get_grain'),
                click: function () {
                    self._getGrain();
                },
                disableClick: function () {
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'city_get_grain_zero'));
                }
            });
            self._cityButtons.element().append(this._getGrainButton.element());
            if (parseInt(self._data.store_grain) < 1) {
                self._getGrainButton.disable(true);
            }
        },
        _cityHeartDetailDlg: function () {
            var self = this;
            var dlg = new Mojo.com.CommonDialog('force-city-heartDetail-dlg', {
                title: '民心',
                leftBtnText: self.getL('common', 'close'),
                leftBtnClick: function (that) {
                    that.close();
                }
            });
            var list = new Mojo.ui.ListPanel('force-city-heartDetail', {
                showMore: true,
                moreLabel: self.getL('force', 'more'),
                pageSize: 10,
                scrollable: true,
                loadFunc: function (start, count, params, that) {
                    Mojo.ajax('/force/messageList', {
                        start: start,
                        count: count,
                        type: 'city'
                    }, function (result) {
                        if (result.errorCode == 0) {
                            if (result.data && result.data.messages && result.data.messages.length >= 10) {
                                list._options.alwaysMore = true;
                                list._more.element().show();
                                list.resize();
                            }
                            that.appendData(result.data.messages);
                        }
                    });
                },
                drawFunc: function (data) {
                    var t = self._getMsgTime(data.create_time);
                    var obj = new Mojo.Object(undefined, {
                        classes: ['force-city-heartDetail-element']
                    });
                    obj.element().html(data.content + '（' + t + '）' || '');
                    return obj;
                }
            });
            setTimeout(function () {
                var paragraph = $('<div class="paragraph"></div>').appendTo(dlg._content);
                list.element().appendTo(paragraph);
                dlg.open();
                list.resize();
            });
        },
        _getMsgTime: function (time) {
            var date = new Date();
            var now = date.getTime() / 1000;
            var send = parseInt(time);
            var t = parseInt(now - send);
            if (t < 1) {
                t = 1;
            }
            var day = parseInt(t / (3600 * 24));
            var hour = parseInt((t % (3600 * 24)) / 3600);
            var minute = parseInt((t % 3600) / 60);
            var second = t % 60;
            return (((day > 0 ? day + Mojo.utils.locale('ui', 'days') : "") || (hour > 0 ? hour + Mojo.utils.locale('ui', 'hours') : "") || (minute > 0 ? minute + Mojo.utils.locale('ui', 'minutes') : "") || (second > 0 ? second + Mojo.utils.locale('ui', 'seconds') : "")) +
                Mojo.utils.locale('ui', 'ago'));
        },
        _placateCity: function (pcost) {
            var self = this;
            Mojo.ajax("/forceCity/placate", {
                cost: pcost
            }, function (response) {
                if (response && response.errorCode === 0) {
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'city_placate_result'));
                    self._createPanel();
                } else if (response && response.errorCode === 10005) {
                    var failDialog = new Mojo.ui.Dialog(undefined, {
                        title: Mojo.utils.locale('force', "city_placate_fail_title")
                    });
                    $('<div class="tip"></div>').html(Mojo.utils.locale('force', "force_boss_challenge_lack_rm")).appendTo(failDialog._content);
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('mall', 'go_payment'),
                        special: "button-big-red",
                        click: function () {
                            failDialog.close();
                            Mojo.app.redirect("/newmall", {
                                selected: 5
                            });
                        }
                    }).element().appendTo(failDialog._footer);
                    new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('common', 'close'),
                        click: function () {
                            failDialog.close();
                        }
                    }).element().appendTo(failDialog._footer);
                    failDialog.open();
                } else {
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        title: response.data ? response.data.title : Mojo.utils.locale('force', 'forcewar_tip_title'),
                        content: $("<div class='tip'></div>").html(response.errorMsg),
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                            self._createPanel();
                        },
                    });
                    dlg.open();
                }
            }, function () {}, {
                showWait: true
            });
        },
        _getGrain: function () {
            var self = this;
            Mojo.ajax("/forceCity/receive", {}, function (response) {
                if (response && response.errorCode === 0) {
                    Mojo.app.toast.show(Mojo.utils.locale('force', 'city_get_grain_result', {
                        grain: response.data.received
                    }));
                    Mojo.page.Force.getController().diffPlayer({
                        grain: response.data.received
                    });
                    self._createPanel();
                } else {
                    var dlg = new Mojo.com.CommonDialog(undefined, {
                        title: response.data ? response.data.title : Mojo.utils.locale('force', 'forcewar_tip_title'),
                        content: $("<div class='tip'></div>").html(response.errorMsg),
                        rightBtnText: Mojo.utils.locale('common', 'close'),
                        rightBtnClick: function (that) {
                            that.close();
                            self._createPanel();
                        },
                    });
                    dlg.open();
                }
            }, function () {}, {
                showWait: true
            });
        },
        _refreshRecordAndTime: function () {
            var self = this;
            this._record_force_name = self._data.histories[0].force.name;
            if (self._cd2 != undefined) {
                self._cd2 += 1;
            } else {
                self._cd2 = self._data.city.last + 1;
            }
            if (self._cd3 != undefined) {
                self._cd3 -= 1;
            } else {
                self._cd3 = self._data.city.protection - 1;
            }
            if (self._cd3 <= 0) {
                self._cd3 = undefined;
                self._protectTime.element().hide();
                self._mySiegeTime.element().show();
            } else {
                self._protectTime.element().html(Mojo.utils.locale('force', 'city_my_protect_time', {
                    time: self._formatCDTime(self._cd3)
                }));
            }
            if (this._forceProfile.id == this._data.histories[0].force.id && self._data.city.last == self._data.histories[0].last) {
                self._cd = self._cd2;
            } else {
                if (self._cd2 >= self._data.histories[0].last) {
                    self._record_force_name = self._forceProfile.name;
                    self._cd = self._cd2;
                } else {
                    self._cd = self._data.histories[0].last;
                }
            }
            this._citySiegeRecord.element().html(Mojo.utils.locale('force', 'city_siege_record', {
                name: self._record_force_name,
                time: self._formatCDTime(self._cd)
            }));
            this._mySiegeTime.element().html(Mojo.utils.locale('force', 'city_my_siege_time', {
                time: self._formatCDTime(self._cd2)
            }));
            self._recordTimeHandle = setTimeout(function () {
                self._refreshRecordAndTime();
            }, 1000);
        },
        _getDefaultOptions: function () {
            return {
                backCallback: $.noop,
                interval: 10
            };
        },
        _formatCDTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
        localeCat: function () {
            return 'force';
        }
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceCityWarElement = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceCityWarElement";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass("mojo-com-forcewarelement box-inner");
            this._elementPosition = undefined;
            this._elementGeneral = undefined;
            this._elementValue = undefined;
            this._elementForce = undefined;
            this._elementButton = undefined;
            this._elementAssistForce = undefined;
            this._elementExpireTime = undefined;
            this._expireTime = undefined;
            this._forceProfile = Mojo.page.Force.getController().getForceProfile();
            this.refresh();
        },
        refresh: function (data) {
            if (data == undefined) {
                data = this._data;
            }
            var assistFlag = false;
            if (this._forceProfile.type == 2 || this._forceProfile.type == 3)
                assistFlag = true;
            this._createElementPosition(data);
            this._createElementGeneral(data);
            this._createElementForce(data);
            if (assistFlag)
                this._createElementAssistForce(data);
            this._createElementValue(data);
            if (assistFlag)
                this._createElementExpireTime(data);
            this._createElementButton(data);
        },
        _getDefaultOptions: function () {
            return {
                myIndex: 0,
                btnText: "",
                btnSpecial: "go-instead-btn",
                btnDisabled: false,
                clickCallback: undefined,
                disableClickCallback: undefined,
                showForce: false,
                showDefence: true,
                isForceWarEnemy: false,
                showAssistForce: false,
                showExpireTime: false,
                showBtn: false,
                showHr: false
            };
        },
        _createElementPosition: function (data) {
            if (Mojo.utils.isNone(this._elementPosition)) {
                this._elementPosition = new Mojo.ui.Label();
                this.element().append(this._elementPosition.element());
                if (this._options.showNonRMBPlayerAssistBtn == true) {
                    this._nonRMBPlayOverallContribute = $("<div class='non-rmb-player-overall'></div>");
                    this.element().append(this._nonRMBPlayOverallContribute);
                    this._nonRMBPlayIndividualContribute = $("<div class='non-rmb-player-individual'></div>");
                    this.element().append(this._nonRMBPlayIndividualContribute);
                }
                this._buffDefense = new Mojo.Object(undefined, {
                    classes: ['com-force-city-war-add-defense']
                });
                this.element().append(this._buffDefense.element());
                $("<div class='line'></div>").appendTo(this.element());
                if (this._options.showHr != false) {
                    this._elementPosition.element().append($('<hr>'));
                }
            }
            var str;
            if (this._options.isForceWarEnemy) {
                str = Mojo.utils.locale("force", "forcewar_enemy_level").replace(/\{\{:index\}\}/g, data.level);
            } else {
                str = Mojo.utils.locale("force", "forcewar_element_position").replace(/\{\{:index\}\}/g, data.id);
            }
            this._elementPosition.element().addClass("forcewar-element-label forcewar-element-position").find(".icon").html(str);
            this._elementPosition.text(data.name);
            var self = this;
            if (parseInt(self._options.cityDefence) >= 0) {
                self._cityDefence = '+' + self._options.cityDefence;
                this._buffDefense.element().addClass("com-force-city-war-add-defense-green");
            } else {
                self._cityDefence = self._options.cityDefence;
                this._buffDefense.element().addClass("com-force-city-war-add-defense-red");
            }
            this._buffDefense.element().html(Mojo.utils.locale('force', 'city_heart3', {
                city_heart_defence: self._cityDefence
            }));
        },
        _createElementGeneral: function (data) {
            if (Mojo.utils.isNone(this._elementGeneral)) {
                this._elementGeneral = new Mojo.ui.Label();
                this.element().append(this._elementGeneral.element());
            }
            this._elementGeneral.element().addClass("forcewar-element-label forcewar-element-general");
            if (!this._options.isForceWarEnemy) {
                if (Mojo.utils.isNone(data.captured)) {
                    this._elementGeneral.element().find(".icon").html(Mojo.utils.locale("force", "forcewar_element_general"));
                    if (Mojo.utils.isNone(data.defender) == false) {
                        this._elementGeneral.text(Mojo.utils.formatPlayerName(data.defender));
                    } else {
                        this._elementGeneral.text(Mojo.utils.locale('force', 'none'));
                    }
                } else {
                    this._elementGeneral.element().find(".icon").html(Mojo.utils.locale("force", "forcewar_element_captured"));
                    if (data.captured.name) {
                        this._elementGeneral.text(Mojo.utils.formatPlayerName(data.captured));
                    } else {
                        this._elementGeneral.text(Mojo.utils.locale('force', 'none'));
                    }
                }
            } else {
                this._elementGeneral.text('<span class = "baomadeng">' + Mojo.utils.locale('force', 'forcewar_enemy_owner', {
                    owner_title: '<span class="official">' + data.owner_title + '</span>',
                    owner_name: data.owner_name
                }) + '</span>');
            }
        },
        _createElementValue: function (data) {
            if (this._options.isForceWarEnemy) {
                this._elementValue = new Mojo.ui.Label();
                this.element().append(this._elementValue.element());
                this._elementValue.element().addClass("forcewar-element-label forcewar-element-defence");
                this._elementValue.text(Mojo.utils.locale('force', 'forcewar_enemy_mem', {
                    current_mem: data.current_mem,
                    total_mem: data.total_mem
                }));
                this._elementValue = $("<div class = 'forcewar-element-enemy-gain-text'></div>");
                this.element().append(this._elementValue);
                this._elementValue.html(Mojo.utils.locale('force', 'forcewar_enemy_grain'));
                new Mojo.ui.Label(undefined, {
                    classes: this._options.isForceWarEnemy == false ? ['grain'] : ['grain enemy'],
                    text: data.grain
                }).element().appendTo(this._elementValue);
            } else {
                if (this._options.showDefence == false) {
                    return;
                }
                if (Mojo.utils.isNone(this._elementValue)) {
                    this._elementValue = new Mojo.ui.Label();
                    this.element().append(this._elementValue.element());
                }
                this._elementValue.element().addClass("forcewar-element-label forcewar-element-defence").find(".icon").html(Mojo.utils.locale("force", "forcewar_element_defence"));
                if (Mojo.utils.isNone(data.defender) == false && Mojo.utils.isNone(data.defender.defence_min) == false) {
                    this._elementValue.text(data.defender.defence_min + "~" + data.defender.defence_max);
                } else if (Mojo.utils.isNone(data.captured) == false && Mojo.utils.isNone(data.captured.defence_min) == false) {
                    this._elementValue.text(data.captured.defence_min + "~" + data.captured.defence_max);
                } else {
                    this._elementValue.text("?");
                }
            }
        },
        _createElementAssistForce: function (data) {
            var forceName = undefined;
            if (this._options.showAssistForce == false) {
                return;
            }
            if (Mojo.utils.isNone(data.defender) == true) {
                if (Mojo.utils.isNone(this._elementAssistForce) == false) {
                    this._elementAssistForce.hide();
                    this._elementAssistForce = undefined;
                }
                return;
            }
            if (Mojo.utils.isNone(this._elementAssistForce)) {
                this._elementAssistForce = new Mojo.ui.Label();
                this.element().append(this._elementAssistForce.element());
            }
            if (Mojo.utils.isNone(data.defender.force) || Mojo.utils.isNone(data.defender.force.name)) {
                forceName = this._forceProfile.name;
            } else {
                forceName = data.defender.force.name;
            }
            this._elementAssistForce.element().addClass("forcewar-element-label forcewar-element-assistforce").find(".icon").html(Mojo.utils.locale("force", "forcewar_element_assistforce"));
            this._elementAssistForce.text(forceName);
        },
        _createElementExpireTime: function (data) {
            if (this._options.showExpireTime == false) {
                w.clearInterval(this._interval);
                return;
            }
            if (Mojo.utils.isNone(data.defender) || Mojo.utils.isNone(data.defender.force) || Mojo.utils.isNone(data.defender.force.expire)) {
                if (Mojo.utils.isNone(this._elementExpireTime) == false) {
                    this._elementExpireTime.hide();
                    this._elementExpireTime = undefined;
                    w.clearInterval(this._interval);
                }
                return;
            }
            this._expireTime = data.defender.force.expire;
            this._showExpire();
        },
        _createElementForce: function (data) {
            var self = this;
            if (this._options.showForce == false) {
                return;
            }
            var force = "";
            if (data.captured && data.captured.name) {
                if (data.captured.force != undefined) {
                    force = data.captured.force;
                } else {
                    force = self._forceProfile.name;
                }
            } else if (data.defender) {
                force = data.defender.force;
            } else {
                force = Mojo.utils.locale('force', 'none');
            }
            if (Mojo.utils.isNone(this._elementForce)) {
                this._elementForce = new Mojo.ui.Label();
                this.element().append(this._elementForce.element());
            }
            this._elementForce.element().addClass("forcewar-element-label forcewar-element-force").find(".icon").html(Mojo.utils.locale("force", "forcewar_element_force"));
            this._elementForce.text(force);
        },
        _createElementButton: function (data) {
            if (Mojo.utils.isNone(this._elementButton) == false) {
                return;
            }
            var self = this;
            if (self._options.showBtn == true || self._options.btnDisabled == false) {
                this._elementButton = new Mojo.ui.Button(undefined, {
                    text: self._options.btnText,
                    classes: self._options.isForceWarEnemy == false ? ['go-button'] : ['go-button enemy-btn'],
                    disabled: self._options.btnDisabled,
                    disableClick: function () {
                        if (self._options.disableClickCallback instanceof Function) {
                            self._options.disableClickCallback(self);
                        }
                    },
                    click: function () {
                        if (self._options.clickCallback instanceof Function) {
                            self._options.clickCallback(self);
                        }
                    },
                    special: self._options.btnSpecial,
                });
                if (self._options.btnAttackLimit != undefined && self._options.btnAttackLimit.rest == 0) {
                    this._elementButton.disable(true);
                }
                if (self._options.showNonRMBPlayerAssistBtn == true && (data.captured != undefined || data.defender != undefined)) {
                    this._nonRMBPlayAssistButton = new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('force', 'non_rmb_player_assist_attack'),
                        classes: ['go-button'],
                        click: function () {
                            if (self._options.nonRMBClickCallback instanceof Function) {
                                self._options.nonRMBClickCallback(self, 'decr');
                            }
                        },
                        special: "force-back-btn",
                    });
                    this._nonRMBPlayAssistButton.element().appendTo(this.element());
                    var overallContribute = undefined;
                    var individualContribute = undefined;
                    if (data.captured != undefined) {
                        overallContribute = data.captured.buff.total;
                        individualContribute = data.captured.buff.self;
                    } else if (data.defender != undefined) {
                        overallContribute = data.defender.buff.total;
                        individualContribute = data.defender.buff.self;
                    }
                    this._nonRMBPlayOverallContribute.html(Mojo.utils.locale('force', 'non_rmb_player_defense_data', {
                        percent: '-' + overallContribute
                    }));
                    this._nonRMBPlayOverallContribute.addClass("non-rmb-assist-attack-red");
                    if (individualContribute != undefined) {
                        this._nonRMBPlayIndividualContribute.html(Mojo.utils.locale('force', 'non_rmb_player_sub_defense', {
                            percent: individualContribute
                        }));
                    }
                }
            } else {
                this._elementButton = new Mojo.Object();
                this._elementButton.element().addClass('has-captured-tag').html(Mojo.utils.locale('force', 'forcewar_element_hascaptured'));
                if (self._options.showNonRMBPlayerAssistBtn == true && (data.captured != undefined || data.defender != undefined)) {
                    this._nonRMBPlayAssistButton = new Mojo.ui.Button(undefined, {
                        text: Mojo.utils.locale('force', 'non_rmb_player_assist_defense'),
                        classes: ['go-button'],
                        click: function () {
                            if (self._options.nonRMBClickCallback instanceof Function) {
                                self._options.nonRMBClickCallback(self, 'incr');
                            }
                        },
                        special: "force-back-btn",
                    });
                    this._nonRMBPlayAssistButton.element().appendTo(this.element());
                    var overallContribute = undefined;
                    var individualContribute = undefined;
                    if (data.captured != undefined) {
                        overallContribute = data.captured.buff.total;
                        individualContribute = data.captured.buff.self;
                    } else if (data.defender != undefined) {
                        overallContribute = data.defender.buff.total;
                        individualContribute = data.defender.buff.self;
                    }
                    this._nonRMBPlayOverallContribute.html(Mojo.utils.locale('force', 'non_rmb_player_defense_data', {
                        percent: '+' + overallContribute
                    }));
                    this._nonRMBPlayOverallContribute.addClass("non-rmb-assist-attack-green");
                    if (individualContribute != undefined) {
                        this._nonRMBPlayIndividualContribute.html(Mojo.utils.locale('force', 'non_rmb_player_add_defense', {
                            percent: individualContribute
                        }));
                    }
                }
            }
            this._elementButton.element().appendTo(this.element());
        },
        doClick: function () {
            var self = this;
            if (self._options.clickCallback instanceof Function) {
                self._options.clickCallback(self);
            }
        },
        _showExpire: function () {
            var self = this;
            if (self._expireTime == undefined || self._expireTime == 0) return;
            if (Mojo.utils.isNone(self._elementExpireTime)) {
                self._elementExpireTime = new Mojo.ui.Label();
                self.element().append(self._elementExpireTime.element());
            } else {
                w.clearInterval(self._interval);
            }
            self._elementExpireTime.element().addClass("forcewar-element-label forcewar-element-expiretime").find(".icon").html(Mojo.utils.locale("force", "forcewar_element_expiretime"));
            self._elementExpireTime.text(self._formatExpireTime(self._expireTime) + Mojo.utils.locale("force", "goaway"));
            self._interval = w.setInterval(function () {
                if (self._expireTime != undefined && self._expireTime > 1) {
                    self._expireTime--;
                    self._elementExpireTime.text(self._formatExpireTime(self._expireTime) + Mojo.utils.locale("force", "goaway"));
                } else {
                    self._expireTime = 0;
                    w.clearInterval(self._interval);
                    self._data.defender = undefined;
                    self.refresh(self._data);
                    var msg = self._forceProfile.owner.name + Mojo.utils.locale('force', 'expiretime_coming_message');
                    (new Mojo.com.HandleDialog({
                        title: Mojo.utils.locale('force', 'expiretime_coming'),
                        message: msg,
                        btn1: Mojo.utils.locale('force', 'forcewar_defense'),
                        handle1: function () {
                            Mojo.app.redirect('/force', {
                                index: 2,
                                refresh: 1,
                                selected: 1
                            });
                        },
                        close: function () {
                            if (self._options.resizeDefence instanceof Function) {
                                self._options.resizeDefence();
                            }
                        },
                    })).open(true);
                }
            }, 1000);
        },
        _formatExpireTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.CityElement = w.Mojo.Object.extend({
        clsname: function () {
            return "com.CityElement";
        },
        init: function (data, options) {
            this._data = data;
            this._super(undefined, options);
            this.element().addClass('mojo-com-cityelement').addClass('box-inner');
            this._addContent();
        },
        _addContent: function () {
            var self = this;
            this._cityImage = $('<div class="force-city-img"></div>');
            $('<img />').addClass("card-image-url").bind("load", function () {
                self._cityImage.find(".card-image-url").show();
            }).hide().appendTo(this._cityImage).attr({
                src: self._data.attr.image
            });
            this._cityImage.appendTo(this.element());
            this._cityInfo = $('<div class="force-city-info"></div>');
            $('<div class="force-city-name-and-level"></div>').appendTo(this._cityInfo).html(Mojo.utils.locale('force', 'city_name_and_level', {
                name: self._data.attr.name,
                minlevel: self._data.attr.lv_min,
                maxlevel: self._data.attr.lv_max
            }));
            $('<div class="force-city-buff"></div>').appendTo(this._cityInfo).html(Mojo.utils.locale('force', 'city_buff', {
                self_buff: self._data.attr.ad_grain_idio,
                force_buff: self._data.attr.ad_grain_pub
            }));
            $('<div class="force-city-exchange"></div>').appendTo(this._cityInfo).html(Mojo.utils.locale('force', 'city_exchange', {
                city_exchange: self._data.attr.name_exchange
            }));
            $('<div class="force-city-owner"></div>').appendTo(this._cityInfo).html(Mojo.utils.locale('force', 'owner_name', {
                owner_name: self._data.force.name
            }));
            if (self._data.city.protection == 0 || self._data.city.protection == undefined) {
                if (parseInt(self._data.city.defence) >= 0) {
                    self._cityDefence = '+' + self._data.city.defence;
                } else {
                    self._cityDefence = self._data.city.defence;
                }
                $('<div class="force-city-heart"></div>').appendTo(this._cityInfo).html(Mojo.utils.locale('force', 'city_heart', {
                    city_heart: self._data.city.popular,
                    city_heart_defence: self._cityDefence
                }));
            } else {
                self.showCd();
            }
            this._cityInfo.appendTo(this.element());
            var str = '';
            if (Array.isArray(self._data.histories)) {
                $.each(self._data.histories, function (i, d) {
                    if (i == 0) {
                        str = Mojo.utils.locale('force', 'city_rank', {
                            forcename: d.force.name,
                            timespan: self._formatCDTime2(d.last)
                        });
                    } else {
                        str = str + '<br>' + Mojo.utils.locale('force', 'city_rank', {
                            forcename: d.force.name,
                            timespan: self._formatCDTime2(d.last)
                        });
                    }
                });
            }
            this._cityOwnerRank = $('<div class="force-owner-rank"></div>');
            this._cityOwnerRank.html(str);
            this._cityOwnerRank.appendTo(this.element());
            if (this._options.showBtn) {
                var player = Mojo.page.Force.getController().getPlayerProfile();
                var isDisable = !(player.force_rights.__all__ || player.force_rights.declare_war);
                self.btn = new Mojo.ui.Button(undefined, {
                    text: self._options.btnText,
                    classes: ['go-button'],
                    special: self._options.specialClass,
                    disabled: isDisable ? true : false,
                    disableClick: function () {
                        if (isDisable) {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'siege_button_disable_msg3'));
                        } else if (parseInt(forcelevel) < parseInt(self._data.attr.lv_min) || parseInt(forcelevel) > parseInt(self._data.attr.lv_max)) {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'siege_button_disable_msg'));
                        } else if (self._data.city.protection > 0) {
                            Mojo.app.toast.show(Mojo.utils.locale('force', 'siege_button_disable_msg2'));
                        }
                    },
                    click: function () {
                        if (self._options.typeOfbattle) {
                            var force_profile = Mojo.page.Force == undefined ? undefined : Mojo.page.Force.getController().getForceProfile();
                            if (force_profile && parseInt(force_profile.protect_status) == 1) {
                                (new Mojo.com.CommonDialog(undefined, {
                                    title: Mojo.utils.locale("force", "force_protected_tips"),
                                    content: '<div class = "paragraph">' + Mojo.utils.locale("force", "force_" + self._options.typeOfbattle + "_content") + '</div>',
                                    leftBtnText: Mojo.utils.locale("force", self._options.typeOfbattle),
                                    leftBtnClick: function (that) {
                                        that.close();
                                        self._options.onBtnClick(self._data);
                                    },
                                    rightBtnText: Mojo.utils.locale("common", "cancel"),
                                    rightBtnClick: function (that) {
                                        that.close();
                                    },
                                })).open();
                            } else {
                                self._options.onBtnClick(self._data);
                            }
                        } else {
                            self._options.onBtnClick(self._data);
                        }
                    },
                });
                this.element().append(self.btn.element());
                var forcelevel = Mojo.page.Force.getController().getForceProfile().level;
                if (parseInt(forcelevel) < parseInt(self._data.attr.lv_min) || parseInt(forcelevel) > parseInt(self._data.attr.lv_max) || self._data.city.protection > 0) {
                    self.btn.disable(true);
                }
            }
        },
        showCd: function () {
            var self = this;
            if (self._data.city.protection == undefined || self._data.city.protection == 0) return;
            self.cd = self._data.city.protection;
            self._lblCd = $('<div class="city-protect-cd"></div>').appendTo(this._cityInfo);
            self._lblCd.html(Mojo.utils.locale('force', 'city_protect_cd', {
                timespan: self._formatCDTime(self.cd)
            }));
            self._interval = w.setInterval(function () {
                if (self.cd > 1) {
                    self.cd--;
                    self._lblCd.html(Mojo.utils.locale('force', 'city_protect_cd', {
                        timespan: self._formatCDTime(self.cd)
                    }));
                } else {
                    self.cd = 0;
                    w.clearInterval(self._interval);
                    self._lblCd.remove();
                    if (parseInt(self._data.city.defence) >= 0) {
                        self._cityDefence = '+' + self._data.city.defence;
                    } else {
                        self._cityDefence = self._data.city.defence;
                    }
                    $('<div class="force-city-heart"></div>').appendTo(self._cityInfo).html(Mojo.utils.locale('force', 'city_heart', {
                        city_heart: self._data.city.popular,
                        city_heart_defence: self._cityDefence
                    }));
                    self.btn.disable(false);
                    var forcelevel = Mojo.page.Force.getController().getForceProfile().level;
                    if (parseInt(forcelevel) < parseInt(self._data.attr.lv_min) || parseInt(forcelevel) > parseInt(self._data.attr.lv_max)) {
                        self.btn.disable(true);
                    }
                }
            }, 1000);
        },
        _formatCDTime2: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
        _formatCDTime: function (sec) {
            var str = '';
            var dd = parseInt(sec / 86400);
            var hh = parseInt((sec % 86400) / 3600);
            var mm = parseInt((sec % 3600) / 60);
            var ss = sec % 60;
            if (dd > 0) {
                str = dd + Mojo.utils.locale('common', 'day') + hh + Mojo.utils.locale('common', 'hour');
            } else if (hh > 0) {
                str = hh + Mojo.utils.locale('common', 'hour') + mm + Mojo.utils.locale('common', 'minute');
            } else if (mm > 0) {
                str = mm + Mojo.utils.locale('common', 'minute') + ss + Mojo.utils.locale('common', 'second');
            } else {
                str = ss + Mojo.utils.locale('common', 'second');
            }
            return str;
        },
        _getDefaultOptions: function () {
            return {
                showBtn: false,
                btnText: '',
                specialClass: 'go-attack-btn',
                onBtnClick: $.noop
            };
        },
    });
})(window, jQuery);;;
(function (w, $) {
    w.Mojo = w.Mojo || {};
    w.Mojo.page = w.Mojo.page || {};
    w.Mojo.com.CityFind = w.Mojo.Object.extend({
        clsname: function () {
            return "com.CityFind";
        },
        init: function (id, options) {
            this._super(id, options);
            this.element().addClass('search-area');
            this._search = $("<div class='search-input'></div>");
            this._search.appendTo(this.element());
            this._addContent();
            this._addButton();
        },
        _addContent: function () {
            var self = this;
            this._input = $('<input  type="text" maxlength="10" />').val(Mojo.utils.locale('force', 'force_city_search_hint')).appendTo(this._search);
            this._input.click(function () {
                if (self._input.val() == Mojo.utils.locale('force', 'force_city_search_hint')) {
                    self._input.val("");
                } else {
                    this.selectionStart = 0;
                    this.selectionEnd = this.value.length;
                }
            });
        },
        _addButton: function () {
            var self = this;
            new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'search'),
                special: 'force-search-btn',
                click: function () {
                    self._doSearch();
                }
            }).element().appendTo(self.element());
        },
        _doSearch: function () {
            var self = this;
            window.scrollTo(0, 0);
            if (this._input.val() == Mojo.utils.locale('force', 'force_city_search_hint'))
                this._input.val('');
            if (Mojo.utils.isNone(this._input.val())) {
                if (self._options.noinput() == false) {
                    return;
                }
            }
            var param = $.extend(true, self._options.param, {
                search: this._input.val()
            });
            Mojo.ajax(self._options.url, param, function (response) {
                self._options.onSearch(response, self._input.val());
            }, function () {});
        },
        _getDefaultOptions: function () {
            return {
                onSearch: $.noop,
                url: '/forceCity/cities',
                param: {},
                with_ranking: 0,
                noinput: function () {
                    return false;
                }
            };
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.CityList = w.Mojo.ui.ListPanel.extend({
        clsname: function () {
            return "com.CityList";
        },
        init: function (id, options) {
            this._super(id, options);
            this.element().addClass('mojo-com-citylist');
            this._playerProfile = Mojo.page.Force == undefined ? undefined : Mojo.page.Force.getController().getPlayerProfile();
        },
        _getDefaultOptions: function () {
            var self = this;
            return $.extend(true, this._super(), {
                type: 'rand',
                targetForceId: undefined,
                loadFunc: function (start, count, orderParams) {
                    self._options.renderDatacallback();
                    self._more.hide();
                    self._retrieveForces(start, count, orderParams);
                },
                drawFunc: function (data) {
                    return self._drawForce(data);
                },
                showMore: false,
                moreLabel: '',
                pageSize: 10,
                scrollable: true,
                emptyLabel: Mojo.utils.locale('force', 'force_empty'),
                showBtn: true,
                btnText: Mojo.utils.locale('common', 'view'),
                onBtnClick: $.noop,
                renderDatacallback: $.noop,
                afterDataRender: $.noop
            });
        },
        _retrieveForces: function (start, count, orderParams) {
            var self = this;
            var url = undefined;
            var params = {
                start: start,
                count: count
            };
            if (self._options.type == 'battle') {
                url = '/forceCity/cities';
                if (this._options.targetForceId) {
                    params["targetForceId"] = this._options.targetForceId;
                }
                if (self._options.from == 'forcecity') {
                    params["simple"] = '1';
                }
            } else if (self._options.type == 'search') {
                url = '/force/search';
                $.extend(true, params, self._options.forceSearchByLevelParams);
            }
            if (url != undefined) {
                Mojo.ajax(url, params, function (response) {
                    if (response.errorCode == 0) {
                        if (response.data == undefined) {
                            self._renderData(response.data);
                            return;
                        }
                        if ($.isArray(response.data)) {
                            self._renderData(response.data);
                        } else if (response.data && $.isArray(response.data.list)) {
                            self._renderData(response.data.list);
                        }
                    } else {
                        if (self._options.erroCallback != undefined && self._options.erroCallback instanceof Function) {
                            self._options.erroCallback(response);
                        }
                    }
                }, function (e) {});
            }
        },
        _renderData: function (forces) {
            var self = this;
            this.appendData(forces, true);
            this._options.afterDataRender();
            if (this._options.alwaysMore == true || (this._options.showMore && forces && forces.length >= this._options.pageSize)) {
                this._more.show();
            }
            setTimeout(function () {
                self.resize();
            }, 200);
            if (this._options.callback != undefined && this._options.callback instanceof Function) {
                this._options.callback(self, forces);
            }
        },
        _drawForce: function (data) {
            var self = this;
            return new Mojo.com.CityElement(data, {
                type: self._options.type,
                showBtn: self._options.showBtn,
                btnText: self._options.btnText,
                typeOfbattle: self._options.typeOfbattle,
                onBtnClick: self._options.onBtnClick,
                position_id: self._playerProfile && self._playerProfile.position_id ? self._playerProfile.position_id : undefined,
                callback: $.noop,
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.CitySearch = w.Mojo.Object.extend({
        clsname: function () {
            return "com.CitySearch";
        },
        init: function (id, options) {
            this._super(id, options);
            this.element().addClass('mojo-com-citysearch');
            if (this._options.viewMode) {
                this.element().addClass('mojo-com-citysearch-viewmode');
            }
            this._params = {
                type_id: '1',
                order_id: '1'
            };
            this._addTabs();
            this._addButton();
        },
        _addTabs: function () {
            var self = this;
            this._panels = [{
                type: 'siege',
                label: 'siege'
            }, ];
            this._tabs = new Mojo.ui.Tabs('tabs-siege', {
                selectionChange: function (i) {
                    self._createList(i);
                },
                selected: 0
            });
            $.each(this._panels, function (i, p) {
                if (self._options.from == 'forcecity') {
                    self._tabs.addTab(Mojo.utils.locale('force', 'city'));
                } else {
                    self._tabs.addTab(Mojo.utils.locale('force', 'siege'));
                }
            });
            this.element().append(this._tabs.element());
            this._tabs.element().find('.panel').addClass('box-outter');
            self._createList(0);
        },
        _createList: function (index) {
            var self = this;
            var p = this._panels[index];
            if (p.list == undefined || p.list == null) {
                var defaultCityListOptions = {
                    type: 'battle',
                    from: self._options.from,
                    showBtn: true,
                    onBtnClick: $.noop,
                    alwaysMore: false,
                    refreshable: false,
                    showMore: true,
                    moreLabel: '',
                    params: self._params,
                };
                if (Mojo.utils.isNone(this._options.cityListOptions) == false) {
                    $.extend(defaultCityListOptions, this._options.cityListOptions);
                    this._options.cityListOptions.listData = undefined;
                }
                p.list = new Mojo.com.CityList("city-list", defaultCityListOptions);
                this._tabs.setPanel(index, p.list);
            } else {
                p.list.element().remove();
                p.list = undefined;
                self._createList(0);
                return;
            }
            if (this._options.showSearch == true) {
                self._addSearch();
            }
            if (this._options.showHeader == true) {
                self._addHeader();
            }
        },
        _refreshFilter: function () {
            var filter = Mojo.cache.get(this._options.filterName);
            if (filter != undefined) {
                for (var p in filter) {
                    this._params[p] = filter[p];
                }
            }
        },
        _addSearch: function () {
            var self = this;
            var p = self._panels[0];
            this.search = new Mojo.com.CityFind(undefined, {
                url: self._options.forceSearchUrl,
                param: self._options.citySearchParams,
                onSearch: function (data, searchVal) {
                    self._refreshList(data, searchVal);
                },
                noinput: function () {
                    self._createList(0);
                    return false;
                }
            }).element().appendTo(p.list._header);
        },
        _addHeader: function () {
            this._header = new Mojo.ui.Label(undefined, {
                text: this._options.headerContent,
                classes: ['member-count'],
            });
            if (this._options.showHeader) {
                this._header.element().appendTo(this._panels[0].list._header);
            }
            this._options.addHeaderCallback(this._header);
        },
        _refreshList: function (response, searchVal) {
            var forcelist = this._panels[0].list;
            forcelist._scroll.scrollTo(0, 0);
            forcelist._list.find('.mojo-ui-listpanel-child').remove();
            forcelist._options.alwaysMore = false;
            forcelist._children = [];
            forcelist._options.emptyLabel = Mojo.utils.locale('force', 'force_city_search_noresult');
            if (response.data && response.data.list) {
                forcelist._options.type = 'search';
                forcelist._more.element().html(Mojo.utils.locale('common', 'more')).hide();
                if (response.data.list.length >= forcelist._options.pageSize) {
                    forcelist._options.showMore = true;
                    forcelist._options.forceSearchByLevelParams = {
                        'search': searchVal,
                        'excludes': Mojo.page.Force.getController().getForceProfile().id
                    };
                    forcelist.appendData(response.data.list, true);
                } else {
                    forcelist._options.alwaysMore = false;
                    forcelist._options.showMore = false;
                    forcelist.appendData(response.data.list, false);
                }
            } else {
                forcelist.appendData(response.data, false);
                setTimeout(function () {
                    forcelist.resize();
                }, 200);
            }
        },
        _addButton: function () {
            var self = this;
            if (self._options.showOrderBtn == true) {
                this.orderBtn = new Mojo.ui.Button('order-btn', {
                    classes: ['order_btn'],
                    text: Mojo.utils.locale('force', 'order_force'),
                    click: function () {
                        var forceFilterDialog = new Mojo.com.ForceFilterDialog({
                            typeId: self._params.type_id,
                            type: self._params.type,
                            orderId: self._params.order_id,
                            filterUrl: self._options.filterUrl,
                            filterDataSource: self._options.filterDataSource,
                            callback: function (tid, oid) {
                                if (self._params.type_id == tid && self._params.order_id == oid)
                                    return;
                                self._params.type_id = tid;
                                self._params.order_id = oid;
                                self._panels[0].list._options.params = self._params;
                                $.each(self._panels[0].list.children(), function (i, child) {
                                    child.element().remove();
                                });
                                self._panels[0].list._hasLoaded = false;
                                self._panels[0].list._children = [];
                                self._panels[0].list._load(self._params);
                            }
                        });
                        forceFilterDialog.open();
                    },
                });
                this.orderBtn.element().appendTo(this.element());
            }
            this._backBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'back'),
                click: function () {
                    if (self._options.backCallback instanceof Function) {
                        self._options.backCallback(self);
                    }
                },
                classes: ['force-back-btn'],
            });
            this._backBtn.element().appendTo(this.element());
        },
        _getDefaultOptions: function () {
            return {
                showSearch: true,
                showHeader: false,
                tabText: Mojo.utils.locale('force', 'siege'),
                backCallback: $.noop,
                cityListOptions: undefined,
            };
        },
        localeCat: function () {
            return 'force';
        },
    });
})(window, jQuery);;;
(function (w, $) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.GoodsBatchBuyDlg = w.Mojo.ui.Dialog.extend({
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-goodsbatchbuydlg');
            this._disableTip = undefined;
            this._paragraph = $("<div class='paragraph'></div>").appendTo(this._content);
            this._addContent();
            this._addButtons();
            this._checkInput();
        },
        close: function () {
            this._super();
            if (this._options.onClose instanceof Function) {
                this._options.onClose();
            }
            w.scrollTo(0, 0);
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                buyLimit: 10
            });
        },
        _addContent: function () {
            var self = this;
            $('<div id="batchbuydlgtip" class="batch-buy-dlg-tip"><div>').appendTo(this._paragraph).html(Mojo.utils.locale('mall', 'batch_buy_dlg_tip'));
            if (self._options.vm != undefined && self._options.price != undefined) {
                var currentVm = $('<div id="lastgrain" class="lastgrain"><div>').appendTo(this._paragraph).html(Mojo.utils.locale('mall', 'current_vm'));
                this._currentVmValue = new Mojo.ui.Label(undefined, {
                    classes: self._options.type == 'rm' ? ['rm'] : ['vm'],
                    text: parseInt(self._options.vm)
                });
                this._currentVmValue.element().appendTo(currentVm);
                var costVm = $('<div id="lastration" class="lastration"><div>').appendTo(this._paragraph).html(Mojo.utils.locale('mall', 'cost_vm'));
                this._costVmValue = new Mojo.ui.Label(undefined, {
                    classes: self._options.type == 'rm' ? ['rm'] : ['vm'],
                    text: self._options.price
                });
                this._costVmValue.element().appendTo(costVm);
            }
            if (self._options.rm != undefined && self._options.price != undefined) {
                var currentVm = $('<div id="lastgrain" class="lastgrain"><div>').appendTo(this._paragraph).html(Mojo.utils.locale('mall', 'current_rm'));
                this._currentVmValue = new Mojo.ui.Label(undefined, {
                    classes: ['rm'],
                    text: parseInt(self._options.rm)
                });
                this._currentVmValue.element().appendTo(currentVm);
                var costVm = $('<div id="lastration" class="lastration"><div>').appendTo(this._paragraph).html(Mojo.utils.locale('mall', 'cost_vm'));
                this._costVmValue = new Mojo.ui.Label(undefined, {
                    classes: ['rm'],
                    text: self._options.price
                });
                this._costVmValue.element().appendTo(costVm);
            }
            var batchBuyNumTip = $('<div id="batchbuynumtip" class="batch-buy-num-tip"><div>').appendTo(this._paragraph).html(Mojo.utils.locale('mall', 'batch_buy_num_tip'));
            this._addInput('goods_num_input');
            this._paragraph.find('.shareitem .input input').click(function () {
                this.selectionStart = 0;
                this.selectionEnd = this.value.length;
            });
            this._paragraph.find('.shareitem .input input').bind("input change keyup paste", function () {
                self._checkInput();
            });
        },
        _reset: function () {
            var self = this;
            self._invalid = false;
            self._okBtn.disable(false);
        },
        _checkInput: function () {
            var self = this;
            self._reset();
            var num = 0;
            self._paragraph.find('.shareitem .input input').each(function (i, e) {
                var v = $(e).val().trim();
                if (self._isValid(v)) {
                    num = v == "" ? 0 : parseInt($(e).val(), 10);
                } else {
                    self._invalid = true;
                    return false;
                }
            });
            if (self._invalid) {
                self._okBtn.disable(true);
                self._disableTip = Mojo.utils.locale('mall', 'batch_buy_dlg_tip', {
                    '__default__': '请填写正确的购买数量'
                });
            } else if (num == 0) {
                self._okBtn.disable(true);
                self._disableTip = Mojo.utils.locale('mall', 'batch_buy_dlg_tip', {
                    '__default__': '请填写正确的购买数量'
                });
            } else {
                var cost = parseInt(self._options.price) * num;
                if (self._options.vm != undefined && parseInt(self._options.vm) < cost) {
                    self._disableTip = Mojo.utils.locale('mall', 'need_vm', {
                        '__default__': '主公～您的银币不够啦，攒点钱再来吧！'
                    });
                    num = (parseInt(self._options.vm) - ((parseInt(self._options.vm)) % (self._options.price))) / (self._options.price);
                }
                if (self._options.rm != undefined && parseInt(self._options.rm) < cost) {
                    self._disableTip = Mojo.utils.locale('mall', 'rm_not_enough', {
                        '__default__': '主公～您的元宝不够啦，去充值吧！'
                    });
                    num = (parseInt(self._options.rm) - ((parseInt(self._options.rm)) % (self._options.price))) / (self._options.price);
                }
                if (num > self._options.buyLimit) {
                    num = self._options.buyLimit;
                }
                self._paragraph.find('.shareitem .input input').val(num);
                cost = self._options.price * num;
                self._costVmValue.text(cost);
                if (num < 1) {
                    self._okBtn.disable(true);
                }
            }
        },
        _isValid: function (v) {
            var regex = /^\d{0,6}$/;
            return regex.test(v);
        },
        _addInput: function (label) {
            var self = this;
            var element = $("<div class='shareitem'></div>");
            var inputarea = $("<div class='input'></div>");
            var _input = $("<input type='text' maxlength='6' value='1'/>");
            _input.attr('name', label);
            _input.appendTo(inputarea);
            $('<span>(1~10)</span>').appendTo(inputarea);
            inputarea.appendTo(element);
            element.appendTo(this._paragraph);
        },
        _addButtons: function () {
            var self = this;
            this._okBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('mall', 'sure_buy'),
                special: "button-big-red",
                click: function () {
                    self.close();
                    var count = self._paragraph.find('input[name="goods_num_input"]').val();
                    if (self._options.onBuy instanceof Function) {
                        self._options.onBuy(count);
                    }
                },
                disableClick: function () {
                    if (self._disableTip) {
                        Mojo.app.toast.show(self._disableTip);
                    }
                }
            });
            this._okBtn.element().appendTo(this._footer);
            new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'think_again'),
                special: 'button-big-blue',
                click: function () {
                    self.close();
                }
            }).element().appendTo(this._footer);
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.MsgInputDialog = w.Mojo.ui.Dialog.extend({
        init: function (options) {
            this._super(undefined, options);
            this.element().addClass('mojo-com-msginputdlg');
            this._paragraph = $("<div class='paragraph'></div>").appendTo(this._content);
            this._addContent();
            this._addButtons();
        },
        _addContent: function () {
            var self = this;
            if (this._options.warnText) {
                this._warn = $("<div class='warn-tip'></div>").appendTo(this._paragraph).html(this._options.warnText);
            }
            this._count = $("<div class='words-tip'></div>").appendTo(this._paragraph);
            this._count.html(this._options.maxlen);
            this._slogan = $("<div class='slogan'></div>").appendTo(this._paragraph);
            this._sloganInput = $("<textarea id='sloganInput' maxlength='" + this._options.maxlen + "'></textarea>").val(self._options.defaultText).appendTo(this._slogan);
            this._sloganInput.focus(function () {
                if ($(this).val() == self._options.defaultText) {
                    $(this).val('');
                }
            });
            this._sloganInput.bind("input propertychange", function () {
                var maxLength = $(this).attr('maxlength');
                var v = $(this).val().length;
                if (v <= maxLength) {
                    self._count.html(maxLength - v);
                    return true;
                } else {
                    $(this).val($(this).val().substring(0, maxLength));
                    return false;
                }
            }).click(function () {
                if (self._sloganInput.val() == self._options.defaultText) {
                    self._sloganInput.val("");
                } else {
                    this.selectionStart = 0;
                    this.selectionEnd = this.value.length;
                }
            });
        },
        _addButtons: function () {
            var self = this;
            this.applyBtn = new Mojo.ui.Button(undefined, {
                special: 'button-big-red',
                text: self._options.leftBtnText,
                click: function () {
                    var value = self._slogan.find('#sloganInput').val();
                    if (value == self._options.defaultText) {
                        value = "";
                    }
                    self._options.leftBtnClick(value, self);
                },
            }).element().appendTo(this._footer);
            this.closeBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('ui', 'Close'),
                click: function () {
                    self.close();
                },
            }).element().appendTo(this._footer);
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('force', 'join_apply_force'),
                defaultText: Mojo.utils.locale('force', 'join_slogen'),
                warnText: undefined,
                maxlen: 100,
                leftBtnText: Mojo.utils.locale('force', 'send_apply'),
                leftBtnClick: $.noop
            });
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceInviteElement = w.Mojo.Object.extend({
        clsname: function () {
            return "com.ForceInviteElement";
        },
        init: function (data, options) {
            this._data = data;
            this._super(options.id, options);
            this.element().addClass('mojo-com-forceinviteelement').addClass('box-inner');
            this.element().append('<div class="attributes"></div><div class="buttons"></div>');
            this._addAttributes();
            this._addButtons();
        },
        _addAttributes: function () {
            var attack, defence, name, login_time, time_unit;
            if (parseInt(this._data.attack_min) > parseInt(this._data.attack_max)) {
                attack = this._data.attack_min;
            } else {
                attack = this._data.attack_min + '-' + this._data.attack_max;
            }
            if (parseInt(this._data.defence_min) > parseInt(this._data.defence_max)) {
                defence = this._data.defence_min;
            } else {
                defence = this._data.defence_min + '-' + this._data.defence_max;
            }
            var title_info = this._data.title_info;
            name = $('<div class="name"></div>').append(new Mojo.com.PlayerName(title_info ? title_info : {
                player_name: this._data.name
            }).element());
            this.element().find('.attributes').append('<div class="level">' + Mojo.utils.locale('common', 'lv') + this._data.level + '</div>').append(name).append('<hr>');
            if (this._data.id != undefined && this._data.id != '') {
                this.element().find('.attributes').append('<div class="player-id">' + Mojo.utils.locale('common', 'id') + this._data.id + '</div>');
            }
            if (this._data.last_login_time != undefined) {
                this.element().find('.attributes').append('<div class="login-time">' + Mojo.utils.locale('common', 'login_time') + Mojo.utils.getFromNowTime(this._data.last_login_time) + '</div>');
            }
            this.element().find('.attributes').append('<div class="attack">' + Mojo.utils.locale('common', 'new_attack') + attack + '</div>');
            this.element().find('.attributes').append('<div class="defence">' + Mojo.utils.locale('common', 'new_defence') + '?' + '</div>');
        },
        _addButtons: function () {
            var self = this;
            if (this._options.button1 != undefined) {
                this._btn1 = new Mojo.ui.Button(undefined, {
                    classes: ['go-button'],
                    text: this._options.button1,
                    click: function () {
                        self._options.clickButton1(self._data, self);
                    },
                    special: 'go-communicate-btn'
                });
                this.element().find('.buttons').append(this._btn1.element());
            }
        },
        _getDefaultOptions: function () {
            return {
                isFriend: true,
                button1: undefined,
                classButton1: '',
                clickButton1: $.noop,
                id: undefined,
            };
        },
    });
})(window, jQuery);;
(function (w, $, undefined) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.WarningNotEnoughDialog = w.Mojo.ui.Dialog.extend({
        clsname: function () {
            return "com.WarningNotEnoughDialog";
        },
        init: function (id, data, options) {
            this._data = data;
            this._super(id, options);
            this.element().addClass("mojo-com-warningnotnnoughdialog");
            this.leftButton = undefined;
            this.rightButton = undefined;
            this._notEnough = false;
            this._addContent(this._data);
            this._addButtons();
        },
        _getDefaultOptions: function () {
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('mall', 'buy_warning_title2'),
                leftBtnText: Mojo.utils.locale('common', 'ok'),
                leftBtnClick: undefined,
                rightBtnText: Mojo.utils.locale('common', 'think_again'),
                rightBtnClick: undefined,
                deviceaware: true
            });
        },
        _addContent: function (data) {
            var self = this;
            var has = Mojo.app.otherPayProps.count;
            var discount = (data.discount && data.discount != '' && data.discount != 100) ? parseInt(data.discount) / 100 : 1;
            var need = (data.other_pay_count && data.other_pay_count != '') ? parseInt(data.other_pay_count) * discount : 0;
            if (this._options.shilianBtnClick == true) {
                need = (data.ext_other_pay_count && data.ext_other_pay_count != '') ? data.ext_other_pay_count : 0;
            }
            if (has != undefined && need != undefined && has < need && self._options.showWarning) {
                this._notEnough = true;
                this._options.title = Mojo.utils.locale('mall', 'find_token_not_enough');
                this.element().find('.title').html(this._options.title);
                var price_num = new Mojo.ui.Label(undefined, {
                    text: (need - has) * 10,
                    classes: ['rm find-price'],
                });
                var price = $('<div class="find-price-title"></div>').html(Mojo.utils.locale('common', 'price_title')).append(price_num.element());
                var paragraph = $('<div class="paragraph">' + Mojo.utils.locale('mall', 'find_token_not_enough_content', {
                    has: has,
                    need: need - has
                }) + '</div>').append(price);
                var content = $('<div class="find-sth"></div>').append(paragraph).appendTo(this._content);
            } else {
                var content = $('<div class="tip"></div>').html(Mojo.utils.locale('mall', 'buy_warning_content2')).appendTo(this._content);
            }
        },
        _addButtons: function () {
            var self = this;
            self.leftButton = new Mojo.ui.Button(undefined, {
                text: self._options.leftBtnText,
                disabled: self._options.leftBtnDisabled,
                special: "button-big-red",
                click: function () {
                    self.close();
                    if (self._options.leftBtnClick instanceof Function) {
                        self._options.leftBtnClick(self, self._notEnough);
                    }
                }
            });
            self.leftButton.element().appendTo(self._footer);
            self.rightButton = new Mojo.ui.Button(undefined, {
                text: self._options.rightBtnText,
                special: 'button-big-blue',
                disabled: self._options.rightBtnDisabled,
                click: function () {
                    self.close();
                    if (self._options.rightBtnClick instanceof Function) {
                        self._options.rightBtnClick(self);
                    }
                }
            });
            self.rightButton.element().appendTo(self._footer);
        }
    });
})(window, jQuery);;;
(function (w, $) {
    w.Mojo = w.Mojo || {};
    w.Mojo.page = w.Mojo.page || {};
    w.Mojo.com.EntityFind = w.Mojo.Object.extend({
        clsname: function () {
            return "com.EntityFind";
        },
        init: function (id, options) {
            this._super(id, options);
            this.element().addClass('search-area');
            this._search = $("<div class='search-input'></div>");
            this._search.appendTo(this.element());
            this._addContent();
            this._addButton();
        },
        _addContent: function () {
            var self = this;
            this._input = $('<input  type="text" maxlength="10" />').val(this._options.initValue).appendTo(this._search);
            this._input.click(function () {
                this.selectionStart = 0;
                this.selectionEnd = this.value.length;
            });
            this._input.bind("change paste keyup input", function () {
                self._options.updateNameParam(self._input.val());
            });
        },
        _addButton: function () {
            var self = this;
            new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'search'),
                special: 'force-search-btn',
                click: function () {
                    self._doSearch();
                }
            }).element().appendTo(self.element());
        },
        _doSearch: function () {
            var self = this;
            if (Mojo.utils.isNone(this._input.val())) {
                if (self._options.noinput() == false) {
                    return;
                }
            }
            self._options.onSearch(this._input.val());
        },
        inputVal: function (val) {
            if (undefined === val) {
                return this._input.val();
            }
            this._input.val(val);
            return val;
        },
        _getDefaultOptions: function () {
            return {
                onSearch: $.noop,
                param: {},
                noinput: function () {
                    return false;
                }
            };
        },
    });
})(window, jQuery);;;
(function (w, $) {
    w.Mojo = w.Mojo || {};
    w.Mojo.com = w.Mojo.com || {};
    w.Mojo.com.ForceDefinedGrainListView = w.Mojo.Object.extend({
        init: function (data, options) {
            this._super('com-page-forcedefinedgrain', options);
            this._data = data;
            this._forceMemberListData = null;
            this._tempCustomGrainData = jQuery.extend({}, this._options.customGrainData);
            this.element().addClass('com-page-forcedefinedgrain mojo-com-forcemember');
            this._addBroadcast();
            this._addTab();
            this._addBtns();
            this._addList();
        },
        _addListHead: function () {
            this.dang_memberCount = $('<div class="page-tips"></div>').appendTo(this.forceMemberList._header);
        },
        _updataListHead: function () {
            var count = this._getCustomCount4Level(this._options.customGrainLevel);
            this.dang_memberCount.html(Mojo.utils.locale('force', 'dang_memberCount', {
                level: Mojo.utils.locale('force', 'level' + this._options.customGrainLevel),
                count: count
            }));
        },
        _addBroadcast: function () {
            var broadcast = new Mojo.com.Broadcast();
            this.element().append(broadcast.element());
        },
        _addTab: function () {
            this._tabs = new Mojo.ui.Tabs();
            this.element().append(this._tabs.element());
            this._tabs.addTab(Mojo.utils.locale('force', 'g_selectMember'));
            this._ForceMemberPanel = this._tabs.element().find('.panel').addClass('box-outter');
        },
        _addBtns: function () {
            var self = this;
            this._backBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('common', 'back'),
                click: function () {
                    self._backBtnClick();
                },
                classes: ['back-btn', 'back-btn1']
            });
            this._backBtn.element().appendTo(this.element());
            this._sortBtn = new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('force', 'order_force'),
                click: function () {
                    self._forceFilterDlg();
                },
                classes: ['back-btn', 'back-btn2']
            });
            this._sortBtn.element().appendTo(this.element());
        },
        _getShengyuGrain: function () {
            var customGrainData = this._options.customGrainData;
            var allGrain = customGrainData.allGrain;
            for (var i = 1; i <= 5; i++) {
                var g = customGrainData['grain_' + i];
                var num = this._getCustomCount4Level(i);
                allGrain -= g * num;
            }
            customGrainData.shengyuGrain = allGrain;
            return customGrainData.shengyuGrain;
        },
        _getCustomCount4Level: function (l) {
            var customGrainData = this._tempCustomGrainData;
            var pidsLevel = customGrainData['pids_' + l];
            var pidsLevelArr = pidsLevel ? pidsLevel.split(',') : [];
            return pidsLevelArr.length;
        },
        _backBtnClick: function () {
            var self = this;
            if (this._backBtn.element().text() == Mojo.utils.locale('common', 'back')) {
                self._mergeTempCustomGrainData();
                self._getShengyuGrain();
                self._options.back(self._options.customGrainData, self._forceMemberListData);
            } else {
                var customGrainData = self._options.customGrainData;
                var tempCustomGrainData = self._tempCustomGrainData;
                var customGrainLevel = self._options.customGrainLevel;
                var paragraph = $("<div class='paragraph'></div>");
                var title = $('<div class="head"></div>').appendTo(paragraph);
                var member = $('<span class="member"></span>').appendTo(title).html(Mojo.utils.locale('force', 'g_changedItem', {
                    num: tempCustomGrainData.selectedMember,
                    count: tempCustomGrainData.memberCount
                }));
                var grain = $('<span class="grain"></span>').appendTo(title);
                var shengyuGrain = self._getShengyuGrain();
                if (shengyuGrain < 0) {
                    grain.html(Mojo.utils.locale('force', 'g_remainderGrain2', {
                        grainNum: shengyuGrain
                    }));
                } else {
                    grain.html(Mojo.utils.locale('force', 'g_remainderGrain', {
                        grainNum: shengyuGrain
                    }));
                }
                var p_grain = $('<div class="p_grain"></div>').appendTo(paragraph);
                $('<span class="level-1"></span>').appendTo(p_grain).html(Mojo.utils.locale('force', 'g_xLevel', {
                    level: customGrainLevel
                }));
                var self = this;
                this._input = $('<input  type="text" maxlength="5" value=0>').appendTo(p_grain);
                this._input.click(function () {
                    this.selectionStart = 0;
                    this.selectionEnd = this.value.length;
                });
                this._input.bind("input", function () {
                    var g = Number('' + self._input.val());
                    if (!isNaN(g)) {
                        self._input.val(g);
                        var num = self._getCustomCount4Level(customGrainLevel);
                        var v = tempCustomGrainData.shengyuGrain - g * num;
                        if (v < 0) {
                            grain.html(Mojo.utils.locale('force', 'g_remainderGrain2', {
                                grainNum: v
                            }));
                        } else {
                            grain.html(Mojo.utils.locale('force', 'g_remainderGrain', {
                                grainNum: v
                            }));
                        }
                    }
                });
                var leng = 0;
                if (tempCustomGrainData['pids_' + customGrainLevel]) {
                    var ids = tempCustomGrainData['pids_' + customGrainLevel].split(',');
                    leng = ids.length;
                }
                $('<span class="level-2"></span>').appendTo(p_grain).html(Mojo.utils.locale('force', 'g_xNum', {
                    num: leng
                }));
                var dlg = new Mojo.com.CommonDialog(undefined, {
                    title: Mojo.utils.locale('force', 'g_setNumber'),
                    classes: ['set-custom-grain-dialog'],
                    content: paragraph,
                    leftBtnText: Mojo.utils.locale('common', 'ok'),
                    leftBtnClick: function () {
                        var g = Number(self._input.val());
                        if (isNaN(g) || g < 0) {
                            Mojo.app.toast.show('您的输入有误！');
                            return;
                        }
                        self._mergeTempCustomGrainData();
                        customGrainData['grain_' + customGrainLevel] = g;
                        self._getShengyuGrain();
                        self._options.back(customGrainData, self._forceMemberListData);
                        dlg.close();
                    },
                    rightBtnText: Mojo.utils.locale('common', 'back'),
                    rightBtnClick: function () {
                        dlg.close();
                    }
                });
                dlg.open();
            }
        },
        _forceFilterDlg: function () {
            var paragraph = $("<div class='paragraph'></div>");
            var typeFilter = $('<div class="typeFilter"><div class="entityType">' + Mojo.utils.locale('force', 'order_conditions') + '</div></div>').appendTo(paragraph);
            var filterList = $('<div class="filter-list"></div>').appendTo(typeFilter);
            var typeFilterScroll = new Mojo.ui.Scroll(undefined, filterList, {
                direction: 2
            });
            typeFilterScroll.element().appendTo(typeFilter);
            this._typeList = this._getFilterList(1);
            this._typeList.element().appendTo(filterList);
            var orderFilter = $('<div class="orderFilter"><div class="entityOrder">' + Mojo.utils.locale('force', 'order_conditions') + '</div></div>').appendTo(paragraph);
            var orderList = $('<div class="order-list"></div>').appendTo(orderFilter);
            this._orderList = this._getFilterList(2);
            this._orderList.element().appendTo(orderList);
            var self = this;
            var filter = this._getFilterData();
            var ele = this._otherCondition = new Mojo.ui.Button(undefined, {
                text: '',
                classes: ['combo', 'otherCondition'],
                click: function () {
                    if (ele.element().hasClass('combo-selected-class')) {
                        ele.element().removeClass('combo-selected-class');
                        self._otherConditionVal = 0;
                    } else {
                        ele.element().addClass('combo-selected-class');
                        self._otherConditionVal = 1;
                    }
                }
            });
            if (filter) {
                var otherVal = filter.split(',')[2];
                if (otherVal == 1) {
                    ele.element().addClass('combo-selected-class');
                    self._otherConditionVal = 1;
                }
            }
            var otherCondition = $('<div class="condition"></div>').appendTo(paragraph);
            this._otherCondition.element().appendTo(otherCondition);
            $('<span class="condition-txt"></span>').html(Mojo.utils.locale('force', 'g_condition_txt')).appendTo(otherCondition);
            $('<div class="g_benqigongxian"></div>').html(Mojo.utils.locale('force', 'g_benqigongxian')).appendTo(paragraph);
            $('<div class="g_gongxianyuanbao"></div>').html(Mojo.utils.locale('force', 'g_gongxianyuanbao')).appendTo(paragraph);
            var self = this;
            var dlg = new Mojo.com.CommonDialog(undefined, {
                title: Mojo.utils.locale('force', 'order_conditions'),
                classes: ['force_defined_grain_dlg', 'tip-dialog', 'mojo-com-force-filter'],
                content: paragraph,
                leftBtnText: Mojo.utils.locale('common', 'ok'),
                leftBtnClick: function () {
                    dlg.close();
                    self._updateFilterData();
                    self._resetList();
                }
            });
            dlg.open();
        },
        _getFilterList: function (type) {
            var d = [];
            var selected = this._getFilterData() || null;
            if (type == 1) {
                if (selected) {
                    selected = selected.split(',')[0];
                }
                d = [{
                    selected: selected == 1,
                    value: 1,
                    label: Mojo.utils.locale('force', 'g_filtertype1')
                }, {
                    selected: selected == 4,
                    value: 4,
                    label: Mojo.utils.locale('force', 'g_filtertype4')
                }, {
                    selected: selected == 9,
                    value: 9,
                    label: Mojo.utils.locale('force', 'g_filtertype9')
                }, {
                    selected: selected == 10,
                    value: 10,
                    label: Mojo.utils.locale('force', 'g_filtertype10')
                }];
            } else {
                if (selected) {
                    selected = selected.split(',')[1];
                }
                d = [{
                    selected: selected == 1,
                    value: 1,
                    label: Mojo.utils.locale('force', 'g_order1')
                }, {
                    selected: selected == 2,
                    value: 2,
                    label: Mojo.utils.locale('force', 'g_order2')
                }];
            }
            var radioGroup = new Mojo.ui.RadioGroup(undefined, {
                direction: 'vertical',
                data: d
            });
            radioGroup.element().find('.mojo-ui-radio').addClass('box-inner mojo-ui-listpanel-child');
            return radioGroup;
        },
        _updateFilterData: function () {
            var type = this._typeList.value() || '1';
            var order = this._orderList.value() || '1';
            var otherCondition = this._otherConditionVal == undefined ? 1 : this._otherConditionVal;
            Mojo.app.saveStorage('customGrainFilter', type + ',' + order + ',' + otherCondition);
        },
        _getFilterData: function () {
            return Mojo.app.getStorage('customGrainFilter') || '1,1,1';
        },
        _addList: function () {
            var self = this;
            self._createMemberList();
        },
        _createMemberList: function () {
            var filterData = this._getFilterData().split(',');
            var self = this;
            this.forceMemberList = new Mojo.ui.ListPanel('force-membergrain-list', {
                scrollable: true,
                showMore: true,
                alwaysMore: true,
                pageSize: 50,
                emptyLabel: Mojo.utils.locale('force', 'not_this_member'),
                moreLabel: Mojo.utils.locale('force', 'g_moreLabel'),
                moreClick: function () {
                    self._selectAll();
                },
                loadFunc: function (start, count, params) {
                    Mojo.utils.ajaxUtil({
                        url: '/force/playerList',
                        params: {
                            start: start,
                            count: self._options.customGrainData.memberCount,
                            type_id: filterData[0],
                            order_id: filterData[1],
                            search: self._options.entityName || ''
                        },
                        callback: function (result) {
                            self._addListHead();
                            self._addSearch();
                            self._forceMemberListData = result.data;
                            self.forceMemberList.appendData(result.data.list, true);
                            self._updataListHead();
                        }
                    });
                },
                drawFunc: function (d) {
                    var otherCondition = self._getFilterData().split(',')[2];
                    if (otherCondition == 0) {
                        var l = self._options.customGrainLevel;
                        var _t = self._isSelected(d);
                        if ((_t && l == _t.level) || !_t) {
                            return self._getListElement(d);
                        }
                    } else {
                        return self._getListElement(d);
                    }
                }
            });
            this._ForceMemberPanel.append(this.forceMemberList.element());
        },
        _getListElement: function (d) {
            var selected = this._isSelected(d);
            var obj = new Mojo.Object(undefined, {
                classes: ['mojo-com-forceMemberListElement', 'box-inner mojo-com-forcememberelement']
            });
            var ele = obj.element();
            if (parseInt(d.is_self) == 1) {
                ele.addClass('self');
            }
            $('<div class="force-member-level">' + Mojo.utils.locale('common', 'lv') + d.level + '</div>').appendTo(ele);
            new Mojo.com.PlayerName(d.title_info ? d.title_info : {
                player_name: d.name
            }).element().appendTo($('<div class="force-member-name"></div>').appendTo(ele));
            $('<hr>').appendTo(ele);
            var official = '';
            switch (parseInt(d.title_info.position_id)) {
            case 1:
                official = Mojo.utils.locale('force', 'info_owner');
                break;
            case 2:
                official = Mojo.utils.locale('force', 'info_vice_owner');
                break;
            case 3:
                official = Mojo.utils.locale('force', 'official3');
                break;
            case 4:
                official = Mojo.utils.locale('force', 'official4');
                break;
            case 5:
                official = Mojo.utils.locale('force', 'official5');
                break;
            default:
                official = undefined;
                break;
            }
            if (official != undefined) {
                $('<div class="force-member-official">' + Mojo.utils.locale('force', 'official') + official + '</div>').appendTo(ele);
            }
            if (selected && selected.level != this._options.customGrainLevel) {
                ele.append('<div class="force-member-login">' + Mojo.utils.locale('force', 'g_selectedTxt', {
                    level: Mojo.utils.locale('force', 'level' + selected.level),
                    grain: selected.grain
                }) + '</div>');
            }
            ele.append('<div class="force-member-offer-with-official">' + Mojo.utils.locale('force', 'g_filtertype33') + d.period_contribute + '</div>');
            ele.append('<div class="force-member-offer-with-official">' + Mojo.utils.locale('force', 'g_filtertype55') + d.period_contribute_rm + '</div>');
            var self = this;
            var btn = new Mojo.ui.Button(undefined, {
                text: '',
                classes: ['choose-button', 'combo', 'entity-id' + d.id],
                click: function () {
                    self._chooseClick(btn.element(), d);
                }
            });
            btn.element().appendTo(obj.element());
            btn.element().attr('entity-id', d.id);
            if (selected && selected.level == this._options.customGrainLevel) {
                self._updataComboStatus(btn.element());
                this._options.customGrainData['grain_' + selected.level] = 0;
                this._getShengyuGrain();
                this._tempCustomGrainData = jQuery.extend({}, this._options.customGrainData);
            }
            return obj;
        },
        _chooseClick: function (ele, d) {
            if (ele.hasClass('combo-selected-class')) {
                ele.removeClass('combo-selected-class');
                ele.parent().removeClass('selected-class');
                this._updataCustomGrainDataIds(ele, 2, d);
            } else {
                ele.addClass('combo-selected-class');
                ele.parent().addClass('selected-class');
                this._updataCustomGrainDataIds(ele, 1, d);
            }
            this._updataBackBtnStatus();
            this._updataListHead();
        },
        _updataComboStatus: function (ele) {
            if (ele.hasClass('combo-selected-class')) {
                ele.removeClass('combo-selected-class');
                ele.parent().removeClass('selected-class');
            } else {
                ele.addClass('combo-selected-class');
                ele.parent().addClass('selected-class');
            }
            this._updataBackBtnStatus();
        },
        _updataBackBtnStatus: function () {
            var self = this;
            setTimeout(function () {
                var selected = self.forceMemberList.element().find('.selected-class');
                if (selected.length > 0) {
                    self._backBtn.text(Mojo.utils.locale('common', 'ok'));
                } else {
                    self._backBtn.text(Mojo.utils.locale('common', 'back'));
                }
            });
        },
        _selectAll: function () {
            var list = this._forceMemberListData.list;
            var selfLevel = this._options.customGrainLevel;
            for (var i = 0; i < list.length; i++) {
                var item = list[i];
                var id = item.id;
                var selected = this._isSelectedOther(item, selfLevel);
                if (selected) {
                    continue;
                }
                var selectedTemp = this._isSelectedTemp(item, selfLevel);
                if (!selectedTemp) {
                    var cls = '.entity-id' + id;
                    var btnEle = this.forceMemberList.element().find(cls);
                    this._chooseClick(btnEle, item);
                }
            }
        },
        _isSelected: function (d) {
            var id = d.id;
            var customGrainData = this._options.customGrainData;
            for (var i = 1; i <= 5; i++) {
                var pids = customGrainData['pids_' + i];
                if (pids) {
                    if (pids.indexOf(id) > -1) {
                        return {
                            level: i,
                            grain: customGrainData['grain_' + i]
                        }
                    }
                }
            }
        },
        _isSelectedOther: function (d, level) {
            var id = d.id;
            var customGrainData = this._options.customGrainData;
            if (!customGrainData) {
                return;
            }
            for (var i = 1; i <= 5; i++) {
                if (level && level == i) {
                    continue;
                }
                var pids = customGrainData['pids_' + i];
                if (pids) {
                    if (pids.indexOf(id) > -1) {
                        return {
                            level: i,
                            grain: customGrainData['grain_' + i]
                        }
                    }
                }
            }
        },
        _isSelectedTemp: function (d, level) {
            var id = d.id;
            var customGrainData = this._tempCustomGrainData;
            if (!customGrainData) {
                return;
            }
            var pids = customGrainData['pids_' + level];
            if (pids) {
                if (pids.indexOf(id) > -1) {
                    return {
                        level: level,
                        grain: customGrainData['grain_' + level]
                    }
                }
            }
        },
        _getArrStr2Arr: function (arrStr) {
            return arrStr ? arrStr.split(',') : [];
        },
        _updataCustomGrainDataIds: function (btnEle, flag, d) {
            var id = d.id;
            var customGrainLevel = this._options.customGrainLevel;
            var otherSelected = this._isSelectedOther(d, customGrainLevel);
            if (otherSelected) {
                var temp = this._tempCustomGrainData;
                var otherGrain = otherSelected.grain;
                var otherLevel = otherSelected.level;
                var memberLogin = btnEle.parent().find('.force-member-login');
                Mojo.app.toast.show('成员档次已变更');
                if (flag == 1) {
                    temp['shengyuGrain'] -= otherGrain;
                    memberLogin.hide();
                    this._removeTempCustomGrainData(id, otherLevel);
                    this._addTempCustomGrainData(id, customGrainLevel);
                } else {
                    temp['shengyuGrain'] += otherGrain;
                    memberLogin.show();
                    this._removeTempCustomGrainData(id, customGrainLevel);
                    this._addTempCustomGrainData(id, otherSelected.level);
                }
            } else {
                if (flag == 1) {
                    this._addTempCustomGrainData(id, customGrainLevel);
                } else {
                    this._removeTempCustomGrainData(id, customGrainLevel);
                }
            }
        },
        _addTempCustomGrainData: function (id, level) {
            var temp = this._tempCustomGrainData;
            var pidsArr_l = this._getArrStr2Arr(temp['pids_' + level]);
            pidsArr_l.push(id);
            temp['pids_' + level] = pidsArr_l.join(',');
            var pidsArr = this._getArrStr2Arr(temp['pids']);
            if ($.inArray(id, pidsArr) < 0) {
                pidsArr.push(id);
                temp['pids'] = pidsArr.join(',');
            }
            temp['selectedMember'] = pidsArr.length;
        },
        _removeTempCustomGrainData: function (id, level) {
            var temp = this._tempCustomGrainData;
            var pidsArr_l = this._getArrStr2Arr(temp['pids_' + level]);
            var idx = $.inArray(id, pidsArr_l);
            if (idx > -1) {
                pidsArr_l.splice(idx, 1);
                temp['pids_' + level] = pidsArr_l.join(',');
            }
            var pidsArr = this._getArrStr2Arr(temp['pids']);
            var idx2 = $.inArray(id, pidsArr);
            if (idx2 > -1) {
                pidsArr.splice(idx2, 1);
                temp['pids'] = pidsArr.join(',');
            }
            temp['selectedMember'] = pidsArr.length;
        },
        _mergeTempCustomGrainData: function () {
            var temp = this._tempCustomGrainData;
            var customGrainData = this._options.customGrainData;
            for (var i = 1; i <= 5; i++) {
                customGrainData['pids_' + i] = temp['pids_' + i];
            }
            customGrainData['pids'] = temp['pids'];
            customGrainData['selectedMember'] = temp['selectedMember'];
        },
        _resetList: function () {
            if (this.forceMemberList) {
                this.forceMemberList.element().remove();
            }
            this._mergeTempCustomGrainData();
            this._createMemberList();
        },
        _addSearch: function () {
            var self = this;
            var search = new Mojo.com.EntityFind(undefined, {
                initValue: self._options.entityName == undefined ? '' : self._options.entityName,
                updateNameParam: function (name) {
                    self._options.entityName = name;
                },
                onSearch: function (name) {
                    self._lastFilter = 'search';
                    self._options.entityName = name;
                    self._resetList();
                },
                noinput: function () {
                    return true;
                }
            }).element().appendTo(this.forceMemberList._header);
        }
    });
    w.Mojo.com.ForceDefinedGrainDlg = w.Mojo.ui.Dialog.extend({
        init: function (data, options) {
            this._super(undefined, options);
            this.customGrainData = options.customGrainData || {
                pids: options.pids || '',
                pids_1: options.pids_1 || '',
                pids_2: options.pids_2 || '',
                pids_3: options.pids_3 || '',
                pids_4: options.pids_4 || '',
                pids_5: options.pids_5 || '',
                grain: options.allGrain || 0,
                grain_1: options.grain_1 || 0,
                grain_2: options.grain_2 || 0,
                grain_3: options.grain_3 || 0,
                grain_4: options.grain_4 || 0,
                grain_5: options.grain_5 || 0,
                allGrain: options.allGrain,
                shengyuGrain: options.shengyuGrain || options.allGrain,
                selectedMember: options.selectedMember || 0,
                memberCount: options.memberCount || 0,
                forceMemberListData: options.forceMemberListData
            };
            this._data = data;
            this.element().addClass('mojo-com-forcedefinedgraindlg');
            this._paragraph = $("<div class='paragraph'></div>").appendTo(this._content);
            this._head = $("<div class='head'><span class='member'></span><span class='grain'></span></div>").appendTo(this._paragraph);
            this._list = $("<div class='list-parent'></div>").appendTo(this._paragraph);
            this._load();
            this._addButtons();
        },
        _load: function () {
            this._addContent();
        },
        _addContent: function (data) {
            this._addHead(data);
            this._addList(data);
        },
        _addHead: function () {
            this._setMember();
            this._setGrain();
        },
        _setMember: function (d) {
            this._head.find('.member').html(Mojo.utils.locale('force', 'g_changedItem', {
                num: this.customGrainData.selectedMember,
                count: this.customGrainData.memberCount
            }));
        },
        _setGrain: function (d) {
            var grain = this._head.find('.grain');
            grain.html(Mojo.utils.locale('force', 'g_remainderGrain', {
                grainNum: this.customGrainData.shengyuGrain
            }));
            if (this.customGrainData.shengyuGrain < 0) {
                grain.css({
                    color: '#CC3513'
                });
            }
        },
        _addButtons: function () {
            var self = this;
            var d = this.customGrainData;
            var g = d.allGrain == d.shengyuGrain;
            self._okButton = new Mojo.ui.Button(undefined, {
                special: 'button-big-red',
                disabled: g || d.shengyuGrain < 0 || d.selectedMember <= 0,
                text: Mojo.utils.locale('common', 'ok'),
                click: function () {
                    self._assignGrainCustomOk();
                },
                disableClick: function () {
                    if (g || d.selectedMember <= 0) {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'grain_not_input'));
                    } else if (d.shengyuGrain < 0) {
                        Mojo.app.toast.show(Mojo.utils.locale('force', 'grain_share_fail'));
                    }
                }
            }).element().appendTo(this._footer);
            new Mojo.ui.Button(undefined, {
                text: Mojo.utils.locale('force', 'by_position'),
                click: function () {
                    self.close();
                    new Mojo.com.ForceGrainShareDlg(self._options.forceGrainShareDlgData, self._options.forceGrainShareDlgOpts).open();
                }
            }).element().appendTo(this._footer);
        },
        _addList: function (d) {
            var self = this;
            this._listPanel = new Mojo.ui.ListPanel('payment-listpanel', {
                scrollable: true,
                showMore: false,
                pageSize: 20,
                loadFunc: function () {
                    setTimeout(function () {
                        self._listPanel.appendData(self._getLevels());
                        self._listPanel.resize();
                    }, 100);
                },
                drawFunc: function (d) {
                    return self._getListElement(d);
                }
            });
            this._paragraph.append(this._listPanel.element());
        },
        _getListElement: function (d) {
            var obj = new Mojo.Object(undefined, {
                classes: ['mojo-com-forcedefinedgrainelement', 'box-inner']
            });
            var level_body = $('<div class="level-body"></div>').html(Mojo.utils.locale('force', 'g_level_bodys', {
                level: d.level,
                num: d.bodys
            })).appendTo(obj.element());
            var level_grain = $('<div class="level-grain"></div>').html(Mojo.utils.locale('force', 'g_level_grain', {
                num: d.everyOneGrain
            })).appendTo(obj.element());
            var self = this;
            var btn = new Mojo.ui.Button(undefined, {
                classes: ['go-button'],
                special: 'go-exchange-btn',
                text: Mojo.utils.locale('force', 'assignbuff'),
                click: function () {
                    self._goAllot(d.level);
                    self.close();
                }
            }).element().appendTo(obj.element());
            return obj;
        },
        _goAllot: function (level) {
            $('body > .mojo-page').hide();
            var self = this;
            var list = new Mojo.com.ForceDefinedGrainListView(undefined, {
                customGrainData: self.customGrainData,
                customGrainLevel: level,
                allGrain: self._options.allGrain,
                back: function (customGrainData, forceMemberListData) {
                    self.customGrainData = customGrainData || self.customGrainData;
                    self._options.forceMemberListData = forceMemberListData;
                    list.element().remove();
                    $('body > .mojo-page').show();
                    self._newSelfDlg();
                },
                refresh: function () {}
            });
            list.element().appendTo($(document.body));
        },
        _getPreAssignGrainCustomData: function () {
            var newList = {};
            var forceMemberListData = this._options.forceMemberListData;
            if (!forceMemberListData) {
                return;
            }
            var player_num = forceMemberListData.player_num;
            var player_num_limit = forceMemberListData.player_num_limit;
            var memberList = forceMemberListData.list;
            var customGrainData = this.customGrainData;
            for (var i = 1; i <= 5; i++) {
                var level = i;
                var grain_level = customGrainData['grain_' + level];
                var pids = customGrainData['pids_' + level];
                var pids_arr = pids ? pids.split(',') : 0;
                var count_level = pids_arr.length;
                var allGrain_level = grain_level;
                newList[level] = {};
                newList[level]['count'] = count_level || 0;
                newList[level]['grain'] = allGrain_level || 0;
                newList[level]['titles'] = [];
                for (var j = 0; j < count_level; j++) {
                    var pid = pids_arr[j];
                    for (var k = 0; k < memberList.length; k++) {
                        var member = memberList[k];
                        var memberId = member.id;
                        if (pid == memberId) {
                            var titleInfo = member.title_info;
                            newList[level]['titles'].push(titleInfo);
                        }
                    }
                }
            }
            return newList;
        },
        _assignGrainCustomOk: function () {
            var d = this.customGrainData;
            var selectedMember = d.selectedMember;
            if (selectedMember <= 0) {
                return;
            }
            var _d = this._getPreAssignGrainCustomData();
            var self = this;
            var dlg = new Mojo.com.CommonDialog('com-profile-base-dialog', {
                title: Mojo.utils.locale('force', 'g_faliang_t'),
                classes: ['g_faliang_detail_dlg'],
                content: paragraph,
                leftBtnText: Mojo.utils.locale('common', 'ok'),
                leftBtnClick: function () {
                    Mojo.utils.ajaxUtil({
                        url: '/force/assignGrainCustom',
                        params: {
                            pids_1: d.pids_1 || '',
                            pids_2: d.pids_2 || '',
                            pids_3: d.pids_3 || '',
                            pids_4: d.pids_4 || '',
                            pids_5: d.pids_5 || '',
                            grain_1: d.grain_1 || 0,
                            grain_2: d.grain_2 || 0,
                            grain_3: d.grain_3 || 0,
                            grain_4: d.grain_4 || 0,
                            grain_5: d.grain_5 || 0
                        },
                        callback: function (result) {
                            Mojo.page.Force.getController().sync();
                            dlg.close();
                            var dlgconfirm = new Mojo.com.CommonDialog(undefined, {
                                title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                content: $("<div class='paragraph tip'></div>").html(Mojo.utils.locale('force', 'g_sendgrain_ok')),
                                rightBtnText: Mojo.utils.locale('common', 'close'),
                                rightBtnClick: function () {
                                    dlgconfirm.close();
                                }
                            });
                            dlgconfirm.open();
                        },
                        errcallback: function (result) {
                            if (result.errorCode == '130048') {
                                var grain = result.data.grain;
                                Mojo.page.Force.getController().sync();
                                self._options.forceGrainShareDlgData.grain = grain;
                                self.customGrainData.allGrain = grain;
                                self.customGrainData.grain = grain;
                                self.customGrainData.shengyuGrain = grain;
                                self._getShengyuGrain();
                            }
                            dlg.close();
                            var dlgconfirm = new Mojo.com.CommonDialog(undefined, {
                                title: Mojo.utils.locale('force', 'forcewar_tip_title'),
                                content: $("<div class='paragraph tip'></div>").html(result.errorMsg),
                                leftBtnText: Mojo.utils.locale('force', 'g_back_changeBtn'),
                                leftBtnClick: function () {
                                    dlgconfirm.close();
                                    self._newSelfDlg();
                                },
                                rightBtnText: Mojo.utils.locale('common', 'close'),
                                rightBtnClick: function () {
                                    dlgconfirm.close();
                                }
                            });
                            dlgconfirm.open();
                        }
                    });
                },
                rightBtnText: Mojo.utils.locale('common', 'back'),
                rightBtnClick: function () {
                    dlg.close();
                    self._newSelfDlg();
                }
            });
            var scrollerContent = $("<div class='scrollerContent'></div>");
            $('<div class="tips1"></div>').html(Mojo.utils.locale('force', 'g_faliang_detail_confirm')).appendTo(scrollerContent);
            var top_dang = $('<div class="top-dang"></div>').appendTo(scrollerContent);
            var tips3 = $('<div class="tips3"></div>').appendTo(scrollerContent);
            $('<div class="tips2"></div>').html(Mojo.utils.locale('force', 'g_faliang_detail_confirm2')).appendTo(scrollerContent);
            var list = _d;
            var num = 0;
            for (var i = 1; i <= 5; i++) {
                var item = list[i];
                var count = item.count;
                num += count;
                var grain = item.grain;
                var level = Mojo.utils.locale('force', 'level' + i);
                $('<div class="dang"></div>').html(Mojo.utils.locale('force', 'g_level_bodys2', {
                    level: level,
                    grain: grain,
                    num: count
                })).appendTo(top_dang);
                if (item.count > 0) {
                    var titles = item.titles;
                    var titlesSort = titles;
                    if (titles.length > 1) {
                        titlesSort = titles.sort(function (a, b) {
                            var p_a = a.nobility_grade;
                            var p_b = b.nobility_grade;
                            return p_b - p_a;
                        });
                    }
                    var dang = $('<div class="dang"></div>').appendTo(scrollerContent);
                    var t = $('<div class="dang-t"></div>').html(Mojo.utils.locale('force', 'g_faliang_detail_count', {
                        level: level
                    })).appendTo(dang);
                    for (var j = 0; j <= titlesSort.length; j++) {
                        var titleInfo = titlesSort[j];
                        var pn = Mojo.utils.playerNameHtmlStr(titleInfo);
                        dang.append(pn);
                    }
                }
            }
            tips3.html(Mojo.utils.locale('force', 'g_level_bodys3', {
                num: this.customGrainData.memberCount - this.customGrainData.selectedMember
            }));
            this.close();
            var paragraph = $("<div class='paragraph'></div>").appendTo(dlg._content);
            var s = new Mojo.ui.Scroll(undefined, scrollerContent, {
                direction: 2
            });
            s.element().appendTo(paragraph);
            dlg.open();
            s.refresh();
        },
        _getLevels: function () {
            var levelList = [];
            for (var i = 0; i < 5; i++) {
                var idx = i + 1;
                levelList.push({
                    level: idx,
                    bodys: this.customGrainData['pids_' + idx] ? this.customGrainData['pids_' + idx].split(',').length : 0,
                    everyOneGrain: this.customGrainData['grain_' + idx]
                });
            }
            return levelList;
        },
        _newSelfDlg: function () {
            var self = this;
            setTimeout(function () {
                window.scrollTo(0, 0);
                var dlg2 = new Mojo.com.ForceDefinedGrainDlg(self._data, {
                    forceGrainShareDlgData: self._options.forceGrainShareDlgData,
                    forceGrainShareDlgOpts: self._options.forceGrainShareDlgOpts,
                    customGrainData: self.customGrainData,
                    forceMemberListData: self._options.forceMemberListData,
                    getController: function () {
                        return self._options.getController();
                    }
                });
                dlg2.open();
            }, 300);
        },
        _getShengyuGrain: function () {
            var customGrainData = this.customGrainData;
            var allGrain = customGrainData.allGrain;
            for (var i = 1; i <= 5; i++) {
                var g = customGrainData['grain_' + i];
                var num = this._getCustomCount4Level(i);
                allGrain -= g * num;
            }
            customGrainData.shengyuGrain = allGrain;
            return customGrainData.shengyuGrain;
        },
        _getCustomCount4Level: function (l) {
            var customGrainData = this.customGrainData;
            var pidsLevel = customGrainData['pids_' + l];
            var pidsLevelArr = pidsLevel ? pidsLevel.split(',') : [];
            return pidsLevelArr.length;
        },
        _getDefaultOptions: function () {
            var levelList = [];
            for (var i = 0; i < 5; i++) {
                levelList.push({
                    level: i + 1,
                    bodys: 0,
                    everyOneGrain: 0
                });
            }
            return $.extend(true, this._super(), {
                title: Mojo.utils.locale('force', 'send_definedgrain'),
                levelList: levelList
            });
        }
    });
})(window, jQuery);